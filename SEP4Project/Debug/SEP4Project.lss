
SEP4Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800200  0000329e  00003332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000329e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000106f  008002a4  008002a4  000033d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008540  00000000  00000000  00003ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000234e  00000000  00000000  0000bff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004279  00000000  00000000  0000e342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015c8  00000000  00000000  000125bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ccf  00000000  00000000  00013b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a37  00000000  00000000  00016853  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  0001e28a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a8 c5       	rjmp	.+2896   	; 0xb82 <__vector_12>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__vector_25>
      68:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__vector_26>
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__vector_36>
      94:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__vector_37>
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__vector_39>
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 47 11 	jmp	0x228e	; 0x228e <__vector_51>
      d0:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__vector_52>
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_54>
      dc:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__vector_55>
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	be 01       	movw	r22, r28
      e6:	be 01       	movw	r22, r28
      e8:	be 01       	movw	r22, r28
      ea:	f8 01       	movw	r30, r16
      ec:	00 02       	muls	r16, r16
      ee:	16 02       	muls	r17, r22
      f0:	be 01       	movw	r22, r28
      f2:	be 01       	movw	r22, r28
      f4:	f8 01       	movw	r30, r16
      f6:	00 02       	muls	r16, r16
      f8:	e2 12       	cpse	r14, r18
      fa:	52 13       	cpse	r21, r18
      fc:	52 13       	cpse	r21, r18
      fe:	52 13       	cpse	r21, r18
     100:	52 13       	cpse	r21, r18
     102:	52 13       	cpse	r21, r18
     104:	52 13       	cpse	r21, r18
     106:	52 13       	cpse	r21, r18
     108:	e2 12       	cpse	r14, r18
     10a:	52 13       	cpse	r21, r18
     10c:	52 13       	cpse	r21, r18
     10e:	52 13       	cpse	r21, r18
     110:	52 13       	cpse	r21, r18
     112:	52 13       	cpse	r21, r18
     114:	52 13       	cpse	r21, r18
     116:	52 13       	cpse	r21, r18
     118:	e4 12       	cpse	r14, r20
     11a:	52 13       	cpse	r21, r18
     11c:	52 13       	cpse	r21, r18
     11e:	52 13       	cpse	r21, r18
     120:	52 13       	cpse	r21, r18
     122:	52 13       	cpse	r21, r18
     124:	52 13       	cpse	r21, r18
     126:	52 13       	cpse	r21, r18
     128:	52 13       	cpse	r21, r18
     12a:	52 13       	cpse	r21, r18
     12c:	52 13       	cpse	r21, r18
     12e:	52 13       	cpse	r21, r18
     130:	52 13       	cpse	r21, r18
     132:	52 13       	cpse	r21, r18
     134:	52 13       	cpse	r21, r18
     136:	52 13       	cpse	r21, r18
     138:	e4 12       	cpse	r14, r20
     13a:	52 13       	cpse	r21, r18
     13c:	52 13       	cpse	r21, r18
     13e:	52 13       	cpse	r21, r18
     140:	52 13       	cpse	r21, r18
     142:	52 13       	cpse	r21, r18
     144:	52 13       	cpse	r21, r18
     146:	52 13       	cpse	r21, r18
     148:	52 13       	cpse	r21, r18
     14a:	52 13       	cpse	r21, r18
     14c:	52 13       	cpse	r21, r18
     14e:	52 13       	cpse	r21, r18
     150:	52 13       	cpse	r21, r18
     152:	52 13       	cpse	r21, r18
     154:	52 13       	cpse	r21, r18
     156:	52 13       	cpse	r21, r18
     158:	4e 13       	cpse	r20, r30
     15a:	52 13       	cpse	r21, r18
     15c:	52 13       	cpse	r21, r18
     15e:	52 13       	cpse	r21, r18
     160:	52 13       	cpse	r21, r18
     162:	52 13       	cpse	r21, r18
     164:	52 13       	cpse	r21, r18
     166:	52 13       	cpse	r21, r18
     168:	19 13       	cpse	r17, r25
     16a:	52 13       	cpse	r21, r18
     16c:	52 13       	cpse	r21, r18
     16e:	52 13       	cpse	r21, r18
     170:	52 13       	cpse	r21, r18
     172:	52 13       	cpse	r21, r18
     174:	52 13       	cpse	r21, r18
     176:	52 13       	cpse	r21, r18
     178:	52 13       	cpse	r21, r18
     17a:	52 13       	cpse	r21, r18
     17c:	52 13       	cpse	r21, r18
     17e:	52 13       	cpse	r21, r18
     180:	52 13       	cpse	r21, r18
     182:	52 13       	cpse	r21, r18
     184:	52 13       	cpse	r21, r18
     186:	52 13       	cpse	r21, r18
     188:	0d 13       	cpse	r16, r29
     18a:	52 13       	cpse	r21, r18
     18c:	52 13       	cpse	r21, r18
     18e:	52 13       	cpse	r21, r18
     190:	52 13       	cpse	r21, r18
     192:	52 13       	cpse	r21, r18
     194:	52 13       	cpse	r21, r18
     196:	52 13       	cpse	r21, r18
     198:	31 13       	cpse	r19, r17

0000019a <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     19a:	0e e6       	ldi	r16, 0x6E	; 110
     19c:	12 e1       	ldi	r17, 0x12	; 18
     19e:	0f 2e       	mov	r0, r31
     1a0:	fe e9       	ldi	r31, 0x9E	; 158
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f2 e1       	ldi	r31, 0x12	; 18
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 6d 12 	lds	r24, 0x126D	; 0x80126d <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	43 d3       	rcall	.+1670   	; 0x852 <uxListRemove>
     1cc:	80 91 61 12 	lds	r24, 0x1261	; 0x801261 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 61 12 	sts	0x1261, r24	; 0x801261 <uxCurrentNumberOfTasks>
     1d6:	80 91 6d 12 	lds	r24, 0x126D	; 0x80126d <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 6d 12 	sts	0x126D, r24	; 0x80126d <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	92 d2       	rcall	.+1316   	; 0x70e <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	90 d2       	rcall	.+1312   	; 0x70e <vPortFree>
     1ee:	80 91 6d 12 	lds	r24, 0x126D	; 0x80126d <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	fe d3       	rcall	.+2044   	; 0x9fc <vPortYield>
     200:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 d6 12 	lds	r30, 0x12D6	; 0x8012d6 <pxCurrentTimerList>
     232:	f0 91 d7 12 	lds	r31, 0x12D7	; 0x8012d7 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0e c1       	rjmp	.+540    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 b7 0a 	call	0x156e	; 0x156e <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	64 c0       	rjmp	.+200    	; 0x32e <prvTimerTask+0x128>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 9d 0b 	call	0x173a	; 0x173a <xTaskResumeAll>
     27e:	e0 91 d6 12 	lds	r30, 0x12D6	; 0x8012d6 <pxCurrentTimerList>
     282:	f0 91 d7 12 	lds	r31, 0x12D7	; 0x8012d7 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	dc d2       	rcall	.+1464   	; 0x852 <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	87 89       	ldd	r24, Z+23	; 0x17
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	57 96       	adiw	r26, 0x17	; 23
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9e c0       	rjmp	.+316    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 d2 12 	lds	r24, 0x12D2	; 0x8012d2 <xTimerQueue>
     31c:	90 91 d3 12 	lds	r25, 0x12D3	; 0x8012d3 <xTimerQueue+0x1>
     320:	d7 d6       	rcall	.+3502   	; 0x10d0 <vQueueWaitForMessageRestricted>
     322:	0e 94 9d 0b 	call	0x173a	; 0x173a <xTaskResumeAll>
     326:	81 11       	cpse	r24, r1
     328:	8a c0       	rjmp	.+276    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32a:	68 d3       	rcall	.+1744   	; 0x9fc <vPortYield>
     32c:	88 c0       	rjmp	.+272    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32e:	0e 94 9d 0b 	call	0x173a	; 0x173a <xTaskResumeAll>
     332:	85 c0       	rjmp	.+266    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	88 23       	and	r24, r24
     338:	0c f4       	brge	.+2      	; 0x33c <prvTimerTask+0x136>
     33a:	81 c0       	rjmp	.+258    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     33c:	4e 80       	ldd	r4, Y+6	; 0x06
     33e:	5f 80       	ldd	r5, Y+7	; 0x07
     340:	d2 01       	movw	r26, r4
     342:	1c 96       	adiw	r26, 0x0c	; 12
     344:	8d 91       	ld	r24, X+
     346:	9c 91       	ld	r25, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	89 2b       	or	r24, r25
     34c:	19 f0       	breq	.+6      	; 0x354 <prvTimerTask+0x14e>
     34e:	c2 01       	movw	r24, r4
     350:	02 96       	adiw	r24, 0x02	; 2
     352:	7f d2       	rcall	.+1278   	; 0x852 <uxListRemove>
     354:	ce 01       	movw	r24, r28
     356:	08 96       	adiw	r24, 0x08	; 8
     358:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <prvSampleTimeNow>
     35c:	8b 01       	movw	r16, r22
     35e:	9c 01       	movw	r18, r24
     360:	e9 81       	ldd	r30, Y+1	; 0x01
     362:	0e 2e       	mov	r0, r30
     364:	00 0c       	add	r0, r0
     366:	ff 0b       	sbc	r31, r31
     368:	ea 30       	cpi	r30, 0x0A	; 10
     36a:	f1 05       	cpc	r31, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <prvTimerTask+0x16a>
     36e:	67 c0       	rjmp	.+206    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     370:	88 27       	eor	r24, r24
     372:	ee 58       	subi	r30, 0x8E	; 142
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	8f 4f       	sbci	r24, 0xFF	; 255
     378:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__tablejump2__>
     37c:	f2 01       	movw	r30, r4
     37e:	87 89       	ldd	r24, Z+23	; 0x17
     380:	81 60       	ori	r24, 0x01	; 1
     382:	87 8b       	std	Z+23, r24	; 0x17
     384:	ca 80       	ldd	r12, Y+2	; 0x02
     386:	db 80       	ldd	r13, Y+3	; 0x03
     388:	ec 80       	ldd	r14, Y+4	; 0x04
     38a:	fd 80       	ldd	r15, Y+5	; 0x05
     38c:	46 85       	ldd	r20, Z+14	; 0x0e
     38e:	57 85       	ldd	r21, Z+15	; 0x0f
     390:	60 89       	ldd	r22, Z+16	; 0x10
     392:	71 89       	ldd	r23, Z+17	; 0x11
     394:	4c 0d       	add	r20, r12
     396:	5d 1d       	adc	r21, r13
     398:	6e 1d       	adc	r22, r14
     39a:	7f 1d       	adc	r23, r15
     39c:	c2 01       	movw	r24, r4
     39e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <prvInsertTimerInActiveList>
     3a2:	88 23       	and	r24, r24
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <prvTimerTask+0x1a2>
     3a6:	4b c0       	rjmp	.+150    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3a8:	d2 01       	movw	r26, r4
     3aa:	54 96       	adiw	r26, 0x14	; 20
     3ac:	ed 91       	ld	r30, X+
     3ae:	fc 91       	ld	r31, X
     3b0:	55 97       	sbiw	r26, 0x15	; 21
     3b2:	c2 01       	movw	r24, r4
     3b4:	19 95       	eicall
     3b6:	f2 01       	movw	r30, r4
     3b8:	87 89       	ldd	r24, Z+23	; 0x17
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	40 c0       	rjmp	.+128    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3be:	4a 81       	ldd	r20, Y+2	; 0x02
     3c0:	5b 81       	ldd	r21, Y+3	; 0x03
     3c2:	6c 81       	ldd	r22, Y+4	; 0x04
     3c4:	7d 81       	ldd	r23, Y+5	; 0x05
     3c6:	86 85       	ldd	r24, Z+14	; 0x0e
     3c8:	97 85       	ldd	r25, Z+15	; 0x0f
     3ca:	a0 89       	ldd	r26, Z+16	; 0x10
     3cc:	b1 89       	ldd	r27, Z+17	; 0x11
     3ce:	9a 01       	movw	r18, r20
     3d0:	ab 01       	movw	r20, r22
     3d2:	28 0f       	add	r18, r24
     3d4:	39 1f       	adc	r19, r25
     3d6:	4a 1f       	adc	r20, r26
     3d8:	5b 1f       	adc	r21, r27
     3da:	c8 2c       	mov	r12, r8
     3dc:	d9 2c       	mov	r13, r9
     3de:	ea 2c       	mov	r14, r10
     3e0:	fb 2c       	mov	r15, r11
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	c2 01       	movw	r24, r4
     3ea:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTimerGenericCommand>
     3ee:	27 c0       	rjmp	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3f0:	d2 01       	movw	r26, r4
     3f2:	57 96       	adiw	r26, 0x17	; 23
     3f4:	8c 91       	ld	r24, X
     3f6:	57 97       	sbiw	r26, 0x17	; 23
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	57 96       	adiw	r26, 0x17	; 23
     3fc:	8c 93       	st	X, r24
     3fe:	1f c0       	rjmp	.+62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     400:	f2 01       	movw	r30, r4
     402:	87 89       	ldd	r24, Z+23	; 0x17
     404:	81 60       	ori	r24, 0x01	; 1
     406:	87 8b       	std	Z+23, r24	; 0x17
     408:	4a 81       	ldd	r20, Y+2	; 0x02
     40a:	5b 81       	ldd	r21, Y+3	; 0x03
     40c:	6c 81       	ldd	r22, Y+4	; 0x04
     40e:	7d 81       	ldd	r23, Y+5	; 0x05
     410:	46 87       	std	Z+14, r20	; 0x0e
     412:	57 87       	std	Z+15, r21	; 0x0f
     414:	60 8b       	std	Z+16, r22	; 0x10
     416:	71 8b       	std	Z+17, r23	; 0x11
     418:	40 0f       	add	r20, r16
     41a:	51 1f       	adc	r21, r17
     41c:	62 1f       	adc	r22, r18
     41e:	73 1f       	adc	r23, r19
     420:	68 01       	movw	r12, r16
     422:	79 01       	movw	r14, r18
     424:	c2 01       	movw	r24, r4
     426:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <prvInsertTimerInActiveList>
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	f2 01       	movw	r30, r4
     42e:	87 89       	ldd	r24, Z+23	; 0x17
     430:	81 fd       	sbrc	r24, 1
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	c2 01       	movw	r24, r4
     436:	6b d1       	rcall	.+726    	; 0x70e <vPortFree>
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	8e 7f       	andi	r24, 0xFE	; 254
     43c:	87 8b       	std	Z+23, r24	; 0x17
     43e:	28 2d       	mov	r18, r8
     440:	39 2d       	mov	r19, r9
     442:	4a 2d       	mov	r20, r10
     444:	5b 2d       	mov	r21, r11
     446:	66 2d       	mov	r22, r6
     448:	77 2d       	mov	r23, r7
     44a:	80 91 d2 12 	lds	r24, 0x12D2	; 0x8012d2 <xTimerQueue>
     44e:	90 91 d3 12 	lds	r25, 0x12D3	; 0x8012d3 <xTimerQueue+0x1>
     452:	a9 d5       	rcall	.+2898   	; 0xfa6 <xQueueReceive>
     454:	81 11       	cpse	r24, r1
     456:	6e cf       	rjmp	.-292    	; 0x334 <prvTimerTask+0x12e>
     458:	ea ce       	rjmp	.-556    	; 0x22e <prvTimerTask+0x28>
     45a:	0e 94 b7 0a 	call	0x156e	; 0x156e <vTaskSuspendAll>
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <prvSampleTimeNow>
     466:	6b 87       	std	Y+11, r22	; 0x0b
     468:	7c 87       	std	Y+12, r23	; 0x0c
     46a:	8d 87       	std	Y+13, r24	; 0x0d
     46c:	9e 87       	std	Y+14, r25	; 0x0e
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	81 11       	cpse	r24, r1
     472:	5d cf       	rjmp	.-326    	; 0x32e <prvTimerTask+0x128>
     474:	e0 91 d4 12 	lds	r30, 0x12D4	; 0x8012d4 <pxOverflowTimerList>
     478:	f0 91 d5 12 	lds	r31, 0x12D5	; 0x8012d5 <pxOverflowTimerList+0x1>
     47c:	80 81       	ld	r24, Z
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	81 11       	cpse	r24, r1
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	28 2c       	mov	r2, r8
     486:	39 2c       	mov	r3, r9
     488:	4a 2c       	mov	r4, r10
     48a:	5b 2c       	mov	r5, r11
     48c:	3b cf       	rjmp	.-394    	; 0x304 <prvTimerTask+0xfe>

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	d1 e2       	ldi	r29, 0x21	; 33
     496:	de bf       	out	0x3e, r29	; 62
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	12 e0       	ldi	r17, 0x02	; 2
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b2 e0       	ldi	r27, 0x02	; 2
     4a4:	ee e9       	ldi	r30, 0x9E	; 158
     4a6:	f2 e3       	ldi	r31, 0x32	; 50
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a4 3a       	cpi	r26, 0xA4	; 164
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e1       	ldi	r18, 0x13	; 19
     4ba:	a4 ea       	ldi	r26, 0xA4	; 164
     4bc:	b2 e0       	ldi	r27, 0x02	; 2
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a3 31       	cpi	r26, 0x13	; 19
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <main>
     4cc:	0c 94 4d 19 	jmp	0x329a	; 0x329a <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <get_temp>:
 */ 
#include <stdint.h>
#include "temperature_task.h"

uint16_t get_temp() {
	return hih8120_getHumidityPercent_x10();
     4d2:	0c 94 12 10 	jmp	0x2024	; 0x2024 <hih8120_getHumidityPercent_x10>
}
     4d6:	08 95       	ret

000004d8 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     4d8:	e7 e0       	ldi	r30, 0x07	; 7
     4da:	f1 e0       	ldi	r31, 0x01	; 1
     4dc:	80 81       	ld	r24, Z
     4de:	8f 60       	ori	r24, 0x0F	; 15
     4e0:	80 83       	st	Z, r24
     4e2:	08 95       	ret

000004e4 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     4e4:	e8 e0       	ldi	r30, 0x08	; 8
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	90 81       	ld	r25, Z
     4ea:	90 7f       	andi	r25, 0xF0	; 240
     4ec:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     4ee:	90 81       	ld	r25, Z
     4f0:	8f 70       	andi	r24, 0x0F	; 15
     4f2:	98 2b       	or	r25, r24
     4f4:	90 83       	st	Z, r25
     4f6:	08 95       	ret

000004f8 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     4f8:	e8 e0       	ldi	r30, 0x08	; 8
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
     4fc:	80 81       	ld	r24, Z
     4fe:	80 7f       	andi	r24, 0xF0	; 240
     500:	80 83       	st	Z, r24
     502:	08 95       	ret

00000504 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     50a:	ec ea       	ldi	r30, 0xAC	; 172
     50c:	f2 e0       	ldi	r31, 0x02	; 2
     50e:	01 c0       	rjmp	.+2      	; 0x512 <prvInsertBlockIntoFreeList+0xe>
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	31 81       	ldd	r19, Z+1	; 0x01
     516:	2a 17       	cp	r18, r26
     518:	3b 07       	cpc	r19, r27
     51a:	d0 f3       	brcs	.-12     	; 0x510 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     51c:	82 81       	ldd	r24, Z+2	; 0x02
     51e:	93 81       	ldd	r25, Z+3	; 0x03
     520:	af 01       	movw	r20, r30
     522:	48 0f       	add	r20, r24
     524:	59 1f       	adc	r21, r25
     526:	a4 17       	cp	r26, r20
     528:	b5 07       	cpc	r27, r21
     52a:	49 f4       	brne	.+18     	; 0x53e <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     52c:	12 96       	adiw	r26, 0x02	; 2
     52e:	4d 91       	ld	r20, X+
     530:	5c 91       	ld	r21, X
     532:	13 97       	sbiw	r26, 0x03	; 3
     534:	84 0f       	add	r24, r20
     536:	95 1f       	adc	r25, r21
     538:	93 83       	std	Z+3, r25	; 0x03
     53a:	82 83       	std	Z+2, r24	; 0x02
     53c:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     53e:	12 96       	adiw	r26, 0x02	; 2
     540:	8d 91       	ld	r24, X+
     542:	9c 91       	ld	r25, X
     544:	13 97       	sbiw	r26, 0x03	; 3
     546:	ed 01       	movw	r28, r26
     548:	c8 0f       	add	r28, r24
     54a:	d9 1f       	adc	r29, r25
     54c:	2c 17       	cp	r18, r28
     54e:	3d 07       	cpc	r19, r29
     550:	d9 f4       	brne	.+54     	; 0x588 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     552:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <pxEnd>
     556:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <pxEnd+0x1>
     55a:	c2 17       	cp	r28, r18
     55c:	d3 07       	cpc	r29, r19
     55e:	81 f0       	breq	.+32     	; 0x580 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     560:	2a 81       	ldd	r18, Y+2	; 0x02
     562:	3b 81       	ldd	r19, Y+3	; 0x03
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	13 96       	adiw	r26, 0x03	; 3
     56a:	9c 93       	st	X, r25
     56c:	8e 93       	st	-X, r24
     56e:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     570:	c0 81       	ld	r28, Z
     572:	d1 81       	ldd	r29, Z+1	; 0x01
     574:	88 81       	ld	r24, Y
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	11 96       	adiw	r26, 0x01	; 1
     57a:	9c 93       	st	X, r25
     57c:	8e 93       	st	-X, r24
     57e:	07 c0       	rjmp	.+14     	; 0x58e <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	dc 93       	st	X, r29
     584:	ce 93       	st	-X, r28
     586:	03 c0       	rjmp	.+6      	; 0x58e <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     588:	11 96       	adiw	r26, 0x01	; 1
     58a:	3c 93       	st	X, r19
     58c:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     58e:	ae 17       	cp	r26, r30
     590:	bf 07       	cpc	r27, r31
     592:	11 f0       	breq	.+4      	; 0x598 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     594:	b1 83       	std	Z+1, r27	; 0x01
     596:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     5b0:	de d7       	rcall	.+4028   	; 0x156e <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     5b2:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <pxEnd>
     5b6:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <pxEnd+0x1>
     5ba:	89 2b       	or	r24, r25
     5bc:	41 f5       	brne	.+80     	; 0x60e <pvPortMalloc+0x70>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5be:	ec ea       	ldi	r30, 0xAC	; 172
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	a0 eb       	ldi	r26, 0xB0	; 176
     5c4:	b2 e0       	ldi	r27, 0x02	; 2
     5c6:	b1 83       	std	Z+1, r27	; 0x01
     5c8:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     5ca:	13 82       	std	Z+3, r1	; 0x03
     5cc:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     5ce:	ec e4       	ldi	r30, 0x4C	; 76
     5d0:	f2 e1       	ldi	r31, 0x12	; 18
     5d2:	f0 93 ab 02 	sts	0x02AB, r31	; 0x8002ab <pxEnd+0x1>
     5d6:	e0 93 aa 02 	sts	0x02AA, r30	; 0x8002aa <pxEnd>
	pxEnd->xBlockSize = 0;
     5da:	13 82       	std	Z+3, r1	; 0x03
     5dc:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     5de:	11 82       	std	Z+1, r1	; 0x01
     5e0:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     5e2:	8c e9       	ldi	r24, 0x9C	; 156
     5e4:	9f e0       	ldi	r25, 0x0F	; 15
     5e6:	13 96       	adiw	r26, 0x03	; 3
     5e8:	9c 93       	st	X, r25
     5ea:	8e 93       	st	-X, r24
     5ec:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5ee:	ed 93       	st	X+, r30
     5f0:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5f2:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <xMinimumEverFreeBytesRemaining+0x1>
     5f6:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5fa:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <xFreeBytesRemaining+0x1>
     5fe:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e8       	ldi	r25, 0x80	; 128
     606:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__data_end+0x1>
     60a:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     60e:	e0 90 a4 02 	lds	r14, 0x02A4	; 0x8002a4 <__data_end>
     612:	f0 90 a5 02 	lds	r15, 0x02A5	; 0x8002a5 <__data_end+0x1>
     616:	c7 01       	movw	r24, r14
     618:	8c 23       	and	r24, r28
     61a:	9d 23       	and	r25, r29
     61c:	89 2b       	or	r24, r25
     61e:	09 f0       	breq	.+2      	; 0x622 <pvPortMalloc+0x84>
     620:	66 c0       	rjmp	.+204    	; 0x6ee <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     622:	20 97       	sbiw	r28, 0x00	; 0
     624:	09 f4       	brne	.+2      	; 0x628 <pvPortMalloc+0x8a>
     626:	66 c0       	rjmp	.+204    	; 0x6f4 <pvPortMalloc+0x156>
			{
				xWantedSize += xHeapStructSize;
     628:	ae 01       	movw	r20, r28
     62a:	4c 5f       	subi	r20, 0xFC	; 252
     62c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     62e:	09 f4       	brne	.+2      	; 0x632 <pvPortMalloc+0x94>
     630:	5e c0       	rjmp	.+188    	; 0x6ee <pvPortMalloc+0x150>
     632:	00 91 a8 02 	lds	r16, 0x02A8	; 0x8002a8 <xFreeBytesRemaining>
     636:	10 91 a9 02 	lds	r17, 0x02A9	; 0x8002a9 <xFreeBytesRemaining+0x1>
     63a:	04 17       	cp	r16, r20
     63c:	15 07       	cpc	r17, r21
     63e:	08 f4       	brcc	.+2      	; 0x642 <pvPortMalloc+0xa4>
     640:	56 c0       	rjmp	.+172    	; 0x6ee <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     642:	c0 91 ac 02 	lds	r28, 0x02AC	; 0x8002ac <xStart>
     646:	d0 91 ad 02 	lds	r29, 0x02AD	; 0x8002ad <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     64a:	ec ea       	ldi	r30, 0xAC	; 172
     64c:	f2 e0       	ldi	r31, 0x02	; 2
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     64e:	02 c0       	rjmp	.+4      	; 0x654 <pvPortMalloc+0xb6>
     650:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     652:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     654:	2a 81       	ldd	r18, Y+2	; 0x02
     656:	3b 81       	ldd	r19, Y+3	; 0x03
     658:	24 17       	cp	r18, r20
     65a:	35 07       	cpc	r19, r21
     65c:	28 f4       	brcc	.+10     	; 0x668 <pvPortMalloc+0xca>
     65e:	28 81       	ld	r18, Y
     660:	39 81       	ldd	r19, Y+1	; 0x01
     662:	21 15       	cp	r18, r1
     664:	31 05       	cpc	r19, r1
     666:	a1 f7       	brne	.-24     	; 0x650 <pvPortMalloc+0xb2>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     668:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <pxEnd>
     66c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <pxEnd+0x1>
     670:	c8 17       	cp	r28, r24
     672:	d9 07       	cpc	r29, r25
     674:	e1 f1       	breq	.+120    	; 0x6ee <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     676:	c0 80       	ld	r12, Z
     678:	d1 80       	ldd	r13, Z+1	; 0x01
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	c8 0e       	add	r12, r24
     67e:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     680:	88 81       	ld	r24, Y
     682:	99 81       	ldd	r25, Y+1	; 0x01
     684:	91 83       	std	Z+1, r25	; 0x01
     686:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     688:	2a 81       	ldd	r18, Y+2	; 0x02
     68a:	3b 81       	ldd	r19, Y+3	; 0x03
     68c:	24 1b       	sub	r18, r20
     68e:	35 0b       	sbc	r19, r21
     690:	29 30       	cpi	r18, 0x09	; 9
     692:	31 05       	cpc	r19, r1
     694:	48 f0       	brcs	.+18     	; 0x6a8 <pvPortMalloc+0x10a>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     696:	ce 01       	movw	r24, r28
     698:	84 0f       	add	r24, r20
     69a:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     69c:	fc 01       	movw	r30, r24
     69e:	33 83       	std	Z+3, r19	; 0x03
     6a0:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     6a2:	5b 83       	std	Y+3, r21	; 0x03
     6a4:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     6a6:	2e df       	rcall	.-420    	; 0x504 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     6a8:	8a 81       	ldd	r24, Y+2	; 0x02
     6aa:	9b 81       	ldd	r25, Y+3	; 0x03
     6ac:	08 1b       	sub	r16, r24
     6ae:	19 0b       	sbc	r17, r25
     6b0:	10 93 a9 02 	sts	0x02A9, r17	; 0x8002a9 <xFreeBytesRemaining+0x1>
     6b4:	00 93 a8 02 	sts	0x02A8, r16	; 0x8002a8 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     6b8:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <xMinimumEverFreeBytesRemaining>
     6bc:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <xMinimumEverFreeBytesRemaining+0x1>
     6c0:	02 17       	cp	r16, r18
     6c2:	13 07       	cpc	r17, r19
     6c4:	20 f4       	brcc	.+8      	; 0x6ce <pvPortMalloc+0x130>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6c6:	10 93 a7 02 	sts	0x02A7, r17	; 0x8002a7 <xMinimumEverFreeBytesRemaining+0x1>
     6ca:	00 93 a6 02 	sts	0x02A6, r16	; 0x8002a6 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     6ce:	e8 2a       	or	r14, r24
     6d0:	f9 2a       	or	r15, r25
     6d2:	fb 82       	std	Y+3, r15	; 0x03
     6d4:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     6d6:	19 82       	std	Y+1, r1	; 0x01
     6d8:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6da:	0e 94 9d 0b 	call	0x173a	; 0x173a <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     6de:	c1 14       	cp	r12, r1
     6e0:	d1 04       	cpc	r13, r1
     6e2:	59 f4       	brne	.+22     	; 0x6fa <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     6e4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <vApplicationMallocFailedHook>
     6e8:	c1 2c       	mov	r12, r1
     6ea:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     6ec:	06 c0       	rjmp	.+12     	; 0x6fa <pvPortMalloc+0x15c>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6ee:	0e 94 9d 0b 	call	0x173a	; 0x173a <xTaskResumeAll>
     6f2:	f8 cf       	rjmp	.-16     	; 0x6e4 <pvPortMalloc+0x146>
     6f4:	0e 94 9d 0b 	call	0x173a	; 0x173a <xTaskResumeAll>
     6f8:	f5 cf       	rjmp	.-22     	; 0x6e4 <pvPortMalloc+0x146>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     6fa:	c6 01       	movw	r24, r12
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	08 95       	ret

0000070e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	41 f1       	breq	.+80     	; 0x766 <vPortFree+0x58>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     716:	fc 01       	movw	r30, r24
     718:	34 97       	sbiw	r30, 0x04	; 4
     71a:	22 81       	ldd	r18, Z+2	; 0x02
     71c:	33 81       	ldd	r19, Z+3	; 0x03
     71e:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <__data_end>
     722:	50 91 a5 02 	lds	r21, 0x02A5	; 0x8002a5 <__data_end+0x1>
     726:	b9 01       	movw	r22, r18
     728:	64 23       	and	r22, r20
     72a:	75 23       	and	r23, r21
     72c:	67 2b       	or	r22, r23
     72e:	d9 f0       	breq	.+54     	; 0x766 <vPortFree+0x58>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     730:	60 81       	ld	r22, Z
     732:	71 81       	ldd	r23, Z+1	; 0x01
     734:	67 2b       	or	r22, r23
     736:	b9 f4       	brne	.+46     	; 0x766 <vPortFree+0x58>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     738:	ef 01       	movw	r28, r30
     73a:	40 95       	com	r20
     73c:	50 95       	com	r21
     73e:	24 23       	and	r18, r20
     740:	35 23       	and	r19, r21
     742:	33 83       	std	Z+3, r19	; 0x03
     744:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     746:	13 d7       	rcall	.+3622   	; 0x156e <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     748:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <xFreeBytesRemaining>
     74c:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <xFreeBytesRemaining+0x1>
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	9b 81       	ldd	r25, Y+3	; 0x03
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <xFreeBytesRemaining+0x1>
     75c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     760:	ce 01       	movw	r24, r28
				}
				( void ) xTaskResumeAll();
     762:	d0 de       	rcall	.-608    	; 0x504 <prvInsertBlockIntoFreeList>
     764:	ea d7       	rcall	.+4052   	; 0x173a <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     76c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     76e:	03 96       	adiw	r24, 0x03	; 3
     770:	92 83       	std	Z+2, r25	; 0x02
     772:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     774:	4f ef       	ldi	r20, 0xFF	; 255
     776:	5f ef       	ldi	r21, 0xFF	; 255
     778:	ba 01       	movw	r22, r20
     77a:	43 83       	std	Z+3, r20	; 0x03
     77c:	54 83       	std	Z+4, r21	; 0x04
     77e:	65 83       	std	Z+5, r22	; 0x05
     780:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     782:	90 87       	std	Z+8, r25	; 0x08
     784:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     786:	92 87       	std	Z+10, r25	; 0x0a
     788:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     78a:	10 82       	st	Z, r1
     78c:	08 95       	ret

0000078e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     78e:	fc 01       	movw	r30, r24
     790:	13 86       	std	Z+11, r1	; 0x0b
     792:	12 86       	std	Z+10, r1	; 0x0a
     794:	08 95       	ret

00000796 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	9c 01       	movw	r18, r24
     79c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     79e:	dc 01       	movw	r26, r24
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	cd 91       	ld	r28, X+
     7a4:	dc 91       	ld	r29, X
     7a6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     7a8:	d5 83       	std	Z+5, r29	; 0x05
     7aa:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     7ac:	8e 81       	ldd	r24, Y+6	; 0x06
     7ae:	9f 81       	ldd	r25, Y+7	; 0x07
     7b0:	97 83       	std	Z+7, r25	; 0x07
     7b2:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     7b4:	8e 81       	ldd	r24, Y+6	; 0x06
     7b6:	9f 81       	ldd	r25, Y+7	; 0x07
     7b8:	dc 01       	movw	r26, r24
     7ba:	15 96       	adiw	r26, 0x05	; 5
     7bc:	7c 93       	st	X, r23
     7be:	6e 93       	st	-X, r22
     7c0:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     7c2:	7f 83       	std	Y+7, r23	; 0x07
     7c4:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     7c6:	33 87       	std	Z+11, r19	; 0x0b
     7c8:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     7ca:	f9 01       	movw	r30, r18
     7cc:	80 81       	ld	r24, Z
     7ce:	8f 5f       	subi	r24, 0xFF	; 255
     7d0:	80 83       	st	Z, r24
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7e2:	08 81       	ld	r16, Y
     7e4:	19 81       	ldd	r17, Y+1	; 0x01
     7e6:	2a 81       	ldd	r18, Y+2	; 0x02
     7e8:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7ea:	0f 3f       	cpi	r16, 0xFF	; 255
     7ec:	4f ef       	ldi	r20, 0xFF	; 255
     7ee:	14 07       	cpc	r17, r20
     7f0:	24 07       	cpc	r18, r20
     7f2:	34 07       	cpc	r19, r20
     7f4:	21 f4       	brne	.+8      	; 0x7fe <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7f6:	fc 01       	movw	r30, r24
     7f8:	a1 85       	ldd	r26, Z+9	; 0x09
     7fa:	b2 85       	ldd	r27, Z+10	; 0x0a
     7fc:	11 c0       	rjmp	.+34     	; 0x820 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7fe:	dc 01       	movw	r26, r24
     800:	13 96       	adiw	r26, 0x03	; 3
     802:	01 c0       	rjmp	.+2      	; 0x806 <vListInsert+0x2e>
     804:	df 01       	movw	r26, r30
     806:	14 96       	adiw	r26, 0x04	; 4
     808:	ed 91       	ld	r30, X+
     80a:	fc 91       	ld	r31, X
     80c:	15 97       	sbiw	r26, 0x05	; 5
     80e:	40 81       	ld	r20, Z
     810:	51 81       	ldd	r21, Z+1	; 0x01
     812:	62 81       	ldd	r22, Z+2	; 0x02
     814:	73 81       	ldd	r23, Z+3	; 0x03
     816:	04 17       	cp	r16, r20
     818:	15 07       	cpc	r17, r21
     81a:	26 07       	cpc	r18, r22
     81c:	37 07       	cpc	r19, r23
     81e:	90 f7       	brcc	.-28     	; 0x804 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     820:	14 96       	adiw	r26, 0x04	; 4
     822:	ed 91       	ld	r30, X+
     824:	fc 91       	ld	r31, X
     826:	15 97       	sbiw	r26, 0x05	; 5
     828:	fd 83       	std	Y+5, r31	; 0x05
     82a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     82c:	d7 83       	std	Z+7, r29	; 0x07
     82e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     830:	bf 83       	std	Y+7, r27	; 0x07
     832:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     834:	15 96       	adiw	r26, 0x05	; 5
     836:	dc 93       	st	X, r29
     838:	ce 93       	st	-X, r28
     83a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     83c:	9b 87       	std	Y+11, r25	; 0x0b
     83e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     840:	fc 01       	movw	r30, r24
     842:	20 81       	ld	r18, Z
     844:	2f 5f       	subi	r18, 0xFF	; 255
     846:	20 83       	st	Z, r18
}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     858:	a2 85       	ldd	r26, Z+10	; 0x0a
     85a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     85c:	c4 81       	ldd	r28, Z+4	; 0x04
     85e:	d5 81       	ldd	r29, Z+5	; 0x05
     860:	86 81       	ldd	r24, Z+6	; 0x06
     862:	97 81       	ldd	r25, Z+7	; 0x07
     864:	9f 83       	std	Y+7, r25	; 0x07
     866:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     868:	c6 81       	ldd	r28, Z+6	; 0x06
     86a:	d7 81       	ldd	r29, Z+7	; 0x07
     86c:	84 81       	ldd	r24, Z+4	; 0x04
     86e:	95 81       	ldd	r25, Z+5	; 0x05
     870:	9d 83       	std	Y+5, r25	; 0x05
     872:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     874:	11 96       	adiw	r26, 0x01	; 1
     876:	8d 91       	ld	r24, X+
     878:	9c 91       	ld	r25, X
     87a:	12 97       	sbiw	r26, 0x02	; 2
     87c:	e8 17       	cp	r30, r24
     87e:	f9 07       	cpc	r31, r25
     880:	31 f4       	brne	.+12     	; 0x88e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     882:	86 81       	ldd	r24, Z+6	; 0x06
     884:	97 81       	ldd	r25, Z+7	; 0x07
     886:	12 96       	adiw	r26, 0x02	; 2
     888:	9c 93       	st	X, r25
     88a:	8e 93       	st	-X, r24
     88c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     88e:	13 86       	std	Z+11, r1	; 0x0b
     890:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     892:	8c 91       	ld	r24, X
     894:	81 50       	subi	r24, 0x01	; 1
     896:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     898:	8c 91       	ld	r24, X
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     8a0:	31 e1       	ldi	r19, 0x11	; 17
     8a2:	fc 01       	movw	r30, r24
     8a4:	30 83       	st	Z, r19
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	22 e2       	ldi	r18, 0x22	; 34
     8aa:	20 83       	st	Z, r18
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	a3 e3       	ldi	r26, 0x33	; 51
     8b0:	a0 83       	st	Z, r26
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	60 83       	st	Z, r22
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	70 83       	st	Z, r23
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	10 82       	st	Z, r1
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	10 82       	st	Z, r1
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	60 e8       	ldi	r22, 0x80	; 128
     8c6:	60 83       	st	Z, r22
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	10 82       	st	Z, r1
     8cc:	31 97       	sbiw	r30, 0x01	; 1
     8ce:	10 82       	st	Z, r1
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	10 82       	st	Z, r1
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	60 83       	st	Z, r22
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	63 e0       	ldi	r22, 0x03	; 3
     8de:	60 83       	st	Z, r22
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	64 e0       	ldi	r22, 0x04	; 4
     8e4:	60 83       	st	Z, r22
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	65 e0       	ldi	r22, 0x05	; 5
     8ea:	60 83       	st	Z, r22
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	66 e0       	ldi	r22, 0x06	; 6
     8f0:	60 83       	st	Z, r22
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	67 e0       	ldi	r22, 0x07	; 7
     8f6:	60 83       	st	Z, r22
     8f8:	31 97       	sbiw	r30, 0x01	; 1
     8fa:	68 e0       	ldi	r22, 0x08	; 8
     8fc:	60 83       	st	Z, r22
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	69 e0       	ldi	r22, 0x09	; 9
     902:	60 83       	st	Z, r22
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	60 e1       	ldi	r22, 0x10	; 16
     908:	60 83       	st	Z, r22
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	30 83       	st	Z, r19
     90e:	31 97       	sbiw	r30, 0x01	; 1
     910:	32 e1       	ldi	r19, 0x12	; 18
     912:	30 83       	st	Z, r19
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	33 e1       	ldi	r19, 0x13	; 19
     918:	30 83       	st	Z, r19
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	34 e1       	ldi	r19, 0x14	; 20
     91e:	30 83       	st	Z, r19
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	35 e1       	ldi	r19, 0x15	; 21
     924:	30 83       	st	Z, r19
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	36 e1       	ldi	r19, 0x16	; 22
     92a:	30 83       	st	Z, r19
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	37 e1       	ldi	r19, 0x17	; 23
     930:	30 83       	st	Z, r19
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	38 e1       	ldi	r19, 0x18	; 24
     936:	30 83       	st	Z, r19
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	39 e1       	ldi	r19, 0x19	; 25
     93c:	30 83       	st	Z, r19
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	30 e2       	ldi	r19, 0x20	; 32
     942:	30 83       	st	Z, r19
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	31 e2       	ldi	r19, 0x21	; 33
     948:	30 83       	st	Z, r19
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	20 83       	st	Z, r18
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	23 e2       	ldi	r18, 0x23	; 35
     952:	20 83       	st	Z, r18
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	40 83       	st	Z, r20
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	50 83       	st	Z, r21
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	26 e2       	ldi	r18, 0x26	; 38
     960:	20 83       	st	Z, r18
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	27 e2       	ldi	r18, 0x27	; 39
     966:	20 83       	st	Z, r18
     968:	31 97       	sbiw	r30, 0x01	; 1
     96a:	28 e2       	ldi	r18, 0x28	; 40
     96c:	20 83       	st	Z, r18
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	29 e2       	ldi	r18, 0x29	; 41
     972:	20 83       	st	Z, r18
     974:	31 97       	sbiw	r30, 0x01	; 1
     976:	20 e3       	ldi	r18, 0x30	; 48
     978:	20 83       	st	Z, r18
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	21 e3       	ldi	r18, 0x31	; 49
     97e:	20 83       	st	Z, r18
     980:	89 97       	sbiw	r24, 0x29	; 41
     982:	08 95       	ret

00000984 <xPortStartScheduler>:
     984:	a8 95       	wdr
     986:	90 ec       	ldi	r25, 0xC0	; 192
     988:	88 e1       	ldi	r24, 0x18	; 24
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	a8 95       	wdr
     990:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     994:	0f be       	out	0x3f, r0	; 63
     996:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     99a:	a0 91 ca 12 	lds	r26, 0x12CA	; 0x8012ca <pxCurrentTCB>
     99e:	b0 91 cb 12 	lds	r27, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
     9a2:	cd 91       	ld	r28, X+
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	dd 91       	ld	r29, X+
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	7f 90       	pop	r7
     9dc:	6f 90       	pop	r6
     9de:	5f 90       	pop	r5
     9e0:	4f 90       	pop	r4
     9e2:	3f 90       	pop	r3
     9e4:	2f 90       	pop	r2
     9e6:	1f 90       	pop	r1
     9e8:	0f 90       	pop	r0
     9ea:	0c be       	out	0x3c, r0	; 60
     9ec:	0f 90       	pop	r0
     9ee:	0b be       	out	0x3b, r0	; 59
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	08 95       	ret
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 95       	ret

000009fc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	0f 92       	push	r0
     a04:	0b b6       	in	r0, 0x3b	; 59
     a06:	0f 92       	push	r0
     a08:	0c b6       	in	r0, 0x3c	; 60
     a0a:	0f 92       	push	r0
     a0c:	1f 92       	push	r1
     a0e:	11 24       	eor	r1, r1
     a10:	2f 92       	push	r2
     a12:	3f 92       	push	r3
     a14:	4f 92       	push	r4
     a16:	5f 92       	push	r5
     a18:	6f 92       	push	r6
     a1a:	7f 92       	push	r7
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
     a4c:	a0 91 ca 12 	lds	r26, 0x12CA	; 0x8012ca <pxCurrentTCB>
     a50:	b0 91 cb 12 	lds	r27, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
     a54:	0d b6       	in	r0, 0x3d	; 61
     a56:	0d 92       	st	X+, r0
     a58:	0e b6       	in	r0, 0x3e	; 62
     a5a:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     a5c:	f6 d6       	rcall	.+3564   	; 0x184a <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     a5e:	a0 91 ca 12 	lds	r26, 0x12CA	; 0x8012ca <pxCurrentTCB>
     a62:	b0 91 cb 12 	lds	r27, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
     a66:	cd 91       	ld	r28, X+
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	dd 91       	ld	r29, X+
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	bf 91       	pop	r27
     a78:	af 91       	pop	r26
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	7f 91       	pop	r23
     a80:	6f 91       	pop	r22
     a82:	5f 91       	pop	r21
     a84:	4f 91       	pop	r20
     a86:	3f 91       	pop	r19
     a88:	2f 91       	pop	r18
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	7f 90       	pop	r7
     aa0:	6f 90       	pop	r6
     aa2:	5f 90       	pop	r5
     aa4:	4f 90       	pop	r4
     aa6:	3f 90       	pop	r3
     aa8:	2f 90       	pop	r2
     aaa:	1f 90       	pop	r1
     aac:	0f 90       	pop	r0
     aae:	0c be       	out	0x3c, r0	; 60
     ab0:	0f 90       	pop	r0
     ab2:	0b be       	out	0x3b, r0	; 59
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     aba:	08 95       	ret

00000abc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	0f 92       	push	r0
     ac4:	0b b6       	in	r0, 0x3b	; 59
     ac6:	0f 92       	push	r0
     ac8:	0c b6       	in	r0, 0x3c	; 60
     aca:	0f 92       	push	r0
     acc:	1f 92       	push	r1
     ace:	11 24       	eor	r1, r1
     ad0:	2f 92       	push	r2
     ad2:	3f 92       	push	r3
     ad4:	4f 92       	push	r4
     ad6:	5f 92       	push	r5
     ad8:	6f 92       	push	r6
     ada:	7f 92       	push	r7
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ef 93       	push	r30
     b0a:	ff 93       	push	r31
     b0c:	a0 91 ca 12 	lds	r26, 0x12CA	; 0x8012ca <pxCurrentTCB>
     b10:	b0 91 cb 12 	lds	r27, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
     b14:	0d b6       	in	r0, 0x3d	; 61
     b16:	0d 92       	st	X+, r0
     b18:	0e b6       	in	r0, 0x3e	; 62
     b1a:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     b1c:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     b1e:	3b d5       	rcall	.+2678   	; 0x1596 <xTaskIncrementTick>
     b20:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     b22:	93 d6       	rcall	.+3366   	; 0x184a <vTaskSwitchContext>
     b24:	a0 91 ca 12 	lds	r26, 0x12CA	; 0x8012ca <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     b28:	b0 91 cb 12 	lds	r27, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
     b2c:	cd 91       	ld	r28, X+
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	dd 91       	ld	r29, X+
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	9f 90       	pop	r9
     b62:	8f 90       	pop	r8
     b64:	7f 90       	pop	r7
     b66:	6f 90       	pop	r6
     b68:	5f 90       	pop	r5
     b6a:	4f 90       	pop	r4
     b6c:	3f 90       	pop	r3
     b6e:	2f 90       	pop	r2
     b70:	1f 90       	pop	r1
     b72:	0f 90       	pop	r0
     b74:	0c be       	out	0x3c, r0	; 60
     b76:	0f 90       	pop	r0
     b78:	0b be       	out	0x3b, r0	; 59
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	08 95       	ret

00000b82 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     b82:	9c df       	rcall	.-200    	; 0xabc <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     b84:	18 95       	reti

00000b86 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	0f 92       	push	r0
     b8c:	fc 01       	movw	r30, r24
     b8e:	96 8d       	ldd	r25, Z+30	; 0x1e
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	91 11       	cpse	r25, r1
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret

00000b9c <prvCopyDataToQueue>:
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ec 01       	movw	r28, r24
     ba6:	04 2f       	mov	r16, r20
     ba8:	1e 8d       	ldd	r17, Y+30	; 0x1e
     baa:	48 a1       	ldd	r20, Y+32	; 0x20
     bac:	41 11       	cpse	r20, r1
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <prvCopyDataToQueue+0x2a>
     bb0:	88 81       	ld	r24, Y
     bb2:	99 81       	ldd	r25, Y+1	; 0x01
     bb4:	89 2b       	or	r24, r25
     bb6:	09 f0       	breq	.+2      	; 0xbba <prvCopyDataToQueue+0x1e>
     bb8:	41 c0       	rjmp	.+130    	; 0xc3c <prvCopyDataToQueue+0xa0>
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	9d 81       	ldd	r25, Y+5	; 0x05
     bbe:	b5 d7       	rcall	.+3946   	; 0x1b2a <xTaskPriorityDisinherit>
     bc0:	1d 82       	std	Y+5, r1	; 0x05
     bc2:	1c 82       	std	Y+4, r1	; 0x04
     bc4:	42 c0       	rjmp	.+132    	; 0xc4a <prvCopyDataToQueue+0xae>
     bc6:	01 11       	cpse	r16, r1
     bc8:	17 c0       	rjmp	.+46     	; 0xbf8 <prvCopyDataToQueue+0x5c>
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	9b 81       	ldd	r25, Y+3	; 0x03
     bd0:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <memcpy>
     bd4:	28 a1       	ldd	r18, Y+32	; 0x20
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	82 0f       	add	r24, r18
     bdc:	91 1d       	adc	r25, r1
     bde:	9b 83       	std	Y+3, r25	; 0x03
     be0:	8a 83       	std	Y+2, r24	; 0x02
     be2:	2c 81       	ldd	r18, Y+4	; 0x04
     be4:	3d 81       	ldd	r19, Y+5	; 0x05
     be6:	82 17       	cp	r24, r18
     be8:	93 07       	cpc	r25, r19
     bea:	50 f1       	brcs	.+84     	; 0xc40 <prvCopyDataToQueue+0xa4>
     bec:	88 81       	ld	r24, Y
     bee:	99 81       	ldd	r25, Y+1	; 0x01
     bf0:	9b 83       	std	Y+3, r25	; 0x03
     bf2:	8a 83       	std	Y+2, r24	; 0x02
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	29 c0       	rjmp	.+82     	; 0xc4a <prvCopyDataToQueue+0xae>
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	8e 81       	ldd	r24, Y+6	; 0x06
     bfc:	9f 81       	ldd	r25, Y+7	; 0x07
     bfe:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <memcpy>
     c02:	88 a1       	ldd	r24, Y+32	; 0x20
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	91 95       	neg	r25
     c08:	81 95       	neg	r24
     c0a:	91 09       	sbc	r25, r1
     c0c:	2e 81       	ldd	r18, Y+6	; 0x06
     c0e:	3f 81       	ldd	r19, Y+7	; 0x07
     c10:	28 0f       	add	r18, r24
     c12:	39 1f       	adc	r19, r25
     c14:	3f 83       	std	Y+7, r19	; 0x07
     c16:	2e 83       	std	Y+6, r18	; 0x06
     c18:	48 81       	ld	r20, Y
     c1a:	59 81       	ldd	r21, Y+1	; 0x01
     c1c:	24 17       	cp	r18, r20
     c1e:	35 07       	cpc	r19, r21
     c20:	30 f4       	brcc	.+12     	; 0xc2e <prvCopyDataToQueue+0x92>
     c22:	2c 81       	ldd	r18, Y+4	; 0x04
     c24:	3d 81       	ldd	r19, Y+5	; 0x05
     c26:	82 0f       	add	r24, r18
     c28:	93 1f       	adc	r25, r19
     c2a:	9f 83       	std	Y+7, r25	; 0x07
     c2c:	8e 83       	std	Y+6, r24	; 0x06
     c2e:	02 30       	cpi	r16, 0x02	; 2
     c30:	49 f4       	brne	.+18     	; 0xc44 <prvCopyDataToQueue+0xa8>
     c32:	11 23       	and	r17, r17
     c34:	49 f0       	breq	.+18     	; 0xc48 <prvCopyDataToQueue+0xac>
     c36:	11 50       	subi	r17, 0x01	; 1
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	07 c0       	rjmp	.+14     	; 0xc4a <prvCopyDataToQueue+0xae>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <prvCopyDataToQueue+0xae>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <prvCopyDataToQueue+0xae>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <prvCopyDataToQueue+0xae>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	1f 5f       	subi	r17, 0xFF	; 255
     c4c:	1e 8f       	std	Y+30, r17	; 0x1e
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <prvCopyDataFromQueue>:
     c58:	fc 01       	movw	r30, r24
     c5a:	40 a1       	ldd	r20, Z+32	; 0x20
     c5c:	44 23       	and	r20, r20
     c5e:	a9 f0       	breq	.+42     	; 0xc8a <prvCopyDataFromQueue+0x32>
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	26 81       	ldd	r18, Z+6	; 0x06
     c64:	37 81       	ldd	r19, Z+7	; 0x07
     c66:	24 0f       	add	r18, r20
     c68:	35 1f       	adc	r19, r21
     c6a:	37 83       	std	Z+7, r19	; 0x07
     c6c:	26 83       	std	Z+6, r18	; 0x06
     c6e:	84 81       	ldd	r24, Z+4	; 0x04
     c70:	95 81       	ldd	r25, Z+5	; 0x05
     c72:	28 17       	cp	r18, r24
     c74:	39 07       	cpc	r19, r25
     c76:	20 f0       	brcs	.+8      	; 0xc80 <prvCopyDataFromQueue+0x28>
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	97 83       	std	Z+7, r25	; 0x07
     c7e:	86 83       	std	Z+6, r24	; 0x06
     c80:	cb 01       	movw	r24, r22
     c82:	66 81       	ldd	r22, Z+6	; 0x06
     c84:	77 81       	ldd	r23, Z+7	; 0x07
     c86:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <memcpy>
     c8a:	08 95       	ret

00000c8c <prvUnlockQueue>:
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	8c 01       	movw	r16, r24
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	0f 92       	push	r0
     c9e:	fc 01       	movw	r30, r24
     ca0:	c2 a1       	ldd	r28, Z+34	; 0x22
     ca2:	1c 16       	cp	r1, r28
     ca4:	9c f4       	brge	.+38     	; 0xccc <prvUnlockQueue+0x40>
     ca6:	83 89       	ldd	r24, Z+19	; 0x13
     ca8:	81 11       	cpse	r24, r1
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <prvUnlockQueue+0x2c>
     cac:	0f c0       	rjmp	.+30     	; 0xccc <prvUnlockQueue+0x40>
     cae:	f8 01       	movw	r30, r16
     cb0:	83 89       	ldd	r24, Z+19	; 0x13
     cb2:	81 11       	cpse	r24, r1
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <prvUnlockQueue+0x34>
     cb6:	0a c0       	rjmp	.+20     	; 0xccc <prvUnlockQueue+0x40>
     cb8:	78 01       	movw	r14, r16
     cba:	f3 e1       	ldi	r31, 0x13	; 19
     cbc:	ef 0e       	add	r14, r31
     cbe:	f1 1c       	adc	r15, r1
     cc0:	c7 01       	movw	r24, r14
     cc2:	79 d6       	rcall	.+3314   	; 0x19b6 <xTaskRemoveFromEventList>
     cc4:	81 11       	cpse	r24, r1
     cc6:	1f d7       	rcall	.+3646   	; 0x1b06 <vTaskMissedYield>
     cc8:	c1 50       	subi	r28, 0x01	; 1
     cca:	89 f7       	brne	.-30     	; 0xcae <prvUnlockQueue+0x22>
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	f8 01       	movw	r30, r16
     cd0:	82 a3       	std	Z+34, r24	; 0x22
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	0f 92       	push	r0
     cdc:	c1 a1       	ldd	r28, Z+33	; 0x21
     cde:	1c 16       	cp	r1, r28
     ce0:	9c f4       	brge	.+38     	; 0xd08 <prvUnlockQueue+0x7c>
     ce2:	80 85       	ldd	r24, Z+8	; 0x08
     ce4:	81 11       	cpse	r24, r1
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <prvUnlockQueue+0x68>
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <prvUnlockQueue+0x7c>
     cea:	f8 01       	movw	r30, r16
     cec:	80 85       	ldd	r24, Z+8	; 0x08
     cee:	81 11       	cpse	r24, r1
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <prvUnlockQueue+0x70>
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <prvUnlockQueue+0x7c>
     cf4:	78 01       	movw	r14, r16
     cf6:	f8 e0       	ldi	r31, 0x08	; 8
     cf8:	ef 0e       	add	r14, r31
     cfa:	f1 1c       	adc	r15, r1
     cfc:	c7 01       	movw	r24, r14
     cfe:	5b d6       	rcall	.+3254   	; 0x19b6 <xTaskRemoveFromEventList>
     d00:	81 11       	cpse	r24, r1
     d02:	01 d7       	rcall	.+3586   	; 0x1b06 <vTaskMissedYield>
     d04:	c1 50       	subi	r28, 0x01	; 1
     d06:	89 f7       	brne	.-30     	; 0xcea <prvUnlockQueue+0x5e>
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	f8 01       	movw	r30, r16
     d0c:	81 a3       	std	Z+33, r24	; 0x21
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	08 95       	ret

00000d1e <xQueueGenericReset>:
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	0f 92       	push	r0
     d2a:	e8 81       	ld	r30, Y
     d2c:	f9 81       	ldd	r31, Y+1	; 0x01
     d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d30:	28 a1       	ldd	r18, Y+32	; 0x20
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	82 9f       	mul	r24, r18
     d38:	a0 01       	movw	r20, r0
     d3a:	83 9f       	mul	r24, r19
     d3c:	50 0d       	add	r21, r0
     d3e:	92 9f       	mul	r25, r18
     d40:	50 0d       	add	r21, r0
     d42:	11 24       	eor	r1, r1
     d44:	4e 0f       	add	r20, r30
     d46:	5f 1f       	adc	r21, r31
     d48:	5d 83       	std	Y+5, r21	; 0x05
     d4a:	4c 83       	std	Y+4, r20	; 0x04
     d4c:	1e 8e       	std	Y+30, r1	; 0x1e
     d4e:	fb 83       	std	Y+3, r31	; 0x03
     d50:	ea 83       	std	Y+2, r30	; 0x02
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	82 9f       	mul	r24, r18
     d56:	a0 01       	movw	r20, r0
     d58:	83 9f       	mul	r24, r19
     d5a:	50 0d       	add	r21, r0
     d5c:	92 9f       	mul	r25, r18
     d5e:	50 0d       	add	r21, r0
     d60:	11 24       	eor	r1, r1
     d62:	cf 01       	movw	r24, r30
     d64:	84 0f       	add	r24, r20
     d66:	95 1f       	adc	r25, r21
     d68:	9f 83       	std	Y+7, r25	; 0x07
     d6a:	8e 83       	std	Y+6, r24	; 0x06
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	89 a3       	std	Y+33, r24	; 0x21
     d70:	8a a3       	std	Y+34, r24	; 0x22
     d72:	61 11       	cpse	r22, r1
     d74:	0a c0       	rjmp	.+20     	; 0xd8a <xQueueGenericReset+0x6c>
     d76:	88 85       	ldd	r24, Y+8	; 0x08
     d78:	88 23       	and	r24, r24
     d7a:	69 f0       	breq	.+26     	; 0xd96 <xQueueGenericReset+0x78>
     d7c:	ce 01       	movw	r24, r28
     d7e:	08 96       	adiw	r24, 0x08	; 8
     d80:	1a d6       	rcall	.+3124   	; 0x19b6 <xTaskRemoveFromEventList>
     d82:	88 23       	and	r24, r24
     d84:	41 f0       	breq	.+16     	; 0xd96 <xQueueGenericReset+0x78>
     d86:	3a de       	rcall	.-908    	; 0x9fc <vPortYield>
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <xQueueGenericReset+0x78>
     d8a:	ce 01       	movw	r24, r28
     d8c:	08 96       	adiw	r24, 0x08	; 8
     d8e:	ee dc       	rcall	.-1572   	; 0x76c <vListInitialise>
     d90:	ce 01       	movw	r24, r28
     d92:	43 96       	adiw	r24, 0x13	; 19
     d94:	eb dc       	rcall	.-1578   	; 0x76c <vListInitialise>
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <xQueueGenericCreate>:
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	08 2f       	mov	r16, r24
     dae:	16 2f       	mov	r17, r22
     db0:	f4 2e       	mov	r15, r20
     db2:	66 23       	and	r22, r22
     db4:	b9 f0       	breq	.+46     	; 0xde4 <xQueueGenericCreate+0x42>
     db6:	86 9f       	mul	r24, r22
     db8:	c0 01       	movw	r24, r0
     dba:	11 24       	eor	r1, r1
     dbc:	85 96       	adiw	r24, 0x25	; 37
     dbe:	ef db       	rcall	.-2082   	; 0x59e <pvPortMalloc>
     dc0:	ec 01       	movw	r28, r24
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	41 f4       	brne	.+16     	; 0xdd6 <xQueueGenericCreate+0x34>
     dc6:	14 c0       	rjmp	.+40     	; 0xdf0 <xQueueGenericCreate+0x4e>
     dc8:	0f 8f       	std	Y+31, r16	; 0x1f
     dca:	18 a3       	std	Y+32, r17	; 0x20
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	ce 01       	movw	r24, r28
     dd0:	a6 df       	rcall	.-180    	; 0xd1e <xQueueGenericReset>
     dd2:	fc a2       	std	Y+36, r15	; 0x24
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <xQueueGenericCreate+0x4e>
     dd6:	85 96       	adiw	r24, 0x25	; 37
     dd8:	99 83       	std	Y+1, r25	; 0x01
     dda:	88 83       	st	Y, r24
     ddc:	f5 cf       	rjmp	.-22     	; 0xdc8 <xQueueGenericCreate+0x26>
     dde:	d9 83       	std	Y+1, r29	; 0x01
     de0:	c8 83       	st	Y, r28
     de2:	f2 cf       	rjmp	.-28     	; 0xdc8 <xQueueGenericCreate+0x26>
     de4:	85 e2       	ldi	r24, 0x25	; 37
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	da db       	rcall	.-2124   	; 0x59e <pvPortMalloc>
     dea:	ec 01       	movw	r28, r24
     dec:	89 2b       	or	r24, r25
     dee:	b9 f7       	brne	.-18     	; 0xdde <xQueueGenericCreate+0x3c>
     df0:	ce 01       	movw	r24, r28
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	08 95       	ret

00000dfe <xQueueGenericSend>:
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	29 97       	sbiw	r28, 0x09	; 9
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	7c 01       	movw	r14, r24
     e26:	5b 01       	movw	r10, r22
     e28:	2e 83       	std	Y+6, r18	; 0x06
     e2a:	3f 83       	std	Y+7, r19	; 0x07
     e2c:	48 87       	std	Y+8, r20	; 0x08
     e2e:	59 87       	std	Y+9, r21	; 0x09
     e30:	10 e0       	ldi	r17, 0x00	; 0
     e32:	99 24       	eor	r9, r9
     e34:	93 94       	inc	r9
     e36:	6c 01       	movw	r12, r24
     e38:	88 e0       	ldi	r24, 0x08	; 8
     e3a:	c8 0e       	add	r12, r24
     e3c:	d1 1c       	adc	r13, r1
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	0f 92       	push	r0
     e44:	f7 01       	movw	r30, r14
     e46:	96 8d       	ldd	r25, Z+30	; 0x1e
     e48:	87 8d       	ldd	r24, Z+31	; 0x1f
     e4a:	98 17       	cp	r25, r24
     e4c:	10 f0       	brcs	.+4      	; 0xe52 <xQueueGenericSend+0x54>
     e4e:	02 30       	cpi	r16, 0x02	; 2
     e50:	a9 f4       	brne	.+42     	; 0xe7c <xQueueGenericSend+0x7e>
     e52:	40 2f       	mov	r20, r16
     e54:	b5 01       	movw	r22, r10
     e56:	c7 01       	movw	r24, r14
     e58:	a1 de       	rcall	.-702    	; 0xb9c <prvCopyDataToQueue>
     e5a:	f7 01       	movw	r30, r14
     e5c:	93 89       	ldd	r25, Z+19	; 0x13
     e5e:	99 23       	and	r25, r25
     e60:	39 f0       	breq	.+14     	; 0xe70 <xQueueGenericSend+0x72>
     e62:	c7 01       	movw	r24, r14
     e64:	43 96       	adiw	r24, 0x13	; 19
     e66:	a7 d5       	rcall	.+2894   	; 0x19b6 <xTaskRemoveFromEventList>
     e68:	88 23       	and	r24, r24
     e6a:	21 f0       	breq	.+8      	; 0xe74 <xQueueGenericSend+0x76>
     e6c:	c7 dd       	rcall	.-1138   	; 0x9fc <vPortYield>
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <xQueueGenericSend+0x76>
     e70:	81 11       	cpse	r24, r1
     e72:	c4 dd       	rcall	.-1144   	; 0x9fc <vPortYield>
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	4b c0       	rjmp	.+150    	; 0xf12 <xQueueGenericSend+0x114>
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	a8 85       	ldd	r26, Y+8	; 0x08
     e82:	b9 85       	ldd	r27, Y+9	; 0x09
     e84:	89 2b       	or	r24, r25
     e86:	8a 2b       	or	r24, r26
     e88:	8b 2b       	or	r24, r27
     e8a:	21 f4       	brne	.+8      	; 0xe94 <xQueueGenericSend+0x96>
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	3f c0       	rjmp	.+126    	; 0xf12 <xQueueGenericSend+0x114>
     e94:	11 11       	cpse	r17, r1
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <xQueueGenericSend+0xa2>
     e98:	ce 01       	movw	r24, r28
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	ce d5       	rcall	.+2972   	; 0x1a3a <vTaskInternalSetTimeOutState>
     e9e:	19 2d       	mov	r17, r9
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	64 d3       	rcall	.+1736   	; 0x156e <vTaskSuspendAll>
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	0f 92       	push	r0
     eac:	f7 01       	movw	r30, r14
     eae:	81 a1       	ldd	r24, Z+33	; 0x21
     eb0:	8f 3f       	cpi	r24, 0xFF	; 255
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <xQueueGenericSend+0xb8>
     eb4:	11 a2       	std	Z+33, r1	; 0x21
     eb6:	f7 01       	movw	r30, r14
     eb8:	82 a1       	ldd	r24, Z+34	; 0x22
     eba:	8f 3f       	cpi	r24, 0xFF	; 255
     ebc:	09 f4       	brne	.+2      	; 0xec0 <xQueueGenericSend+0xc2>
     ebe:	12 a2       	std	Z+34, r1	; 0x22
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	be 01       	movw	r22, r28
     ec6:	6a 5f       	subi	r22, 0xFA	; 250
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	c6 d5       	rcall	.+2956   	; 0x1a5c <xTaskCheckForTimeOut>
     ed0:	81 11       	cpse	r24, r1
     ed2:	1b c0       	rjmp	.+54     	; 0xf0a <xQueueGenericSend+0x10c>
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	0f 92       	push	r0
     eda:	f7 01       	movw	r30, r14
     edc:	96 8d       	ldd	r25, Z+30	; 0x1e
     ede:	87 8d       	ldd	r24, Z+31	; 0x1f
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	98 13       	cpse	r25, r24
     ee6:	0d c0       	rjmp	.+26     	; 0xf02 <xQueueGenericSend+0x104>
     ee8:	4e 81       	ldd	r20, Y+6	; 0x06
     eea:	5f 81       	ldd	r21, Y+7	; 0x07
     eec:	68 85       	ldd	r22, Y+8	; 0x08
     eee:	79 85       	ldd	r23, Y+9	; 0x09
     ef0:	c6 01       	movw	r24, r12
     ef2:	2a d5       	rcall	.+2644   	; 0x1948 <vTaskPlaceOnEventList>
     ef4:	c7 01       	movw	r24, r14
     ef6:	ca de       	rcall	.-620    	; 0xc8c <prvUnlockQueue>
     ef8:	20 d4       	rcall	.+2112   	; 0x173a <xTaskResumeAll>
     efa:	81 11       	cpse	r24, r1
     efc:	a0 cf       	rjmp	.-192    	; 0xe3e <xQueueGenericSend+0x40>
     efe:	7e dd       	rcall	.-1284   	; 0x9fc <vPortYield>
     f00:	9e cf       	rjmp	.-196    	; 0xe3e <xQueueGenericSend+0x40>
     f02:	c7 01       	movw	r24, r14
     f04:	c3 de       	rcall	.-634    	; 0xc8c <prvUnlockQueue>
     f06:	19 d4       	rcall	.+2098   	; 0x173a <xTaskResumeAll>
     f08:	9a cf       	rjmp	.-204    	; 0xe3e <xQueueGenericSend+0x40>
     f0a:	c7 01       	movw	r24, r14
     f0c:	bf de       	rcall	.-642    	; 0xc8c <prvUnlockQueue>
     f0e:	15 d4       	rcall	.+2090   	; 0x173a <xTaskResumeAll>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	29 96       	adiw	r28, 0x09	; 9
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	9f 90       	pop	r9
     f34:	08 95       	ret

00000f36 <xQueueGenericSendFromISR>:
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	8a 01       	movw	r16, r20
     f44:	fc 01       	movw	r30, r24
     f46:	56 8d       	ldd	r21, Z+30	; 0x1e
     f48:	37 8d       	ldd	r19, Z+31	; 0x1f
     f4a:	53 17       	cp	r21, r19
     f4c:	10 f0       	brcs	.+4      	; 0xf52 <xQueueGenericSendFromISR+0x1c>
     f4e:	22 30       	cpi	r18, 0x02	; 2
     f50:	e1 f4       	brne	.+56     	; 0xf8a <xQueueGenericSendFromISR+0x54>
     f52:	42 2f       	mov	r20, r18
     f54:	78 01       	movw	r14, r16
     f56:	ec 01       	movw	r28, r24
     f58:	1a a1       	ldd	r17, Y+34	; 0x22
     f5a:	20 de       	rcall	.-960    	; 0xb9c <prvCopyDataToQueue>
     f5c:	1f 3f       	cpi	r17, 0xFF	; 255
     f5e:	79 f4       	brne	.+30     	; 0xf7e <xQueueGenericSendFromISR+0x48>
     f60:	8b 89       	ldd	r24, Y+19	; 0x13
     f62:	88 23       	and	r24, r24
     f64:	a1 f0       	breq	.+40     	; 0xf8e <xQueueGenericSendFromISR+0x58>
     f66:	ce 01       	movw	r24, r28
     f68:	43 96       	adiw	r24, 0x13	; 19
     f6a:	25 d5       	rcall	.+2634   	; 0x19b6 <xTaskRemoveFromEventList>
     f6c:	88 23       	and	r24, r24
     f6e:	89 f0       	breq	.+34     	; 0xf92 <xQueueGenericSendFromISR+0x5c>
     f70:	e1 14       	cp	r14, r1
     f72:	f1 04       	cpc	r15, r1
     f74:	81 f0       	breq	.+32     	; 0xf96 <xQueueGenericSendFromISR+0x60>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	f7 01       	movw	r30, r14
     f7a:	80 83       	st	Z, r24
     f7c:	0d c0       	rjmp	.+26     	; 0xf98 <xQueueGenericSendFromISR+0x62>
     f7e:	ff 24       	eor	r15, r15
     f80:	f3 94       	inc	r15
     f82:	f1 0e       	add	r15, r17
     f84:	fa a2       	std	Y+34, r15	; 0x22
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <xQueueGenericSendFromISR+0x62>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <xQueueGenericSendFromISR+0x62>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <xQueueGenericSendFromISR+0x62>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <xQueueGenericSendFromISR+0x62>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	08 95       	ret

00000fa6 <xQueueReceive>:
     fa6:	9f 92       	push	r9
     fa8:	af 92       	push	r10
     faa:	bf 92       	push	r11
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	29 97       	sbiw	r28, 0x09	; 9
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	8c 01       	movw	r16, r24
     fce:	5b 01       	movw	r10, r22
     fd0:	2e 83       	std	Y+6, r18	; 0x06
     fd2:	3f 83       	std	Y+7, r19	; 0x07
     fd4:	48 87       	std	Y+8, r20	; 0x08
     fd6:	59 87       	std	Y+9, r21	; 0x09
     fd8:	e1 2c       	mov	r14, r1
     fda:	99 24       	eor	r9, r9
     fdc:	93 94       	inc	r9
     fde:	6c 01       	movw	r12, r24
     fe0:	83 e1       	ldi	r24, 0x13	; 19
     fe2:	c8 0e       	add	r12, r24
     fe4:	d1 1c       	adc	r13, r1
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	0f 92       	push	r0
     fec:	f8 01       	movw	r30, r16
     fee:	f6 8c       	ldd	r15, Z+30	; 0x1e
     ff0:	ff 20       	and	r15, r15
     ff2:	91 f0       	breq	.+36     	; 0x1018 <xQueueReceive+0x72>
     ff4:	b5 01       	movw	r22, r10
     ff6:	c8 01       	movw	r24, r16
     ff8:	2f de       	rcall	.-930    	; 0xc58 <prvCopyDataFromQueue>
     ffa:	fa 94       	dec	r15
     ffc:	f8 01       	movw	r30, r16
     ffe:	f6 8e       	std	Z+30, r15	; 0x1e
    1000:	80 85       	ldd	r24, Z+8	; 0x08
    1002:	88 23       	and	r24, r24
    1004:	29 f0       	breq	.+10     	; 0x1010 <xQueueReceive+0x6a>
    1006:	c8 01       	movw	r24, r16
    1008:	08 96       	adiw	r24, 0x08	; 8
    100a:	d5 d4       	rcall	.+2474   	; 0x19b6 <xTaskRemoveFromEventList>
    100c:	81 11       	cpse	r24, r1
    100e:	f6 dc       	rcall	.-1556   	; 0x9fc <vPortYield>
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	4a c0       	rjmp	.+148    	; 0x10ac <xQueueReceive+0x106>
    1018:	8e 81       	ldd	r24, Y+6	; 0x06
    101a:	9f 81       	ldd	r25, Y+7	; 0x07
    101c:	a8 85       	ldd	r26, Y+8	; 0x08
    101e:	b9 85       	ldd	r27, Y+9	; 0x09
    1020:	89 2b       	or	r24, r25
    1022:	8a 2b       	or	r24, r26
    1024:	8b 2b       	or	r24, r27
    1026:	21 f4       	brne	.+8      	; 0x1030 <xQueueReceive+0x8a>
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	3e c0       	rjmp	.+124    	; 0x10ac <xQueueReceive+0x106>
    1030:	e1 10       	cpse	r14, r1
    1032:	04 c0       	rjmp	.+8      	; 0x103c <xQueueReceive+0x96>
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	00 d5       	rcall	.+2560   	; 0x1a3a <vTaskInternalSetTimeOutState>
    103a:	e9 2c       	mov	r14, r9
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	96 d2       	rcall	.+1324   	; 0x156e <vTaskSuspendAll>
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	0f 92       	push	r0
    1048:	f8 01       	movw	r30, r16
    104a:	81 a1       	ldd	r24, Z+33	; 0x21
    104c:	8f 3f       	cpi	r24, 0xFF	; 255
    104e:	09 f4       	brne	.+2      	; 0x1052 <xQueueReceive+0xac>
    1050:	11 a2       	std	Z+33, r1	; 0x21
    1052:	f8 01       	movw	r30, r16
    1054:	82 a1       	ldd	r24, Z+34	; 0x22
    1056:	8f 3f       	cpi	r24, 0xFF	; 255
    1058:	09 f4       	brne	.+2      	; 0x105c <xQueueReceive+0xb6>
    105a:	12 a2       	std	Z+34, r1	; 0x22
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	be 01       	movw	r22, r28
    1062:	6a 5f       	subi	r22, 0xFA	; 250
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	f8 d4       	rcall	.+2544   	; 0x1a5c <xTaskCheckForTimeOut>
    106c:	81 11       	cpse	r24, r1
    106e:	15 c0       	rjmp	.+42     	; 0x109a <xQueueReceive+0xf4>
    1070:	c8 01       	movw	r24, r16
    1072:	89 dd       	rcall	.-1262   	; 0xb86 <prvIsQueueEmpty>
    1074:	88 23       	and	r24, r24
    1076:	69 f0       	breq	.+26     	; 0x1092 <xQueueReceive+0xec>
    1078:	4e 81       	ldd	r20, Y+6	; 0x06
    107a:	5f 81       	ldd	r21, Y+7	; 0x07
    107c:	68 85       	ldd	r22, Y+8	; 0x08
    107e:	79 85       	ldd	r23, Y+9	; 0x09
    1080:	c6 01       	movw	r24, r12
    1082:	62 d4       	rcall	.+2244   	; 0x1948 <vTaskPlaceOnEventList>
    1084:	c8 01       	movw	r24, r16
    1086:	02 de       	rcall	.-1020   	; 0xc8c <prvUnlockQueue>
    1088:	58 d3       	rcall	.+1712   	; 0x173a <xTaskResumeAll>
    108a:	81 11       	cpse	r24, r1
    108c:	ac cf       	rjmp	.-168    	; 0xfe6 <xQueueReceive+0x40>
    108e:	b6 dc       	rcall	.-1684   	; 0x9fc <vPortYield>
    1090:	aa cf       	rjmp	.-172    	; 0xfe6 <xQueueReceive+0x40>
    1092:	c8 01       	movw	r24, r16
    1094:	fb dd       	rcall	.-1034   	; 0xc8c <prvUnlockQueue>
    1096:	51 d3       	rcall	.+1698   	; 0x173a <xTaskResumeAll>
    1098:	a6 cf       	rjmp	.-180    	; 0xfe6 <xQueueReceive+0x40>
    109a:	c8 01       	movw	r24, r16
    109c:	f7 dd       	rcall	.-1042   	; 0xc8c <prvUnlockQueue>
    109e:	4d d3       	rcall	.+1690   	; 0x173a <xTaskResumeAll>
    10a0:	c8 01       	movw	r24, r16
    10a2:	71 dd       	rcall	.-1310   	; 0xb86 <prvIsQueueEmpty>
    10a4:	88 23       	and	r24, r24
    10a6:	09 f4       	brne	.+2      	; 0x10aa <xQueueReceive+0x104>
    10a8:	9e cf       	rjmp	.-196    	; 0xfe6 <xQueueReceive+0x40>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	29 96       	adiw	r28, 0x09	; 9
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	bf 90       	pop	r11
    10ca:	af 90       	pop	r10
    10cc:	9f 90       	pop	r9
    10ce:	08 95       	ret

000010d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	0f 92       	push	r0
    10dc:	89 a1       	ldd	r24, Y+33	; 0x21
    10de:	8f 3f       	cpi	r24, 0xFF	; 255
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <vQueueWaitForMessageRestricted+0x14>
    10e2:	19 a2       	std	Y+33, r1	; 0x21
    10e4:	8a a1       	ldd	r24, Y+34	; 0x22
    10e6:	8f 3f       	cpi	r24, 0xFF	; 255
    10e8:	09 f4       	brne	.+2      	; 0x10ec <vQueueWaitForMessageRestricted+0x1c>
    10ea:	1a a2       	std	Y+34, r1	; 0x22
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    10f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10f2:	81 11       	cpse	r24, r1
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    10f6:	ce 01       	movw	r24, r28
    10f8:	43 96       	adiw	r24, 0x13	; 19
    10fa:	3d d4       	rcall	.+2170   	; 0x1976 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    10fc:	ce 01       	movw	r24, r28
    10fe:	c6 dd       	rcall	.-1140   	; 0xc8c <prvUnlockQueue>
    }
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <prvResetNextTaskUnblockTime>:
    1106:	e0 91 86 12 	lds	r30, 0x1286	; 0x801286 <pxDelayedTaskList>
    110a:	f0 91 87 12 	lds	r31, 0x1287	; 0x801287 <pxDelayedTaskList+0x1>
    110e:	80 81       	ld	r24, Z
    1110:	81 11       	cpse	r24, r1
    1112:	0c c0       	rjmp	.+24     	; 0x112c <prvResetNextTaskUnblockTime+0x26>
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	9f ef       	ldi	r25, 0xFF	; 255
    1118:	dc 01       	movw	r26, r24
    111a:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <xNextTaskUnblockTime>
    111e:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <xNextTaskUnblockTime+0x1>
    1122:	a0 93 55 12 	sts	0x1255, r26	; 0x801255 <xNextTaskUnblockTime+0x2>
    1126:	b0 93 56 12 	sts	0x1256, r27	; 0x801256 <xNextTaskUnblockTime+0x3>
    112a:	08 95       	ret
    112c:	e0 91 86 12 	lds	r30, 0x1286	; 0x801286 <pxDelayedTaskList>
    1130:	f0 91 87 12 	lds	r31, 0x1287	; 0x801287 <pxDelayedTaskList+0x1>
    1134:	07 80       	ldd	r0, Z+7	; 0x07
    1136:	f0 85       	ldd	r31, Z+8	; 0x08
    1138:	e0 2d       	mov	r30, r0
    113a:	00 84       	ldd	r0, Z+8	; 0x08
    113c:	f1 85       	ldd	r31, Z+9	; 0x09
    113e:	e0 2d       	mov	r30, r0
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	a4 81       	ldd	r26, Z+4	; 0x04
    1146:	b5 81       	ldd	r27, Z+5	; 0x05
    1148:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <xNextTaskUnblockTime>
    114c:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <xNextTaskUnblockTime+0x1>
    1150:	a0 93 55 12 	sts	0x1255, r26	; 0x801255 <xNextTaskUnblockTime+0x2>
    1154:	b0 93 56 12 	sts	0x1256, r27	; 0x801256 <xNextTaskUnblockTime+0x3>
    1158:	08 95       	ret

0000115a <prvAddCurrentTaskToDelayedList>:
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	cf 93       	push	r28
    116c:	6b 01       	movw	r12, r22
    116e:	7c 01       	movw	r14, r24
    1170:	c4 2f       	mov	r28, r20
    1172:	80 90 5d 12 	lds	r8, 0x125D	; 0x80125d <xTickCount>
    1176:	90 90 5e 12 	lds	r9, 0x125E	; 0x80125e <xTickCount+0x1>
    117a:	a0 90 5f 12 	lds	r10, 0x125F	; 0x80125f <xTickCount+0x2>
    117e:	b0 90 60 12 	lds	r11, 0x1260	; 0x801260 <xTickCount+0x3>
    1182:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1186:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    118a:	02 96       	adiw	r24, 0x02	; 2
    118c:	62 db       	rcall	.-2364   	; 0x852 <uxListRemove>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	c8 16       	cp	r12, r24
    1192:	d8 06       	cpc	r13, r24
    1194:	e8 06       	cpc	r14, r24
    1196:	f8 06       	cpc	r15, r24
    1198:	61 f4       	brne	.+24     	; 0x11b2 <prvAddCurrentTaskToDelayedList+0x58>
    119a:	cc 23       	and	r28, r28
    119c:	51 f0       	breq	.+20     	; 0x11b2 <prvAddCurrentTaskToDelayedList+0x58>
    119e:	60 91 ca 12 	lds	r22, 0x12CA	; 0x8012ca <pxCurrentTCB>
    11a2:	70 91 cb 12 	lds	r23, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    11a6:	6e 5f       	subi	r22, 0xFE	; 254
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	82 e6       	ldi	r24, 0x62	; 98
    11ac:	92 e1       	ldi	r25, 0x12	; 18
    11ae:	f3 da       	rcall	.-2586   	; 0x796 <vListInsertEnd>
    11b0:	3d c0       	rjmp	.+122    	; 0x122c <prvAddCurrentTaskToDelayedList+0xd2>
    11b2:	c8 0c       	add	r12, r8
    11b4:	d9 1c       	adc	r13, r9
    11b6:	ea 1c       	adc	r14, r10
    11b8:	fb 1c       	adc	r15, r11
    11ba:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    11be:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    11c2:	c2 82       	std	Z+2, r12	; 0x02
    11c4:	d3 82       	std	Z+3, r13	; 0x03
    11c6:	e4 82       	std	Z+4, r14	; 0x04
    11c8:	f5 82       	std	Z+5, r15	; 0x05
    11ca:	c8 14       	cp	r12, r8
    11cc:	d9 04       	cpc	r13, r9
    11ce:	ea 04       	cpc	r14, r10
    11d0:	fb 04       	cpc	r15, r11
    11d2:	60 f4       	brcc	.+24     	; 0x11ec <prvAddCurrentTaskToDelayedList+0x92>
    11d4:	60 91 ca 12 	lds	r22, 0x12CA	; 0x8012ca <pxCurrentTCB>
    11d8:	70 91 cb 12 	lds	r23, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    11dc:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <pxOverflowDelayedTaskList>
    11e0:	90 91 85 12 	lds	r25, 0x1285	; 0x801285 <pxOverflowDelayedTaskList+0x1>
    11e4:	6e 5f       	subi	r22, 0xFE	; 254
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	f7 da       	rcall	.-2578   	; 0x7d8 <vListInsert>
    11ea:	20 c0       	rjmp	.+64     	; 0x122c <prvAddCurrentTaskToDelayedList+0xd2>
    11ec:	60 91 ca 12 	lds	r22, 0x12CA	; 0x8012ca <pxCurrentTCB>
    11f0:	70 91 cb 12 	lds	r23, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    11f4:	80 91 86 12 	lds	r24, 0x1286	; 0x801286 <pxDelayedTaskList>
    11f8:	90 91 87 12 	lds	r25, 0x1287	; 0x801287 <pxDelayedTaskList+0x1>
    11fc:	6e 5f       	subi	r22, 0xFE	; 254
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	eb da       	rcall	.-2602   	; 0x7d8 <vListInsert>
    1202:	80 91 53 12 	lds	r24, 0x1253	; 0x801253 <xNextTaskUnblockTime>
    1206:	90 91 54 12 	lds	r25, 0x1254	; 0x801254 <xNextTaskUnblockTime+0x1>
    120a:	a0 91 55 12 	lds	r26, 0x1255	; 0x801255 <xNextTaskUnblockTime+0x2>
    120e:	b0 91 56 12 	lds	r27, 0x1256	; 0x801256 <xNextTaskUnblockTime+0x3>
    1212:	c8 16       	cp	r12, r24
    1214:	d9 06       	cpc	r13, r25
    1216:	ea 06       	cpc	r14, r26
    1218:	fb 06       	cpc	r15, r27
    121a:	40 f4       	brcc	.+16     	; 0x122c <prvAddCurrentTaskToDelayedList+0xd2>
    121c:	c0 92 53 12 	sts	0x1253, r12	; 0x801253 <xNextTaskUnblockTime>
    1220:	d0 92 54 12 	sts	0x1254, r13	; 0x801254 <xNextTaskUnblockTime+0x1>
    1224:	e0 92 55 12 	sts	0x1255, r14	; 0x801255 <xNextTaskUnblockTime+0x2>
    1228:	f0 92 56 12 	sts	0x1256, r15	; 0x801256 <xNextTaskUnblockTime+0x3>
    122c:	cf 91       	pop	r28
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	bf 90       	pop	r11
    1238:	af 90       	pop	r10
    123a:	9f 90       	pop	r9
    123c:	8f 90       	pop	r8
    123e:	08 95       	ret

00001240 <xTaskCreate>:
    1240:	4f 92       	push	r4
    1242:	5f 92       	push	r5
    1244:	6f 92       	push	r6
    1246:	7f 92       	push	r7
    1248:	8f 92       	push	r8
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	4c 01       	movw	r8, r24
    1260:	6b 01       	movw	r12, r22
    1262:	5a 01       	movw	r10, r20
    1264:	29 01       	movw	r4, r18
    1266:	ca 01       	movw	r24, r20
    1268:	9a d9       	rcall	.-3276   	; 0x59e <pvPortMalloc>
    126a:	3c 01       	movw	r6, r24
    126c:	89 2b       	or	r24, r25
    126e:	09 f4       	brne	.+2      	; 0x1272 <xTaskCreate+0x32>
    1270:	e4 c0       	rjmp	.+456    	; 0x143a <xTaskCreate+0x1fa>
    1272:	80 e3       	ldi	r24, 0x30	; 48
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	93 d9       	rcall	.-3290   	; 0x59e <pvPortMalloc>
    1278:	ec 01       	movw	r28, r24
    127a:	89 2b       	or	r24, r25
    127c:	99 f0       	breq	.+38     	; 0x12a4 <xTaskCreate+0x64>
    127e:	7c 8e       	std	Y+28, r7	; 0x1c
    1280:	6b 8e       	std	Y+27, r6	; 0x1b
    1282:	a5 01       	movw	r20, r10
    1284:	65 ea       	ldi	r22, 0xA5	; 165
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	c3 01       	movw	r24, r6
    128a:	0e 94 56 16 	call	0x2cac	; 0x2cac <memset>
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	a2 1a       	sub	r10, r18
    1292:	b1 08       	sbc	r11, r1
    1294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1298:	a8 0e       	add	r10, r24
    129a:	b9 1e       	adc	r11, r25
    129c:	c1 14       	cp	r12, r1
    129e:	d1 04       	cpc	r13, r1
    12a0:	21 f4       	brne	.+8      	; 0x12aa <xTaskCreate+0x6a>
    12a2:	1f c0       	rjmp	.+62     	; 0x12e2 <xTaskCreate+0xa2>
    12a4:	c3 01       	movw	r24, r6
    12a6:	33 da       	rcall	.-2970   	; 0x70e <vPortFree>
    12a8:	c8 c0       	rjmp	.+400    	; 0x143a <xTaskCreate+0x1fa>
    12aa:	d6 01       	movw	r26, r12
    12ac:	8c 91       	ld	r24, X
    12ae:	8d 8f       	std	Y+29, r24	; 0x1d
    12b0:	8c 91       	ld	r24, X
    12b2:	88 23       	and	r24, r24
    12b4:	a1 f0       	breq	.+40     	; 0x12de <xTaskCreate+0x9e>
    12b6:	ae 01       	movw	r20, r28
    12b8:	42 5e       	subi	r20, 0xE2	; 226
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	f6 01       	movw	r30, r12
    12be:	31 96       	adiw	r30, 0x01	; 1
    12c0:	b8 e0       	ldi	r27, 0x08	; 8
    12c2:	cb 0e       	add	r12, r27
    12c4:	d1 1c       	adc	r13, r1
    12c6:	cf 01       	movw	r24, r30
    12c8:	21 91       	ld	r18, Z+
    12ca:	da 01       	movw	r26, r20
    12cc:	2d 93       	st	X+, r18
    12ce:	ad 01       	movw	r20, r26
    12d0:	dc 01       	movw	r26, r24
    12d2:	8c 91       	ld	r24, X
    12d4:	88 23       	and	r24, r24
    12d6:	19 f0       	breq	.+6      	; 0x12de <xTaskCreate+0x9e>
    12d8:	ec 15       	cp	r30, r12
    12da:	fd 05       	cpc	r31, r13
    12dc:	a1 f7       	brne	.-24     	; 0x12c6 <xTaskCreate+0x86>
    12de:	1c a2       	std	Y+36, r1	; 0x24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <xTaskCreate+0xa4>
    12e2:	1d 8e       	std	Y+29, r1	; 0x1d
    12e4:	04 30       	cpi	r16, 0x04	; 4
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <xTaskCreate+0xaa>
    12e8:	03 e0       	ldi	r16, 0x03	; 3
    12ea:	0a 8f       	std	Y+26, r16	; 0x1a
    12ec:	0f a3       	std	Y+39, r16	; 0x27
    12ee:	18 a6       	std	Y+40, r1	; 0x28
    12f0:	6e 01       	movw	r12, r28
    12f2:	b2 e0       	ldi	r27, 0x02	; 2
    12f4:	cb 0e       	add	r12, r27
    12f6:	d1 1c       	adc	r13, r1
    12f8:	c6 01       	movw	r24, r12
    12fa:	49 da       	rcall	.-2926   	; 0x78e <vListInitialiseItem>
    12fc:	ce 01       	movw	r24, r28
    12fe:	0e 96       	adiw	r24, 0x0e	; 14
    1300:	46 da       	rcall	.-2932   	; 0x78e <vListInitialiseItem>
    1302:	db 87       	std	Y+11, r29	; 0x0b
    1304:	ca 87       	std	Y+10, r28	; 0x0a
    1306:	84 e0       	ldi	r24, 0x04	; 4
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	80 1b       	sub	r24, r16
    1310:	91 09       	sbc	r25, r1
    1312:	a1 09       	sbc	r26, r1
    1314:	b1 09       	sbc	r27, r1
    1316:	8e 87       	std	Y+14, r24	; 0x0e
    1318:	9f 87       	std	Y+15, r25	; 0x0f
    131a:	a8 8b       	std	Y+16, r26	; 0x10
    131c:	b9 8b       	std	Y+17, r27	; 0x11
    131e:	df 8b       	std	Y+23, r29	; 0x17
    1320:	ce 8b       	std	Y+22, r28	; 0x16
    1322:	1a a6       	std	Y+42, r1	; 0x2a
    1324:	19 a6       	std	Y+41, r1	; 0x29
    1326:	1b a6       	std	Y+43, r1	; 0x2b
    1328:	1c a6       	std	Y+44, r1	; 0x2c
    132a:	1d a6       	std	Y+45, r1	; 0x2d
    132c:	1e a6       	std	Y+46, r1	; 0x2e
    132e:	1f a6       	std	Y+47, r1	; 0x2f
    1330:	a2 01       	movw	r20, r4
    1332:	b4 01       	movw	r22, r8
    1334:	c5 01       	movw	r24, r10
    1336:	b4 da       	rcall	.-2712   	; 0x8a0 <pxPortInitialiseStack>
    1338:	99 83       	std	Y+1, r25	; 0x01
    133a:	88 83       	st	Y, r24
    133c:	e1 14       	cp	r14, r1
    133e:	f1 04       	cpc	r15, r1
    1340:	19 f0       	breq	.+6      	; 0x1348 <xTaskCreate+0x108>
    1342:	f7 01       	movw	r30, r14
    1344:	d1 83       	std	Z+1, r29	; 0x01
    1346:	c0 83       	st	Z, r28
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	0f 92       	push	r0
    134e:	80 91 61 12 	lds	r24, 0x1261	; 0x801261 <uxCurrentNumberOfTasks>
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 61 12 	sts	0x1261, r24	; 0x801261 <uxCurrentNumberOfTasks>
    1358:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <pxCurrentTCB>
    135c:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1360:	89 2b       	or	r24, r25
    1362:	89 f5       	brne	.+98     	; 0x13c6 <xTaskCreate+0x186>
    1364:	d0 93 cb 12 	sts	0x12CB, r29	; 0x8012cb <pxCurrentTCB+0x1>
    1368:	c0 93 ca 12 	sts	0x12CA, r28	; 0x8012ca <pxCurrentTCB>
    136c:	80 91 61 12 	lds	r24, 0x1261	; 0x801261 <uxCurrentNumberOfTasks>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	09 f0       	breq	.+2      	; 0x1376 <xTaskCreate+0x136>
    1374:	38 c0       	rjmp	.+112    	; 0x13e6 <xTaskCreate+0x1a6>
    1376:	8e e9       	ldi	r24, 0x9E	; 158
    1378:	92 e1       	ldi	r25, 0x12	; 18
    137a:	f8 d9       	rcall	.-3088   	; 0x76c <vListInitialise>
    137c:	89 ea       	ldi	r24, 0xA9	; 169
    137e:	92 e1       	ldi	r25, 0x12	; 18
    1380:	f5 d9       	rcall	.-3094   	; 0x76c <vListInitialise>
    1382:	84 eb       	ldi	r24, 0xB4	; 180
    1384:	92 e1       	ldi	r25, 0x12	; 18
    1386:	f2 d9       	rcall	.-3100   	; 0x76c <vListInitialise>
    1388:	8f eb       	ldi	r24, 0xBF	; 191
    138a:	92 e1       	ldi	r25, 0x12	; 18
    138c:	ef d9       	rcall	.-3106   	; 0x76c <vListInitialise>
    138e:	83 e9       	ldi	r24, 0x93	; 147
    1390:	92 e1       	ldi	r25, 0x12	; 18
    1392:	ec d9       	rcall	.-3112   	; 0x76c <vListInitialise>
    1394:	88 e8       	ldi	r24, 0x88	; 136
    1396:	92 e1       	ldi	r25, 0x12	; 18
    1398:	e9 d9       	rcall	.-3118   	; 0x76c <vListInitialise>
    139a:	89 e7       	ldi	r24, 0x79	; 121
    139c:	92 e1       	ldi	r25, 0x12	; 18
    139e:	e6 d9       	rcall	.-3124   	; 0x76c <vListInitialise>
    13a0:	8e e6       	ldi	r24, 0x6E	; 110
    13a2:	92 e1       	ldi	r25, 0x12	; 18
    13a4:	e3 d9       	rcall	.-3130   	; 0x76c <vListInitialise>
    13a6:	82 e6       	ldi	r24, 0x62	; 98
    13a8:	92 e1       	ldi	r25, 0x12	; 18
    13aa:	e0 d9       	rcall	.-3136   	; 0x76c <vListInitialise>
    13ac:	83 e9       	ldi	r24, 0x93	; 147
    13ae:	92 e1       	ldi	r25, 0x12	; 18
    13b0:	90 93 87 12 	sts	0x1287, r25	; 0x801287 <pxDelayedTaskList+0x1>
    13b4:	80 93 86 12 	sts	0x1286, r24	; 0x801286 <pxDelayedTaskList>
    13b8:	88 e8       	ldi	r24, 0x88	; 136
    13ba:	92 e1       	ldi	r25, 0x12	; 18
    13bc:	90 93 85 12 	sts	0x1285, r25	; 0x801285 <pxOverflowDelayedTaskList+0x1>
    13c0:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <pxOverflowDelayedTaskList>
    13c4:	10 c0       	rjmp	.+32     	; 0x13e6 <xTaskCreate+0x1a6>
    13c6:	80 91 5b 12 	lds	r24, 0x125B	; 0x80125b <xSchedulerRunning>
    13ca:	81 11       	cpse	r24, r1
    13cc:	0c c0       	rjmp	.+24     	; 0x13e6 <xTaskCreate+0x1a6>
    13ce:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    13d2:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    13d6:	92 8d       	ldd	r25, Z+26	; 0x1a
    13d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13da:	89 17       	cp	r24, r25
    13dc:	20 f0       	brcs	.+8      	; 0x13e6 <xTaskCreate+0x1a6>
    13de:	d0 93 cb 12 	sts	0x12CB, r29	; 0x8012cb <pxCurrentTCB+0x1>
    13e2:	c0 93 ca 12 	sts	0x12CA, r28	; 0x8012ca <pxCurrentTCB>
    13e6:	80 91 57 12 	lds	r24, 0x1257	; 0x801257 <uxTaskNumber>
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <uxTaskNumber>
    13f0:	8d a3       	std	Y+37, r24	; 0x25
    13f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13f4:	90 91 5c 12 	lds	r25, 0x125C	; 0x80125c <uxTopReadyPriority>
    13f8:	98 17       	cp	r25, r24
    13fa:	10 f4       	brcc	.+4      	; 0x1400 <xTaskCreate+0x1c0>
    13fc:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <uxTopReadyPriority>
    1400:	fb e0       	ldi	r31, 0x0B	; 11
    1402:	8f 9f       	mul	r24, r31
    1404:	c0 01       	movw	r24, r0
    1406:	11 24       	eor	r1, r1
    1408:	b6 01       	movw	r22, r12
    140a:	82 56       	subi	r24, 0x62	; 98
    140c:	9d 4e       	sbci	r25, 0xED	; 237
    140e:	c3 d9       	rcall	.-3194   	; 0x796 <vListInsertEnd>
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	80 91 5b 12 	lds	r24, 0x125B	; 0x80125b <xSchedulerRunning>
    1418:	88 23       	and	r24, r24
    141a:	59 f0       	breq	.+22     	; 0x1432 <xTaskCreate+0x1f2>
    141c:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1420:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1424:	92 8d       	ldd	r25, Z+26	; 0x1a
    1426:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1428:	98 17       	cp	r25, r24
    142a:	28 f4       	brcc	.+10     	; 0x1436 <xTaskCreate+0x1f6>
    142c:	e7 da       	rcall	.-2610   	; 0x9fc <vPortYield>
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	05 c0       	rjmp	.+10     	; 0x143c <xTaskCreate+0x1fc>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	03 c0       	rjmp	.+6      	; 0x143c <xTaskCreate+0x1fc>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	01 c0       	rjmp	.+2      	; 0x143c <xTaskCreate+0x1fc>
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	7f 90       	pop	r7
    1454:	6f 90       	pop	r6
    1456:	5f 90       	pop	r5
    1458:	4f 90       	pop	r4
    145a:	08 95       	ret

0000145c <vTaskDelete>:
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	ec 01       	movw	r28, r24
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	0f 92       	push	r0
    146c:	89 2b       	or	r24, r25
    146e:	21 f4       	brne	.+8      	; 0x1478 <vTaskDelete+0x1c>
    1470:	c0 91 ca 12 	lds	r28, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1474:	d0 91 cb 12 	lds	r29, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1478:	8e 01       	movw	r16, r28
    147a:	0e 5f       	subi	r16, 0xFE	; 254
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
    147e:	c8 01       	movw	r24, r16
    1480:	e8 d9       	rcall	.-3120   	; 0x852 <uxListRemove>
    1482:	88 8d       	ldd	r24, Y+24	; 0x18
    1484:	99 8d       	ldd	r25, Y+25	; 0x19
    1486:	89 2b       	or	r24, r25
    1488:	19 f0       	breq	.+6      	; 0x1490 <vTaskDelete+0x34>
    148a:	ce 01       	movw	r24, r28
    148c:	0e 96       	adiw	r24, 0x0e	; 14
    148e:	e1 d9       	rcall	.-3134   	; 0x852 <uxListRemove>
    1490:	80 91 57 12 	lds	r24, 0x1257	; 0x801257 <uxTaskNumber>
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <uxTaskNumber>
    149a:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <pxCurrentTCB>
    149e:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    14a2:	c8 17       	cp	r28, r24
    14a4:	d9 07       	cpc	r29, r25
    14a6:	51 f4       	brne	.+20     	; 0x14bc <vTaskDelete+0x60>
    14a8:	b8 01       	movw	r22, r16
    14aa:	8e e6       	ldi	r24, 0x6E	; 110
    14ac:	92 e1       	ldi	r25, 0x12	; 18
    14ae:	73 d9       	rcall	.-3354   	; 0x796 <vListInsertEnd>
    14b0:	80 91 6d 12 	lds	r24, 0x126D	; 0x80126d <uxDeletedTasksWaitingCleanUp>
    14b4:	8f 5f       	subi	r24, 0xFF	; 255
    14b6:	80 93 6d 12 	sts	0x126D, r24	; 0x80126d <uxDeletedTasksWaitingCleanUp>
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <vTaskDelete+0x76>
    14bc:	80 91 61 12 	lds	r24, 0x1261	; 0x801261 <uxCurrentNumberOfTasks>
    14c0:	81 50       	subi	r24, 0x01	; 1
    14c2:	80 93 61 12 	sts	0x1261, r24	; 0x801261 <uxCurrentNumberOfTasks>
    14c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ca:	21 d9       	rcall	.-3518   	; 0x70e <vPortFree>
    14cc:	ce 01       	movw	r24, r28
    14ce:	1f d9       	rcall	.-3522   	; 0x70e <vPortFree>
    14d0:	1a de       	rcall	.-972    	; 0x1106 <prvResetNextTaskUnblockTime>
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	80 91 5b 12 	lds	r24, 0x125B	; 0x80125b <xSchedulerRunning>
    14da:	88 23       	and	r24, r24
    14dc:	41 f0       	breq	.+16     	; 0x14ee <vTaskDelete+0x92>
    14de:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <pxCurrentTCB>
    14e2:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    14e6:	c8 17       	cp	r28, r24
    14e8:	d9 07       	cpc	r29, r25
    14ea:	09 f4       	brne	.+2      	; 0x14ee <vTaskDelete+0x92>
    14ec:	87 da       	rcall	.-2802   	; 0x9fc <vPortYield>
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <vTaskStartScheduler>:
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	0f 2e       	mov	r0, r31
    1500:	f1 e5       	ldi	r31, 0x51	; 81
    1502:	ef 2e       	mov	r14, r31
    1504:	f2 e1       	ldi	r31, 0x12	; 18
    1506:	ff 2e       	mov	r15, r31
    1508:	f0 2d       	mov	r31, r0
    150a:	00 e0       	ldi	r16, 0x00	; 0
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 ec       	ldi	r20, 0xC0	; 192
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	6b e0       	ldi	r22, 0x0B	; 11
    1516:	72 e0       	ldi	r23, 0x02	; 2
    1518:	8d ec       	ldi	r24, 0xCD	; 205
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	91 de       	rcall	.-734    	; 0x1240 <xTaskCreate>
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	11 f5       	brne	.+68     	; 0x1566 <vTaskStartScheduler+0x6e>
    1522:	b4 d3       	rcall	.+1896   	; 0x1c8c <xTimerCreateTimerTask>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	f9 f4       	brne	.+62     	; 0x1566 <vTaskStartScheduler+0x6e>
    1528:	f8 94       	cli
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	dc 01       	movw	r26, r24
    1530:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <xNextTaskUnblockTime>
    1534:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <xNextTaskUnblockTime+0x1>
    1538:	a0 93 55 12 	sts	0x1255, r26	; 0x801255 <xNextTaskUnblockTime+0x2>
    153c:	b0 93 56 12 	sts	0x1256, r27	; 0x801256 <xNextTaskUnblockTime+0x3>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	80 93 5b 12 	sts	0x125B, r24	; 0x80125b <xSchedulerRunning>
    1546:	10 92 5d 12 	sts	0x125D, r1	; 0x80125d <xTickCount>
    154a:	10 92 5e 12 	sts	0x125E, r1	; 0x80125e <xTickCount+0x1>
    154e:	10 92 5f 12 	sts	0x125F, r1	; 0x80125f <xTickCount+0x2>
    1552:	10 92 60 12 	sts	0x1260, r1	; 0x801260 <xTickCount+0x3>
    1556:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    155a:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    155e:	81 a5       	ldd	r24, Z+41	; 0x29
    1560:	0e 94 72 02 	call	0x4e4	; 0x4e4 <task_switch_in>
    1564:	0f da       	rcall	.-3042   	; 0x984 <xPortStartScheduler>
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	08 95       	ret

0000156e <vTaskSuspendAll>:
    156e:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <uxSchedulerSuspended>
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	80 93 50 12 	sts	0x1250, r24	; 0x801250 <uxSchedulerSuspended>
    1578:	08 95       	ret

0000157a <xTaskGetTickCount>:
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	0f 92       	push	r0
    1580:	60 91 5d 12 	lds	r22, 0x125D	; 0x80125d <xTickCount>
    1584:	70 91 5e 12 	lds	r23, 0x125E	; 0x80125e <xTickCount+0x1>
    1588:	80 91 5f 12 	lds	r24, 0x125F	; 0x80125f <xTickCount+0x2>
    158c:	90 91 60 12 	lds	r25, 0x1260	; 0x801260 <xTickCount+0x3>
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	08 95       	ret

00001596 <xTaskIncrementTick>:
    1596:	9f 92       	push	r9
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	cf 92       	push	r12
    159e:	df 92       	push	r13
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <uxSchedulerSuspended>
    15b0:	81 11       	cpse	r24, r1
    15b2:	aa c0       	rjmp	.+340    	; 0x1708 <xTaskIncrementTick+0x172>
    15b4:	c0 90 5d 12 	lds	r12, 0x125D	; 0x80125d <xTickCount>
    15b8:	d0 90 5e 12 	lds	r13, 0x125E	; 0x80125e <xTickCount+0x1>
    15bc:	e0 90 5f 12 	lds	r14, 0x125F	; 0x80125f <xTickCount+0x2>
    15c0:	f0 90 60 12 	lds	r15, 0x1260	; 0x801260 <xTickCount+0x3>
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	c8 1a       	sub	r12, r24
    15c8:	d8 0a       	sbc	r13, r24
    15ca:	e8 0a       	sbc	r14, r24
    15cc:	f8 0a       	sbc	r15, r24
    15ce:	c0 92 5d 12 	sts	0x125D, r12	; 0x80125d <xTickCount>
    15d2:	d0 92 5e 12 	sts	0x125E, r13	; 0x80125e <xTickCount+0x1>
    15d6:	e0 92 5f 12 	sts	0x125F, r14	; 0x80125f <xTickCount+0x2>
    15da:	f0 92 60 12 	sts	0x1260, r15	; 0x801260 <xTickCount+0x3>
    15de:	c1 14       	cp	r12, r1
    15e0:	d1 04       	cpc	r13, r1
    15e2:	e1 04       	cpc	r14, r1
    15e4:	f1 04       	cpc	r15, r1
    15e6:	b1 f4       	brne	.+44     	; 0x1614 <xTaskIncrementTick+0x7e>
    15e8:	80 91 86 12 	lds	r24, 0x1286	; 0x801286 <pxDelayedTaskList>
    15ec:	90 91 87 12 	lds	r25, 0x1287	; 0x801287 <pxDelayedTaskList+0x1>
    15f0:	20 91 84 12 	lds	r18, 0x1284	; 0x801284 <pxOverflowDelayedTaskList>
    15f4:	30 91 85 12 	lds	r19, 0x1285	; 0x801285 <pxOverflowDelayedTaskList+0x1>
    15f8:	30 93 87 12 	sts	0x1287, r19	; 0x801287 <pxDelayedTaskList+0x1>
    15fc:	20 93 86 12 	sts	0x1286, r18	; 0x801286 <pxDelayedTaskList>
    1600:	90 93 85 12 	sts	0x1285, r25	; 0x801285 <pxOverflowDelayedTaskList+0x1>
    1604:	80 93 84 12 	sts	0x1284, r24	; 0x801284 <pxOverflowDelayedTaskList>
    1608:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <xNumOfOverflows>
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <xNumOfOverflows>
    1612:	79 dd       	rcall	.-1294   	; 0x1106 <prvResetNextTaskUnblockTime>
    1614:	80 91 53 12 	lds	r24, 0x1253	; 0x801253 <xNextTaskUnblockTime>
    1618:	90 91 54 12 	lds	r25, 0x1254	; 0x801254 <xNextTaskUnblockTime+0x1>
    161c:	a0 91 55 12 	lds	r26, 0x1255	; 0x801255 <xNextTaskUnblockTime+0x2>
    1620:	b0 91 56 12 	lds	r27, 0x1256	; 0x801256 <xNextTaskUnblockTime+0x3>
    1624:	c8 16       	cp	r12, r24
    1626:	d9 06       	cpc	r13, r25
    1628:	ea 06       	cpc	r14, r26
    162a:	fb 06       	cpc	r15, r27
    162c:	10 f4       	brcc	.+4      	; 0x1632 <xTaskIncrementTick+0x9c>
    162e:	b1 2c       	mov	r11, r1
    1630:	5a c0       	rjmp	.+180    	; 0x16e6 <xTaskIncrementTick+0x150>
    1632:	b1 2c       	mov	r11, r1
    1634:	0f 2e       	mov	r0, r31
    1636:	fb e0       	ldi	r31, 0x0B	; 11
    1638:	af 2e       	mov	r10, r31
    163a:	f0 2d       	mov	r31, r0
    163c:	99 24       	eor	r9, r9
    163e:	93 94       	inc	r9
    1640:	e0 91 86 12 	lds	r30, 0x1286	; 0x801286 <pxDelayedTaskList>
    1644:	f0 91 87 12 	lds	r31, 0x1287	; 0x801287 <pxDelayedTaskList+0x1>
    1648:	80 81       	ld	r24, Z
    164a:	81 11       	cpse	r24, r1
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <xTaskIncrementTick+0xd0>
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	9f ef       	ldi	r25, 0xFF	; 255
    1652:	dc 01       	movw	r26, r24
    1654:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <xNextTaskUnblockTime>
    1658:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <xNextTaskUnblockTime+0x1>
    165c:	a0 93 55 12 	sts	0x1255, r26	; 0x801255 <xNextTaskUnblockTime+0x2>
    1660:	b0 93 56 12 	sts	0x1256, r27	; 0x801256 <xNextTaskUnblockTime+0x3>
    1664:	40 c0       	rjmp	.+128    	; 0x16e6 <xTaskIncrementTick+0x150>
    1666:	e0 91 86 12 	lds	r30, 0x1286	; 0x801286 <pxDelayedTaskList>
    166a:	f0 91 87 12 	lds	r31, 0x1287	; 0x801287 <pxDelayedTaskList+0x1>
    166e:	07 80       	ldd	r0, Z+7	; 0x07
    1670:	f0 85       	ldd	r31, Z+8	; 0x08
    1672:	e0 2d       	mov	r30, r0
    1674:	c0 85       	ldd	r28, Z+8	; 0x08
    1676:	d1 85       	ldd	r29, Z+9	; 0x09
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	ac 81       	ldd	r26, Y+4	; 0x04
    167e:	bd 81       	ldd	r27, Y+5	; 0x05
    1680:	c8 16       	cp	r12, r24
    1682:	d9 06       	cpc	r13, r25
    1684:	ea 06       	cpc	r14, r26
    1686:	fb 06       	cpc	r15, r27
    1688:	48 f4       	brcc	.+18     	; 0x169c <xTaskIncrementTick+0x106>
    168a:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <xNextTaskUnblockTime>
    168e:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <xNextTaskUnblockTime+0x1>
    1692:	a0 93 55 12 	sts	0x1255, r26	; 0x801255 <xNextTaskUnblockTime+0x2>
    1696:	b0 93 56 12 	sts	0x1256, r27	; 0x801256 <xNextTaskUnblockTime+0x3>
    169a:	25 c0       	rjmp	.+74     	; 0x16e6 <xTaskIncrementTick+0x150>
    169c:	8e 01       	movw	r16, r28
    169e:	0e 5f       	subi	r16, 0xFE	; 254
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	c8 01       	movw	r24, r16
    16a4:	d6 d8       	rcall	.-3668   	; 0x852 <uxListRemove>
    16a6:	88 8d       	ldd	r24, Y+24	; 0x18
    16a8:	99 8d       	ldd	r25, Y+25	; 0x19
    16aa:	89 2b       	or	r24, r25
    16ac:	19 f0       	breq	.+6      	; 0x16b4 <xTaskIncrementTick+0x11e>
    16ae:	ce 01       	movw	r24, r28
    16b0:	0e 96       	adiw	r24, 0x0e	; 14
    16b2:	cf d8       	rcall	.-3682   	; 0x852 <uxListRemove>
    16b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16b6:	90 91 5c 12 	lds	r25, 0x125C	; 0x80125c <uxTopReadyPriority>
    16ba:	98 17       	cp	r25, r24
    16bc:	10 f4       	brcc	.+4      	; 0x16c2 <xTaskIncrementTick+0x12c>
    16be:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <uxTopReadyPriority>
    16c2:	a8 9e       	mul	r10, r24
    16c4:	c0 01       	movw	r24, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	b8 01       	movw	r22, r16
    16ca:	82 56       	subi	r24, 0x62	; 98
    16cc:	9d 4e       	sbci	r25, 0xED	; 237
    16ce:	63 d8       	rcall	.-3898   	; 0x796 <vListInsertEnd>
    16d0:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    16d4:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    16d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16da:	82 8d       	ldd	r24, Z+26	; 0x1a
    16dc:	98 17       	cp	r25, r24
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <xTaskIncrementTick+0x14c>
    16e0:	af cf       	rjmp	.-162    	; 0x1640 <xTaskIncrementTick+0xaa>
    16e2:	b9 2c       	mov	r11, r9
    16e4:	ad cf       	rjmp	.-166    	; 0x1640 <xTaskIncrementTick+0xaa>
    16e6:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    16ea:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    16ee:	e2 8d       	ldd	r30, Z+26	; 0x1a
    16f0:	8b e0       	ldi	r24, 0x0B	; 11
    16f2:	e8 9f       	mul	r30, r24
    16f4:	f0 01       	movw	r30, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	e2 56       	subi	r30, 0x62	; 98
    16fa:	fd 4e       	sbci	r31, 0xED	; 237
    16fc:	80 81       	ld	r24, Z
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	48 f0       	brcs	.+18     	; 0x1714 <xTaskIncrementTick+0x17e>
    1702:	bb 24       	eor	r11, r11
    1704:	b3 94       	inc	r11
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <xTaskIncrementTick+0x17e>
    1708:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <uxPendedTicks>
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <uxPendedTicks>
    1712:	b1 2c       	mov	r11, r1
    1714:	80 91 59 12 	lds	r24, 0x1259	; 0x801259 <xYieldPending>
    1718:	88 23       	and	r24, r24
    171a:	11 f0       	breq	.+4      	; 0x1720 <xTaskIncrementTick+0x18a>
    171c:	bb 24       	eor	r11, r11
    171e:	b3 94       	inc	r11
    1720:	8b 2d       	mov	r24, r11
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	08 95       	ret

0000173a <xTaskResumeAll>:
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	0f 92       	push	r0
    1750:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <uxSchedulerSuspended>
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	80 93 50 12 	sts	0x1250, r24	; 0x801250 <uxSchedulerSuspended>
    175a:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <uxSchedulerSuspended>
    175e:	81 11       	cpse	r24, r1
    1760:	57 c0       	rjmp	.+174    	; 0x1810 <xTaskResumeAll+0xd6>
    1762:	80 91 61 12 	lds	r24, 0x1261	; 0x801261 <uxCurrentNumberOfTasks>
    1766:	81 11       	cpse	r24, r1
    1768:	2a c0       	rjmp	.+84     	; 0x17be <xTaskResumeAll+0x84>
    176a:	55 c0       	rjmp	.+170    	; 0x1816 <xTaskResumeAll+0xdc>
    176c:	d7 01       	movw	r26, r14
    176e:	17 96       	adiw	r26, 0x07	; 7
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	18 97       	sbiw	r26, 0x08	; 8
    1776:	c0 85       	ldd	r28, Z+8	; 0x08
    1778:	d1 85       	ldd	r29, Z+9	; 0x09
    177a:	ce 01       	movw	r24, r28
    177c:	0e 96       	adiw	r24, 0x0e	; 14
    177e:	69 d8       	rcall	.-3886   	; 0x852 <uxListRemove>
    1780:	8e 01       	movw	r16, r28
    1782:	0e 5f       	subi	r16, 0xFE	; 254
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	c8 01       	movw	r24, r16
    1788:	64 d8       	rcall	.-3896   	; 0x852 <uxListRemove>
    178a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    178c:	90 91 5c 12 	lds	r25, 0x125C	; 0x80125c <uxTopReadyPriority>
    1790:	98 17       	cp	r25, r24
    1792:	10 f4       	brcc	.+4      	; 0x1798 <xTaskResumeAll+0x5e>
    1794:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <uxTopReadyPriority>
    1798:	d8 9e       	mul	r13, r24
    179a:	c0 01       	movw	r24, r0
    179c:	11 24       	eor	r1, r1
    179e:	b8 01       	movw	r22, r16
    17a0:	82 56       	subi	r24, 0x62	; 98
    17a2:	9d 4e       	sbci	r25, 0xED	; 237
    17a4:	0e 94 cb 03 	call	0x796	; 0x796 <vListInsertEnd>
    17a8:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    17ac:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    17b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    17b4:	98 17       	cp	r25, r24
    17b6:	88 f0       	brcs	.+34     	; 0x17da <xTaskResumeAll+0xa0>
    17b8:	c0 92 59 12 	sts	0x1259, r12	; 0x801259 <xYieldPending>
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <xTaskResumeAll+0xa0>
    17be:	c0 e0       	ldi	r28, 0x00	; 0
    17c0:	d0 e0       	ldi	r29, 0x00	; 0
    17c2:	0f 2e       	mov	r0, r31
    17c4:	f9 e7       	ldi	r31, 0x79	; 121
    17c6:	ef 2e       	mov	r14, r31
    17c8:	f2 e1       	ldi	r31, 0x12	; 18
    17ca:	ff 2e       	mov	r15, r31
    17cc:	f0 2d       	mov	r31, r0
    17ce:	0f 2e       	mov	r0, r31
    17d0:	fb e0       	ldi	r31, 0x0B	; 11
    17d2:	df 2e       	mov	r13, r31
    17d4:	f0 2d       	mov	r31, r0
    17d6:	cc 24       	eor	r12, r12
    17d8:	c3 94       	inc	r12
    17da:	f7 01       	movw	r30, r14
    17dc:	80 81       	ld	r24, Z
    17de:	81 11       	cpse	r24, r1
    17e0:	c5 cf       	rjmp	.-118    	; 0x176c <xTaskResumeAll+0x32>
    17e2:	cd 2b       	or	r28, r29
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <xTaskResumeAll+0xae>
    17e6:	8f dc       	rcall	.-1762   	; 0x1106 <prvResetNextTaskUnblockTime>
    17e8:	c0 91 5a 12 	lds	r28, 0x125A	; 0x80125a <uxPendedTicks>
    17ec:	cc 23       	and	r28, r28
    17ee:	49 f0       	breq	.+18     	; 0x1802 <xTaskResumeAll+0xc8>
    17f0:	d1 e0       	ldi	r29, 0x01	; 1
    17f2:	d1 de       	rcall	.-606    	; 0x1596 <xTaskIncrementTick>
    17f4:	81 11       	cpse	r24, r1
    17f6:	d0 93 59 12 	sts	0x1259, r29	; 0x801259 <xYieldPending>
    17fa:	c1 50       	subi	r28, 0x01	; 1
    17fc:	d1 f7       	brne	.-12     	; 0x17f2 <xTaskResumeAll+0xb8>
    17fe:	10 92 5a 12 	sts	0x125A, r1	; 0x80125a <uxPendedTicks>
    1802:	80 91 59 12 	lds	r24, 0x1259	; 0x801259 <xYieldPending>
    1806:	88 23       	and	r24, r24
    1808:	29 f0       	breq	.+10     	; 0x1814 <xTaskResumeAll+0xda>
    180a:	f8 d8       	rcall	.-3600   	; 0x9fc <vPortYield>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <xTaskResumeAll+0xdc>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <xTaskResumeAll+0xdc>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	08 95       	ret

0000182c <vTaskSetApplicationTaskTag>:
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	21 f4       	brne	.+8      	; 0x1838 <vTaskSetApplicationTaskTag+0xc>
    1830:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1834:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	0f 92       	push	r0
    183e:	fc 01       	movw	r30, r24
    1840:	72 a7       	std	Z+42, r23	; 0x2a
    1842:	61 a7       	std	Z+41, r22	; 0x29
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	08 95       	ret

0000184a <vTaskSwitchContext>:
    184a:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <uxSchedulerSuspended>
    184e:	88 23       	and	r24, r24
    1850:	21 f0       	breq	.+8      	; 0x185a <vTaskSwitchContext+0x10>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <xYieldPending>
    1858:	08 95       	ret
    185a:	10 92 59 12 	sts	0x1259, r1	; 0x801259 <xYieldPending>
    185e:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1862:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1866:	81 a5       	ldd	r24, Z+41	; 0x29
    1868:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <task_switch_out>
    186c:	a0 91 ca 12 	lds	r26, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1870:	b0 91 cb 12 	lds	r27, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1874:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1878:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    187c:	2d 91       	ld	r18, X+
    187e:	3c 91       	ld	r19, X
    1880:	83 8d       	ldd	r24, Z+27	; 0x1b
    1882:	94 8d       	ldd	r25, Z+28	; 0x1c
    1884:	82 17       	cp	r24, r18
    1886:	93 07       	cpc	r25, r19
    1888:	58 f0       	brcs	.+22     	; 0x18a0 <vTaskSwitchContext+0x56>
    188a:	60 91 ca 12 	lds	r22, 0x12CA	; 0x8012ca <pxCurrentTCB>
    188e:	70 91 cb 12 	lds	r23, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1892:	80 91 ca 12 	lds	r24, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1896:	90 91 cb 12 	lds	r25, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    189a:	63 5e       	subi	r22, 0xE3	; 227
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	15 d3       	rcall	.+1578   	; 0x1eca <vApplicationStackOverflowHook>
    18a0:	80 91 5c 12 	lds	r24, 0x125C	; 0x80125c <uxTopReadyPriority>
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	9b e0       	ldi	r25, 0x0B	; 11
    18aa:	89 9f       	mul	r24, r25
    18ac:	f0 01       	movw	r30, r0
    18ae:	11 24       	eor	r1, r1
    18b0:	e2 56       	subi	r30, 0x62	; 98
    18b2:	fd 4e       	sbci	r31, 0xED	; 237
    18b4:	90 81       	ld	r25, Z
    18b6:	91 11       	cpse	r25, r1
    18b8:	0e c0       	rjmp	.+28     	; 0x18d6 <vTaskSwitchContext+0x8c>
    18ba:	4b e0       	ldi	r20, 0x0B	; 11
    18bc:	81 50       	subi	r24, 0x01	; 1
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	42 9f       	mul	r20, r18
    18c4:	f0 01       	movw	r30, r0
    18c6:	43 9f       	mul	r20, r19
    18c8:	f0 0d       	add	r31, r0
    18ca:	11 24       	eor	r1, r1
    18cc:	e2 56       	subi	r30, 0x62	; 98
    18ce:	fd 4e       	sbci	r31, 0xED	; 237
    18d0:	90 81       	ld	r25, Z
    18d2:	99 23       	and	r25, r25
    18d4:	99 f3       	breq	.-26     	; 0x18bc <vTaskSwitchContext+0x72>
    18d6:	9b e0       	ldi	r25, 0x0B	; 11
    18d8:	92 9f       	mul	r25, r18
    18da:	a0 01       	movw	r20, r0
    18dc:	93 9f       	mul	r25, r19
    18de:	50 0d       	add	r21, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	da 01       	movw	r26, r20
    18e4:	a2 56       	subi	r26, 0x62	; 98
    18e6:	bd 4e       	sbci	r27, 0xED	; 237
    18e8:	11 96       	adiw	r26, 0x01	; 1
    18ea:	ed 91       	ld	r30, X+
    18ec:	fc 91       	ld	r31, X
    18ee:	12 97       	sbiw	r26, 0x02	; 2
    18f0:	04 80       	ldd	r0, Z+4	; 0x04
    18f2:	f5 81       	ldd	r31, Z+5	; 0x05
    18f4:	e0 2d       	mov	r30, r0
    18f6:	12 96       	adiw	r26, 0x02	; 2
    18f8:	fc 93       	st	X, r31
    18fa:	ee 93       	st	-X, r30
    18fc:	11 97       	sbiw	r26, 0x01	; 1
    18fe:	4f 55       	subi	r20, 0x5F	; 95
    1900:	5d 4e       	sbci	r21, 0xED	; 237
    1902:	e4 17       	cp	r30, r20
    1904:	f5 07       	cpc	r31, r21
    1906:	29 f4       	brne	.+10     	; 0x1912 <vTaskSwitchContext+0xc8>
    1908:	44 81       	ldd	r20, Z+4	; 0x04
    190a:	55 81       	ldd	r21, Z+5	; 0x05
    190c:	fd 01       	movw	r30, r26
    190e:	52 83       	std	Z+2, r21	; 0x02
    1910:	41 83       	std	Z+1, r20	; 0x01
    1912:	9b e0       	ldi	r25, 0x0B	; 11
    1914:	92 9f       	mul	r25, r18
    1916:	f0 01       	movw	r30, r0
    1918:	93 9f       	mul	r25, r19
    191a:	f0 0d       	add	r31, r0
    191c:	11 24       	eor	r1, r1
    191e:	e2 56       	subi	r30, 0x62	; 98
    1920:	fd 4e       	sbci	r31, 0xED	; 237
    1922:	01 80       	ldd	r0, Z+1	; 0x01
    1924:	f2 81       	ldd	r31, Z+2	; 0x02
    1926:	e0 2d       	mov	r30, r0
    1928:	20 85       	ldd	r18, Z+8	; 0x08
    192a:	31 85       	ldd	r19, Z+9	; 0x09
    192c:	30 93 cb 12 	sts	0x12CB, r19	; 0x8012cb <pxCurrentTCB+0x1>
    1930:	20 93 ca 12 	sts	0x12CA, r18	; 0x8012ca <pxCurrentTCB>
    1934:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <uxTopReadyPriority>
    1938:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    193c:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1940:	81 a5       	ldd	r24, Z+41	; 0x29
    1942:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <task_switch_in>
    1946:	08 95       	ret

00001948 <vTaskPlaceOnEventList>:
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	6a 01       	movw	r12, r20
    1952:	7b 01       	movw	r14, r22
    1954:	60 91 ca 12 	lds	r22, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1958:	70 91 cb 12 	lds	r23, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    195c:	62 5f       	subi	r22, 0xF2	; 242
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <vListInsert>
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	c7 01       	movw	r24, r14
    1968:	b6 01       	movw	r22, r12
    196a:	f7 db       	rcall	.-2066   	; 0x115a <prvAddCurrentTaskToDelayedList>
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	08 95       	ret

00001976 <vTaskPlaceOnEventListRestricted>:
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	cf 93       	push	r28
    1980:	6a 01       	movw	r12, r20
    1982:	7b 01       	movw	r14, r22
    1984:	c2 2f       	mov	r28, r18
    1986:	60 91 ca 12 	lds	r22, 0x12CA	; 0x8012ca <pxCurrentTCB>
    198a:	70 91 cb 12 	lds	r23, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    198e:	62 5f       	subi	r22, 0xF2	; 242
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	0e 94 cb 03 	call	0x796	; 0x796 <vListInsertEnd>
    1996:	cc 23       	and	r28, r28
    1998:	21 f0       	breq	.+8      	; 0x19a2 <vTaskPlaceOnEventListRestricted+0x2c>
    199a:	cc 24       	eor	r12, r12
    199c:	ca 94       	dec	r12
    199e:	dc 2c       	mov	r13, r12
    19a0:	76 01       	movw	r14, r12
    19a2:	4c 2f       	mov	r20, r28
    19a4:	c7 01       	movw	r24, r14
    19a6:	b6 01       	movw	r22, r12
    19a8:	d8 db       	rcall	.-2128   	; 0x115a <prvAddCurrentTaskToDelayedList>
    19aa:	cf 91       	pop	r28
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	cf 90       	pop	r12
    19b4:	08 95       	ret

000019b6 <xTaskRemoveFromEventList>:
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	dc 01       	movw	r26, r24
    19c0:	17 96       	adiw	r26, 0x07	; 7
    19c2:	ed 91       	ld	r30, X+
    19c4:	fc 91       	ld	r31, X
    19c6:	18 97       	sbiw	r26, 0x08	; 8
    19c8:	c0 85       	ldd	r28, Z+8	; 0x08
    19ca:	d1 85       	ldd	r29, Z+9	; 0x09
    19cc:	8e 01       	movw	r16, r28
    19ce:	02 5f       	subi	r16, 0xF2	; 242
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	c8 01       	movw	r24, r16
    19d4:	0e 94 29 04 	call	0x852	; 0x852 <uxListRemove>
    19d8:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <uxSchedulerSuspended>
    19dc:	81 11       	cpse	r24, r1
    19de:	16 c0       	rjmp	.+44     	; 0x1a0c <xTaskRemoveFromEventList+0x56>
    19e0:	0c 50       	subi	r16, 0x0C	; 12
    19e2:	11 09       	sbc	r17, r1
    19e4:	c8 01       	movw	r24, r16
    19e6:	0e 94 29 04 	call	0x852	; 0x852 <uxListRemove>
    19ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ec:	90 91 5c 12 	lds	r25, 0x125C	; 0x80125c <uxTopReadyPriority>
    19f0:	98 17       	cp	r25, r24
    19f2:	10 f4       	brcc	.+4      	; 0x19f8 <xTaskRemoveFromEventList+0x42>
    19f4:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <uxTopReadyPriority>
    19f8:	bb e0       	ldi	r27, 0x0B	; 11
    19fa:	8b 9f       	mul	r24, r27
    19fc:	c0 01       	movw	r24, r0
    19fe:	11 24       	eor	r1, r1
    1a00:	b8 01       	movw	r22, r16
    1a02:	82 56       	subi	r24, 0x62	; 98
    1a04:	9d 4e       	sbci	r25, 0xED	; 237
    1a06:	0e 94 cb 03 	call	0x796	; 0x796 <vListInsertEnd>
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <xTaskRemoveFromEventList+0x60>
    1a0c:	b8 01       	movw	r22, r16
    1a0e:	89 e7       	ldi	r24, 0x79	; 121
    1a10:	92 e1       	ldi	r25, 0x12	; 18
    1a12:	0e 94 cb 03 	call	0x796	; 0x796 <vListInsertEnd>
    1a16:	e0 91 ca 12 	lds	r30, 0x12CA	; 0x8012ca <pxCurrentTCB>
    1a1a:	f0 91 cb 12 	lds	r31, 0x12CB	; 0x8012cb <pxCurrentTCB+0x1>
    1a1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a20:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a22:	89 17       	cp	r24, r25
    1a24:	20 f4       	brcc	.+8      	; 0x1a2e <xTaskRemoveFromEventList+0x78>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <xYieldPending>
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <xTaskRemoveFromEventList+0x7a>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <vTaskInternalSetTimeOutState>:
    1a3a:	20 91 58 12 	lds	r18, 0x1258	; 0x801258 <xNumOfOverflows>
    1a3e:	fc 01       	movw	r30, r24
    1a40:	20 83       	st	Z, r18
    1a42:	40 91 5d 12 	lds	r20, 0x125D	; 0x80125d <xTickCount>
    1a46:	50 91 5e 12 	lds	r21, 0x125E	; 0x80125e <xTickCount+0x1>
    1a4a:	60 91 5f 12 	lds	r22, 0x125F	; 0x80125f <xTickCount+0x2>
    1a4e:	70 91 60 12 	lds	r23, 0x1260	; 0x801260 <xTickCount+0x3>
    1a52:	41 83       	std	Z+1, r20	; 0x01
    1a54:	52 83       	std	Z+2, r21	; 0x02
    1a56:	63 83       	std	Z+3, r22	; 0x03
    1a58:	74 83       	std	Z+4, r23	; 0x04
    1a5a:	08 95       	ret

00001a5c <xTaskCheckForTimeOut>:
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	fb 01       	movw	r30, r22
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	0f 92       	push	r0
    1a74:	40 91 5d 12 	lds	r20, 0x125D	; 0x80125d <xTickCount>
    1a78:	50 91 5e 12 	lds	r21, 0x125E	; 0x80125e <xTickCount+0x1>
    1a7c:	60 91 5f 12 	lds	r22, 0x125F	; 0x80125f <xTickCount+0x2>
    1a80:	70 91 60 12 	lds	r23, 0x1260	; 0x801260 <xTickCount+0x3>
    1a84:	00 81       	ld	r16, Z
    1a86:	11 81       	ldd	r17, Z+1	; 0x01
    1a88:	22 81       	ldd	r18, Z+2	; 0x02
    1a8a:	33 81       	ldd	r19, Z+3	; 0x03
    1a8c:	0f 3f       	cpi	r16, 0xFF	; 255
    1a8e:	af ef       	ldi	r26, 0xFF	; 255
    1a90:	1a 07       	cpc	r17, r26
    1a92:	2a 07       	cpc	r18, r26
    1a94:	3a 07       	cpc	r19, r26
    1a96:	49 f1       	breq	.+82     	; 0x1aea <xTaskCheckForTimeOut+0x8e>
    1a98:	ec 01       	movw	r28, r24
    1a9a:	c9 80       	ldd	r12, Y+1	; 0x01
    1a9c:	da 80       	ldd	r13, Y+2	; 0x02
    1a9e:	eb 80       	ldd	r14, Y+3	; 0x03
    1aa0:	fc 80       	ldd	r15, Y+4	; 0x04
    1aa2:	a0 91 58 12 	lds	r26, 0x1258	; 0x801258 <xNumOfOverflows>
    1aa6:	b8 81       	ld	r27, Y
    1aa8:	ba 17       	cp	r27, r26
    1aaa:	29 f0       	breq	.+10     	; 0x1ab6 <xTaskCheckForTimeOut+0x5a>
    1aac:	4c 15       	cp	r20, r12
    1aae:	5d 05       	cpc	r21, r13
    1ab0:	6e 05       	cpc	r22, r14
    1ab2:	7f 05       	cpc	r23, r15
    1ab4:	e0 f4       	brcc	.+56     	; 0x1aee <xTaskCheckForTimeOut+0x92>
    1ab6:	4c 19       	sub	r20, r12
    1ab8:	5d 09       	sbc	r21, r13
    1aba:	6e 09       	sbc	r22, r14
    1abc:	7f 09       	sbc	r23, r15
    1abe:	40 17       	cp	r20, r16
    1ac0:	51 07       	cpc	r21, r17
    1ac2:	62 07       	cpc	r22, r18
    1ac4:	73 07       	cpc	r23, r19
    1ac6:	58 f4       	brcc	.+22     	; 0x1ade <xTaskCheckForTimeOut+0x82>
    1ac8:	04 1b       	sub	r16, r20
    1aca:	15 0b       	sbc	r17, r21
    1acc:	26 0b       	sbc	r18, r22
    1ace:	37 0b       	sbc	r19, r23
    1ad0:	00 83       	st	Z, r16
    1ad2:	11 83       	std	Z+1, r17	; 0x01
    1ad4:	22 83       	std	Z+2, r18	; 0x02
    1ad6:	33 83       	std	Z+3, r19	; 0x03
    1ad8:	b0 df       	rcall	.-160    	; 0x1a3a <vTaskInternalSetTimeOutState>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	09 c0       	rjmp	.+18     	; 0x1af0 <xTaskCheckForTimeOut+0x94>
    1ade:	10 82       	st	Z, r1
    1ae0:	11 82       	std	Z+1, r1	; 0x01
    1ae2:	12 82       	std	Z+2, r1	; 0x02
    1ae4:	13 82       	std	Z+3, r1	; 0x03
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <xTaskCheckForTimeOut+0x94>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <xTaskCheckForTimeOut+0x94>
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	08 95       	ret

00001b06 <vTaskMissedYield>:
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <xYieldPending>
    1b0c:	08 95       	ret

00001b0e <xTaskGetSchedulerState>:
    1b0e:	80 91 5b 12 	lds	r24, 0x125B	; 0x80125b <xSchedulerRunning>
    1b12:	88 23       	and	r24, r24
    1b14:	31 f0       	breq	.+12     	; 0x1b22 <xTaskGetSchedulerState+0x14>
    1b16:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <uxSchedulerSuspended>
    1b1a:	88 23       	and	r24, r24
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <xTaskGetSchedulerState+0x18>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	08 95       	ret
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	08 95       	ret
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	08 95       	ret

00001b2a <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1b34:	89 2b       	or	r24, r25
    1b36:	79 f1       	breq	.+94     	; 0x1b96 <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1b38:	80 a5       	ldd	r24, Z+40	; 0x28
    1b3a:	81 50       	subi	r24, 0x01	; 1
    1b3c:	80 a7       	std	Z+40, r24	; 0x28

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1b3e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b40:	97 a1       	ldd	r25, Z+39	; 0x27
    1b42:	29 17       	cp	r18, r25
    1b44:	51 f1       	breq	.+84     	; 0x1b9a <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1b46:	81 11       	cpse	r24, r1
    1b48:	2a c0       	rjmp	.+84     	; 0x1b9e <xTaskPriorityDisinherit+0x74>
    1b4a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1b4c:	8f 01       	movw	r16, r30
    1b4e:	0e 5f       	subi	r16, 0xFE	; 254
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	c8 01       	movw	r24, r16
    1b54:	0e 94 29 04 	call	0x852	; 0x852 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1b58:	8f a1       	ldd	r24, Y+39	; 0x27
    1b5a:	8a 8f       	std	Y+26, r24	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b5c:	44 e0       	ldi	r20, 0x04	; 4
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	48 1b       	sub	r20, r24
    1b66:	51 09       	sbc	r21, r1
    1b68:	61 09       	sbc	r22, r1
    1b6a:	71 09       	sbc	r23, r1
    1b6c:	4e 87       	std	Y+14, r20	; 0x0e
    1b6e:	5f 87       	std	Y+15, r21	; 0x0f
    1b70:	68 8b       	std	Y+16, r22	; 0x10
    1b72:	79 8b       	std	Y+17, r23	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1b74:	90 91 5c 12 	lds	r25, 0x125C	; 0x80125c <uxTopReadyPriority>
    1b78:	98 17       	cp	r25, r24
    1b7a:	10 f4       	brcc	.+4      	; 0x1b80 <xTaskPriorityDisinherit+0x56>
    1b7c:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <uxTopReadyPriority>
    1b80:	2b e0       	ldi	r18, 0x0B	; 11
    1b82:	82 9f       	mul	r24, r18
    1b84:	c0 01       	movw	r24, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	b8 01       	movw	r22, r16
    1b8a:	82 56       	subi	r24, 0x62	; 98
    1b8c:	9d 4e       	sbci	r25, 0xED	; 237
    1b8e:	0e 94 cb 03 	call	0x796	; 0x796 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <xTaskPriorityDisinherit+0x76>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <xTaskPriorityDisinherit+0x76>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <prvInsertTimerInActiveList>:
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	42 83       	std	Z+2, r20	; 0x02
    1bba:	53 83       	std	Z+3, r21	; 0x03
    1bbc:	64 83       	std	Z+4, r22	; 0x04
    1bbe:	75 83       	std	Z+5, r23	; 0x05
    1bc0:	93 87       	std	Z+11, r25	; 0x0b
    1bc2:	82 87       	std	Z+10, r24	; 0x0a
    1bc4:	04 17       	cp	r16, r20
    1bc6:	15 07       	cpc	r17, r21
    1bc8:	26 07       	cpc	r18, r22
    1bca:	37 07       	cpc	r19, r23
    1bcc:	c0 f0       	brcs	.+48     	; 0x1bfe <prvInsertTimerInActiveList+0x54>
    1bce:	0c 19       	sub	r16, r12
    1bd0:	1d 09       	sbc	r17, r13
    1bd2:	2e 09       	sbc	r18, r14
    1bd4:	3f 09       	sbc	r19, r15
    1bd6:	86 85       	ldd	r24, Z+14	; 0x0e
    1bd8:	97 85       	ldd	r25, Z+15	; 0x0f
    1bda:	a0 89       	ldd	r26, Z+16	; 0x10
    1bdc:	b1 89       	ldd	r27, Z+17	; 0x11
    1bde:	08 17       	cp	r16, r24
    1be0:	19 07       	cpc	r17, r25
    1be2:	2a 07       	cpc	r18, r26
    1be4:	3b 07       	cpc	r19, r27
    1be6:	00 f5       	brcc	.+64     	; 0x1c28 <prvInsertTimerInActiveList+0x7e>
    1be8:	bf 01       	movw	r22, r30
    1bea:	6e 5f       	subi	r22, 0xFE	; 254
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	80 91 d4 12 	lds	r24, 0x12D4	; 0x8012d4 <pxOverflowTimerList>
    1bf2:	90 91 d5 12 	lds	r25, 0x12D5	; 0x8012d5 <pxOverflowTimerList+0x1>
    1bf6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <vListInsert>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	18 c0       	rjmp	.+48     	; 0x1c2e <prvInsertTimerInActiveList+0x84>
    1bfe:	0c 15       	cp	r16, r12
    1c00:	1d 05       	cpc	r17, r13
    1c02:	2e 05       	cpc	r18, r14
    1c04:	3f 05       	cpc	r19, r15
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <prvInsertTimerInActiveList+0x68>
    1c08:	4c 15       	cp	r20, r12
    1c0a:	5d 05       	cpc	r21, r13
    1c0c:	6e 05       	cpc	r22, r14
    1c0e:	7f 05       	cpc	r23, r15
    1c10:	68 f4       	brcc	.+26     	; 0x1c2c <prvInsertTimerInActiveList+0x82>
    1c12:	bf 01       	movw	r22, r30
    1c14:	6e 5f       	subi	r22, 0xFE	; 254
    1c16:	7f 4f       	sbci	r23, 0xFF	; 255
    1c18:	80 91 d6 12 	lds	r24, 0x12D6	; 0x8012d6 <pxCurrentTimerList>
    1c1c:	90 91 d7 12 	lds	r25, 0x12D7	; 0x8012d7 <pxCurrentTimerList+0x1>
    1c20:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <vListInsert>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <prvInsertTimerInActiveList+0x84>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	01 c0       	rjmp	.+2      	; 0x1c2e <prvInsertTimerInActiveList+0x84>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	ff 90       	pop	r15
    1c34:	ef 90       	pop	r14
    1c36:	df 90       	pop	r13
    1c38:	cf 90       	pop	r12
    1c3a:	08 95       	ret

00001c3c <prvCheckForValidListAndQueue>:
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	0f 92       	push	r0
    1c42:	80 91 d2 12 	lds	r24, 0x12D2	; 0x8012d2 <xTimerQueue>
    1c46:	90 91 d3 12 	lds	r25, 0x12D3	; 0x8012d3 <xTimerQueue+0x1>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	e1 f4       	brne	.+56     	; 0x1c86 <prvCheckForValidListAndQueue+0x4a>
    1c4e:	83 ee       	ldi	r24, 0xE3	; 227
    1c50:	92 e1       	ldi	r25, 0x12	; 18
    1c52:	0e 94 b6 03 	call	0x76c	; 0x76c <vListInitialise>
    1c56:	88 ed       	ldi	r24, 0xD8	; 216
    1c58:	92 e1       	ldi	r25, 0x12	; 18
    1c5a:	0e 94 b6 03 	call	0x76c	; 0x76c <vListInitialise>
    1c5e:	83 ee       	ldi	r24, 0xE3	; 227
    1c60:	92 e1       	ldi	r25, 0x12	; 18
    1c62:	90 93 d7 12 	sts	0x12D7, r25	; 0x8012d7 <pxCurrentTimerList+0x1>
    1c66:	80 93 d6 12 	sts	0x12D6, r24	; 0x8012d6 <pxCurrentTimerList>
    1c6a:	88 ed       	ldi	r24, 0xD8	; 216
    1c6c:	92 e1       	ldi	r25, 0x12	; 18
    1c6e:	90 93 d5 12 	sts	0x12D5, r25	; 0x8012d5 <pxOverflowTimerList+0x1>
    1c72:	80 93 d4 12 	sts	0x12D4, r24	; 0x8012d4 <pxOverflowTimerList>
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	67 e0       	ldi	r22, 0x07	; 7
    1c7a:	8a e0       	ldi	r24, 0x0A	; 10
    1c7c:	92 d8       	rcall	.-3804   	; 0xda2 <xQueueGenericCreate>
    1c7e:	90 93 d3 12 	sts	0x12D3, r25	; 0x8012d3 <xTimerQueue+0x1>
    1c82:	80 93 d2 12 	sts	0x12D2, r24	; 0x8012d2 <xTimerQueue>
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	08 95       	ret

00001c8c <xTimerCreateTimerTask>:
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	d4 df       	rcall	.-88     	; 0x1c3c <prvCheckForValidListAndQueue>
    1c94:	80 91 d2 12 	lds	r24, 0x12D2	; 0x8012d2 <xTimerQueue>
    1c98:	90 91 d3 12 	lds	r25, 0x12D3	; 0x8012d3 <xTimerQueue+0x1>
    1c9c:	89 2b       	or	r24, r25
    1c9e:	89 f0       	breq	.+34     	; 0x1cc2 <xTimerCreateTimerTask+0x36>
    1ca0:	0f 2e       	mov	r0, r31
    1ca2:	f0 ed       	ldi	r31, 0xD0	; 208
    1ca4:	ef 2e       	mov	r14, r31
    1ca6:	f2 e1       	ldi	r31, 0x12	; 18
    1ca8:	ff 2e       	mov	r15, r31
    1caa:	f0 2d       	mov	r31, r0
    1cac:	03 e0       	ldi	r16, 0x03	; 3
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	45 e5       	ldi	r20, 0x55	; 85
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	60 e1       	ldi	r22, 0x10	; 16
    1cb8:	72 e0       	ldi	r23, 0x02	; 2
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	c0 da       	rcall	.-2688   	; 0x1240 <xTaskCreate>
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <xTimerCreateTimerTask+0x38>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	08 95       	ret

00001ccc <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1ccc:	8f 92       	push	r8
    1cce:	9f 92       	push	r9
    1cd0:	af 92       	push	r10
    1cd2:	bf 92       	push	r11
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	27 97       	sbiw	r28, 0x07	; 7
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    1cf4:	e0 91 d2 12 	lds	r30, 0x12D2	; 0x8012d2 <xTimerQueue>
    1cf8:	f0 91 d3 12 	lds	r31, 0x12D3	; 0x8012d3 <xTimerQueue+0x1>
    1cfc:	30 97       	sbiw	r30, 0x00	; 0
    1cfe:	69 f1       	breq	.+90     	; 0x1d5a <xTimerGenericCommand+0x8e>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    1d00:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1d02:	2a 83       	std	Y+2, r18	; 0x02
    1d04:	3b 83       	std	Y+3, r19	; 0x03
    1d06:	4c 83       	std	Y+4, r20	; 0x04
    1d08:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    1d0a:	9f 83       	std	Y+7, r25	; 0x07
    1d0c:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1d0e:	66 30       	cpi	r22, 0x06	; 6
    1d10:	e4 f4       	brge	.+56     	; 0x1d4a <xTimerGenericCommand+0x7e>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1d12:	fd de       	rcall	.-518    	; 0x1b0e <xTaskGetSchedulerState>
    1d14:	82 30       	cpi	r24, 0x02	; 2
    1d16:	61 f4       	brne	.+24     	; 0x1d30 <xTimerGenericCommand+0x64>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1d18:	00 e0       	ldi	r16, 0x00	; 0
    1d1a:	a7 01       	movw	r20, r14
    1d1c:	96 01       	movw	r18, r12
    1d1e:	be 01       	movw	r22, r28
    1d20:	6f 5f       	subi	r22, 0xFF	; 255
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	80 91 d2 12 	lds	r24, 0x12D2	; 0x8012d2 <xTimerQueue>
    1d28:	90 91 d3 12 	lds	r25, 0x12D3	; 0x8012d3 <xTimerQueue+0x1>
    1d2c:	68 d8       	rcall	.-3888   	; 0xdfe <xQueueGenericSend>
    1d2e:	16 c0       	rjmp	.+44     	; 0x1d5c <xTimerGenericCommand+0x90>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1d30:	00 e0       	ldi	r16, 0x00	; 0
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	a9 01       	movw	r20, r18
    1d38:	be 01       	movw	r22, r28
    1d3a:	6f 5f       	subi	r22, 0xFF	; 255
    1d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3e:	80 91 d2 12 	lds	r24, 0x12D2	; 0x8012d2 <xTimerQueue>
    1d42:	90 91 d3 12 	lds	r25, 0x12D3	; 0x8012d3 <xTimerQueue+0x1>
    1d46:	5b d8       	rcall	.-3914   	; 0xdfe <xQueueGenericSend>
    1d48:	09 c0       	rjmp	.+18     	; 0x1d5c <xTimerGenericCommand+0x90>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	a8 01       	movw	r20, r16
    1d4e:	be 01       	movw	r22, r28
    1d50:	6f 5f       	subi	r22, 0xFF	; 255
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	cf 01       	movw	r24, r30
    1d56:	ef d8       	rcall	.-3618   	; 0xf36 <xQueueGenericSendFromISR>
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <xTimerGenericCommand+0x90>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    1d5c:	27 96       	adiw	r28, 0x07	; 7
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	08 95       	ret

00001d82 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1d82:	2f 92       	push	r2
    1d84:	3f 92       	push	r3
    1d86:	4f 92       	push	r4
    1d88:	5f 92       	push	r5
    1d8a:	6f 92       	push	r6
    1d8c:	7f 92       	push	r7
    1d8e:	8f 92       	push	r8
    1d90:	9f 92       	push	r9
    1d92:	af 92       	push	r10
    1d94:	bf 92       	push	r11
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    1da8:	e8 db       	rcall	.-2096   	; 0x157a <xTaskGetTickCount>
    1daa:	2b 01       	movw	r4, r22
    1dac:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    1dae:	80 91 cc 12 	lds	r24, 0x12CC	; 0x8012cc <xLastTime.2432>
    1db2:	90 91 cd 12 	lds	r25, 0x12CD	; 0x8012cd <xLastTime.2432+0x1>
    1db6:	a0 91 ce 12 	lds	r26, 0x12CE	; 0x8012ce <xLastTime.2432+0x2>
    1dba:	b0 91 cf 12 	lds	r27, 0x12CF	; 0x8012cf <xLastTime.2432+0x3>
    1dbe:	48 16       	cp	r4, r24
    1dc0:	59 06       	cpc	r5, r25
    1dc2:	6a 06       	cpc	r6, r26
    1dc4:	7b 06       	cpc	r7, r27
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <prvSampleTimeNow+0x48>
    1dc8:	53 c0       	rjmp	.+166    	; 0x1e70 <prvSampleTimeNow+0xee>
    1dca:	3b c0       	rjmp	.+118    	; 0x1e42 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1dcc:	07 80       	ldd	r0, Z+7	; 0x07
    1dce:	f0 85       	ldd	r31, Z+8	; 0x08
    1dd0:	e0 2d       	mov	r30, r0
    1dd2:	80 80       	ld	r8, Z
    1dd4:	91 80       	ldd	r9, Z+1	; 0x01
    1dd6:	a2 80       	ldd	r10, Z+2	; 0x02
    1dd8:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1dda:	c0 85       	ldd	r28, Z+8	; 0x08
    1ddc:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1dde:	8e 01       	movw	r16, r28
    1de0:	0e 5f       	subi	r16, 0xFE	; 254
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	c8 01       	movw	r24, r16
    1de6:	0e 94 29 04 	call	0x852	; 0x852 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1dea:	ec 89       	ldd	r30, Y+20	; 0x14
    1dec:	fd 89       	ldd	r31, Y+21	; 0x15
    1dee:	ce 01       	movw	r24, r28
    1df0:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1df2:	8f 89       	ldd	r24, Y+23	; 0x17
    1df4:	82 ff       	sbrs	r24, 2
    1df6:	25 c0       	rjmp	.+74     	; 0x1e42 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1df8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dfa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dfc:	a8 89       	ldd	r26, Y+16	; 0x10
    1dfe:	b9 89       	ldd	r27, Y+17	; 0x11
    1e00:	88 0d       	add	r24, r8
    1e02:	99 1d       	adc	r25, r9
    1e04:	aa 1d       	adc	r26, r10
    1e06:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    1e08:	88 16       	cp	r8, r24
    1e0a:	99 06       	cpc	r9, r25
    1e0c:	aa 06       	cpc	r10, r26
    1e0e:	bb 06       	cpc	r11, r27
    1e10:	70 f4       	brcc	.+28     	; 0x1e2e <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1e12:	8a 83       	std	Y+2, r24	; 0x02
    1e14:	9b 83       	std	Y+3, r25	; 0x03
    1e16:	ac 83       	std	Y+4, r26	; 0x04
    1e18:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1e1a:	db 87       	std	Y+11, r29	; 0x0b
    1e1c:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1e1e:	b8 01       	movw	r22, r16
    1e20:	80 91 d6 12 	lds	r24, 0x12D6	; 0x8012d6 <pxCurrentTimerList>
    1e24:	90 91 d7 12 	lds	r25, 0x12D7	; 0x8012d7 <pxCurrentTimerList+0x1>
    1e28:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <vListInsert>
    1e2c:	0a c0       	rjmp	.+20     	; 0x1e42 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1e2e:	c1 2c       	mov	r12, r1
    1e30:	d1 2c       	mov	r13, r1
    1e32:	76 01       	movw	r14, r12
    1e34:	00 e0       	ldi	r16, 0x00	; 0
    1e36:	10 e0       	ldi	r17, 0x00	; 0
    1e38:	a5 01       	movw	r20, r10
    1e3a:	94 01       	movw	r18, r8
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	ce 01       	movw	r24, r28
    1e40:	45 df       	rcall	.-374    	; 0x1ccc <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1e42:	e0 91 d6 12 	lds	r30, 0x12D6	; 0x8012d6 <pxCurrentTimerList>
    1e46:	f0 91 d7 12 	lds	r31, 0x12D7	; 0x8012d7 <pxCurrentTimerList+0x1>
    1e4a:	80 81       	ld	r24, Z
    1e4c:	81 11       	cpse	r24, r1
    1e4e:	be cf       	rjmp	.-132    	; 0x1dcc <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    1e50:	80 91 d4 12 	lds	r24, 0x12D4	; 0x8012d4 <pxOverflowTimerList>
    1e54:	90 91 d5 12 	lds	r25, 0x12D5	; 0x8012d5 <pxOverflowTimerList+0x1>
    1e58:	90 93 d7 12 	sts	0x12D7, r25	; 0x8012d7 <pxCurrentTimerList+0x1>
    1e5c:	80 93 d6 12 	sts	0x12D6, r24	; 0x8012d6 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    1e60:	f0 93 d5 12 	sts	0x12D5, r31	; 0x8012d5 <pxOverflowTimerList+0x1>
    1e64:	e0 93 d4 12 	sts	0x12D4, r30	; 0x8012d4 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	f1 01       	movw	r30, r2
    1e6c:	80 83       	st	Z, r24
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    1e70:	f1 01       	movw	r30, r2
    1e72:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    1e74:	40 92 cc 12 	sts	0x12CC, r4	; 0x8012cc <xLastTime.2432>
    1e78:	50 92 cd 12 	sts	0x12CD, r5	; 0x8012cd <xLastTime.2432+0x1>
    1e7c:	60 92 ce 12 	sts	0x12CE, r6	; 0x8012ce <xLastTime.2432+0x2>
    1e80:	70 92 cf 12 	sts	0x12CF, r7	; 0x8012cf <xLastTime.2432+0x3>

    return xTimeNow;
}
    1e84:	c3 01       	movw	r24, r6
    1e86:	b2 01       	movw	r22, r4
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	bf 90       	pop	r11
    1e9a:	af 90       	pop	r10
    1e9c:	9f 90       	pop	r9
    1e9e:	8f 90       	pop	r8
    1ea0:	7f 90       	pop	r7
    1ea2:	6f 90       	pop	r6
    1ea4:	5f 90       	pop	r5
    1ea6:	4f 90       	pop	r4
    1ea8:	3f 90       	pop	r3
    1eaa:	2f 90       	pop	r2
    1eac:	08 95       	ret

00001eae <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    1eae:	08 95       	ret

00001eb0 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1eb0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1eb2:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1eb4:	2f ef       	ldi	r18, 0xFF	; 255
    1eb6:	80 e7       	ldi	r24, 0x70	; 112
    1eb8:	92 e0       	ldi	r25, 0x02	; 2
    1eba:	21 50       	subi	r18, 0x01	; 1
    1ebc:	80 40       	sbci	r24, 0x00	; 0
    1ebe:	90 40       	sbci	r25, 0x00	; 0
    1ec0:	e1 f7       	brne	.-8      	; 0x1eba <vApplicationMallocFailedHook+0xa>
    1ec2:	00 c0       	rjmp	.+0      	; 0x1ec4 <vApplicationMallocFailedHook+0x14>
    1ec4:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    1ec6:	1f 9a       	sbi	0x03, 7	; 3
    1ec8:	f5 cf       	rjmp	.-22     	; 0x1eb4 <vApplicationMallocFailedHook+0x4>

00001eca <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1eca:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1ecc:	2f 9a       	sbi	0x05, 7	; 5
    1ece:	2f ef       	ldi	r18, 0xFF	; 255
    1ed0:	87 ea       	ldi	r24, 0xA7	; 167
    1ed2:	91 e6       	ldi	r25, 0x61	; 97
    1ed4:	21 50       	subi	r18, 0x01	; 1
    1ed6:	80 40       	sbci	r24, 0x00	; 0
    1ed8:	90 40       	sbci	r25, 0x00	; 0
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <vApplicationStackOverflowHook+0xa>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <vApplicationStackOverflowHook+0x14>
    1ede:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1ee0:	1f 9a       	sbi	0x03, 7	; 3
    1ee2:	f5 cf       	rjmp	.-22     	; 0x1ece <vApplicationStackOverflowHook+0x4>

00001ee4 <init_task>:
	
    /* Replace with your application code */
    while (1) {}
}

void init_task(void* param) {
    1ee4:	ef 92       	push	r14
    1ee6:	ff 92       	push	r15
    1ee8:	0f 93       	push	r16
    1eea:	cf 93       	push	r28
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag(NULL, (void*) 1 );
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9b dc       	rcall	.-1738   	; 0x182c <vTaskSetApplicationTaskTag>
	#endif
		
	trace_init();
    1ef6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <trace_init>
	//stdio_create(ser_USART0);
	//lora_driver_create(1, NULL);
	//lora_handler_create(3);

	hih8120_driverReturnCode_t drvCreate = hih8120_create();
    1efa:	6b d0       	rcall	.+214    	; 0x1fd2 <hih8120_create>
    1efc:	c8 2f       	mov	r28, r24

	if ( HIH8120_OK == drvCreate )
    1efe:	81 11       	cpse	r24, r1
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <init_task+0x24>
	{
		puts("Temperature Driver Successfully Created.");
    1f02:	88 e1       	ldi	r24, 0x18	; 24
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	ec d6       	rcall	.+3544   	; 0x2ce0 <puts>
	}
	printf("Temperature Task Driver Return Code: %d\n", drvCreate);
    1f08:	1f 92       	push	r1
    1f0a:	cf 93       	push	r28
    1f0c:	81 e4       	ldi	r24, 0x41	; 65
    1f0e:	92 e0       	ldi	r25, 0x02	; 2
    1f10:	9f 93       	push	r25
    1f12:	8f 93       	push	r24
    1f14:	d2 d6       	rcall	.+3492   	; 0x2cba <printf>
	
	
	xTaskCreate(
					get_temp(),       /* Function that implements the task. */
    1f16:	0e 94 69 02 	call	0x4d2	; 0x4d2 <get_temp>
		puts("Temperature Driver Successfully Created.");
	}
	printf("Temperature Task Driver Return Code: %d\n", drvCreate);
	
	
	xTaskCreate(
    1f1a:	0f 2e       	mov	r0, r31
    1f1c:	fe ee       	ldi	r31, 0xEE	; 238
    1f1e:	ef 2e       	mov	r14, r31
    1f20:	f2 e1       	ldi	r31, 0x12	; 18
    1f22:	ff 2e       	mov	r15, r31
    1f24:	f0 2d       	mov	r31, r0
    1f26:	00 e0       	ldi	r16, 0x00	; 0
    1f28:	21 e0       	ldi	r18, 0x01	; 1
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 ec       	ldi	r20, 0xC0	; 192
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	6a e6       	ldi	r22, 0x6A	; 106
    1f32:	72 e0       	ldi	r23, 0x02	; 2
	
	// TODO start all tasks
	
	
	
	vTaskDelete(NULL);
    1f34:	85 d9       	rcall	.-3318   	; 0x1240 <xTaskCreate>
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	90 da       	rcall	.-2784   	; 0x145c <vTaskDelete>
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	08 95       	ret

00001f4e <main>:
/* xHandle can be used only in main, if it is inside the main method. Moving above the main */
TaskHandle_t xHandle = NULL;

int main(void)
{
	puts("Program starting...");
    1f4e:	87 e7       	ldi	r24, 0x77	; 119
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	c6 d6       	rcall	.+3468   	; 0x2ce0 <puts>
	/* Create the task, storing the handle. */
	xTaskCreate(
    1f54:	0f 2e       	mov	r0, r31
    1f56:	fe ee       	ldi	r31, 0xEE	; 238
    1f58:	ef 2e       	mov	r14, r31
    1f5a:	f2 e1       	ldi	r31, 0x12	; 18
    1f5c:	ff 2e       	mov	r15, r31
    1f5e:	f0 2d       	mov	r31, r0
    1f60:	00 e0       	ldi	r16, 0x00	; 0
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 ec       	ldi	r20, 0xC0	; 192
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	6b e8       	ldi	r22, 0x8B	; 139
    1f6c:	72 e0       	ldi	r23, 0x02	; 2
    1f6e:	82 e7       	ldi	r24, 0x72	; 114
    1f70:	9f e0       	ldi	r25, 0x0F	; 15
					configMINIMAL_STACK_SIZE,      /* Stack size in words, not bytes. */
					(void*) 1,    /* Parameter passed into the task. */
					tskIDLE_PRIORITY,/* Priority at which the task is created. */
					&xHandle );      /* Used to pass out the created task's handle. */

	vTaskStartScheduler();
    1f72:	66 d9       	rcall	.-3380   	; 0x1240 <xTaskCreate>
    1f74:	c1 da       	rcall	.-2686   	; 0x14f8 <vTaskStartScheduler>
    1f76:	ff cf       	rjmp	.-2      	; 0x1f76 <main+0x28>

00001f78 <_hihTwiCallback>:
    1f78:	65 30       	cpi	r22, 0x05	; 5
    1f7a:	f1 f4       	brne	.+60     	; 0x1fb8 <_hihTwiCallback+0x40>
    1f7c:	fa 01       	movw	r30, r20
    1f7e:	80 81       	ld	r24, Z
    1f80:	8f 73       	andi	r24, 0x3F	; 63
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	98 2f       	mov	r25, r24
    1f86:	88 27       	eor	r24, r24
    1f88:	21 81       	ldd	r18, Z+1	; 0x01
    1f8a:	82 2b       	or	r24, r18
    1f8c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    1f90:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	f0 e4       	ldi	r31, 0x40	; 64
    1f98:	8f 9f       	mul	r24, r31
    1f9a:	c0 01       	movw	r24, r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	fa 01       	movw	r30, r20
    1fa0:	23 81       	ldd	r18, Z+3	; 0x03
    1fa2:	26 95       	lsr	r18
    1fa4:	26 95       	lsr	r18
    1fa6:	82 2b       	or	r24, r18
    1fa8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    1fac:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	80 93 f0 12 	sts	0x12F0, r24	; 0x8012f0 <_measuringIsReady>
    1fb6:	08 95       	ret
    1fb8:	64 30       	cpi	r22, 0x04	; 4
    1fba:	51 f0       	breq	.+20     	; 0x1fd0 <_hihTwiCallback+0x58>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e4       	ldi	r25, 0x40	; 64
    1fc0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    1fc4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    1fc8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    1fcc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    1fd0:	08 95       	ret

00001fd2 <hih8120_create>:
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	0c eb       	ldi	r16, 0xBC	; 188
    1fd8:	1f e0       	ldi	r17, 0x0F	; 15
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	34 e2       	ldi	r19, 0x24	; 36
    1fde:	44 ef       	ldi	r20, 0xF4	; 244
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	87 e2       	ldi	r24, 0x27	; 39
    1fe6:	7f d2       	rcall	.+1278   	; 0x24e6 <twiCreate>
    1fe8:	90 93 f2 12 	sts	0x12F2, r25	; 0x8012f2 <_hih8120Handler+0x1>
    1fec:	80 93 f1 12 	sts	0x12F1, r24	; 0x8012f1 <_hih8120Handler>
    1ff0:	21 e0       	ldi	r18, 0x01	; 1
    1ff2:	89 2b       	or	r24, r25
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <hih8120_create+0x26>
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	82 2f       	mov	r24, r18
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	08 95       	ret

00002000 <hih8120_getHumidity>:
    2000:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2004:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	0a d4       	rcall	.+2068   	; 0x2822 <__floatunsisf>
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	48 ec       	ldi	r20, 0xC8	; 200
    2014:	52 e4       	ldi	r21, 0x42	; 66
    2016:	93 d4       	rcall	.+2342   	; 0x293e <__mulsf3>
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	38 ef       	ldi	r19, 0xF8	; 248
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	56 e4       	ldi	r21, 0x46	; 70
    2020:	6c c3       	rjmp	.+1752   	; 0x26fa <__divsf3>
    2022:	08 95       	ret

00002024 <hih8120_getHumidityPercent_x10>:
    2024:	ed df       	rcall	.-38     	; 0x2000 <hih8120_getHumidity>
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	87 d4       	rcall	.+2318   	; 0x293e <__mulsf3>
    2030:	cc d3       	rcall	.+1944   	; 0x27ca <__fixunssfsi>
    2032:	cb 01       	movw	r24, r22
    2034:	08 95       	ret

00002036 <__vector_25>:
    2036:	1f 92       	push	r1
    2038:	0f 92       	push	r0
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	0f 92       	push	r0
    203e:	11 24       	eor	r1, r1
    2040:	0b b6       	in	r0, 0x3b	; 59
    2042:	0f 92       	push	r0
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	4f 93       	push	r20
    204a:	5f 93       	push	r21
    204c:	6f 93       	push	r22
    204e:	7f 93       	push	r23
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	af 93       	push	r26
    2056:	bf 93       	push	r27
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	ef 93       	push	r30
    205e:	ff 93       	push	r31
    2060:	a0 91 f3 12 	lds	r26, 0x12F3	; 0x8012f3 <_ser_handle>
    2064:	b0 91 f4 12 	lds	r27, 0x12F4	; 0x8012f4 <_ser_handle+0x1>
    2068:	10 97       	sbiw	r26, 0x00	; 0
    206a:	11 f1       	breq	.+68     	; 0x20b0 <__vector_25+0x7a>
    206c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2070:	14 96       	adiw	r26, 0x04	; 4
    2072:	ed 91       	ld	r30, X+
    2074:	fc 91       	ld	r31, X
    2076:	15 97       	sbiw	r26, 0x05	; 5
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	25 81       	ldd	r18, Z+5	; 0x05
    207e:	98 1b       	sub	r25, r24
    2080:	92 23       	and	r25, r18
    2082:	84 81       	ldd	r24, Z+4	; 0x04
    2084:	98 17       	cp	r25, r24
    2086:	61 f0       	breq	.+24     	; 0x20a0 <__vector_25+0x6a>
    2088:	83 81       	ldd	r24, Z+3	; 0x03
    208a:	26 95       	lsr	r18
    208c:	28 23       	and	r18, r24
    208e:	c0 81       	ld	r28, Z
    2090:	d1 81       	ldd	r29, Z+1	; 0x01
    2092:	c2 0f       	add	r28, r18
    2094:	d1 1d       	adc	r29, r1
    2096:	68 83       	st	Y, r22
    2098:	8f 5f       	subi	r24, 0xFF	; 255
    209a:	95 81       	ldd	r25, Z+5	; 0x05
    209c:	89 23       	and	r24, r25
    209e:	83 83       	std	Z+3, r24	; 0x03
    20a0:	16 96       	adiw	r26, 0x06	; 6
    20a2:	ed 91       	ld	r30, X+
    20a4:	fc 91       	ld	r31, X
    20a6:	17 97       	sbiw	r26, 0x07	; 7
    20a8:	30 97       	sbiw	r30, 0x00	; 0
    20aa:	11 f0       	breq	.+4      	; 0x20b0 <__vector_25+0x7a>
    20ac:	cd 01       	movw	r24, r26
    20ae:	19 95       	eicall
    20b0:	ff 91       	pop	r31
    20b2:	ef 91       	pop	r30
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	bf 91       	pop	r27
    20ba:	af 91       	pop	r26
    20bc:	9f 91       	pop	r25
    20be:	8f 91       	pop	r24
    20c0:	7f 91       	pop	r23
    20c2:	6f 91       	pop	r22
    20c4:	5f 91       	pop	r21
    20c6:	4f 91       	pop	r20
    20c8:	3f 91       	pop	r19
    20ca:	2f 91       	pop	r18
    20cc:	0f 90       	pop	r0
    20ce:	0b be       	out	0x3b, r0	; 59
    20d0:	0f 90       	pop	r0
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	0f 90       	pop	r0
    20d6:	1f 90       	pop	r1
    20d8:	18 95       	reti

000020da <__vector_26>:
    20da:	1f 92       	push	r1
    20dc:	0f 92       	push	r0
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	0f 92       	push	r0
    20e2:	11 24       	eor	r1, r1
    20e4:	0b b6       	in	r0, 0x3b	; 59
    20e6:	0f 92       	push	r0
    20e8:	2f 93       	push	r18
    20ea:	8f 93       	push	r24
    20ec:	9f 93       	push	r25
    20ee:	af 93       	push	r26
    20f0:	bf 93       	push	r27
    20f2:	ef 93       	push	r30
    20f4:	ff 93       	push	r31
    20f6:	e0 91 f3 12 	lds	r30, 0x12F3	; 0x8012f3 <_ser_handle>
    20fa:	f0 91 f4 12 	lds	r31, 0x12F4	; 0x8012f4 <_ser_handle+0x1>
    20fe:	30 97       	sbiw	r30, 0x00	; 0
    2100:	b9 f0       	breq	.+46     	; 0x2130 <__vector_26+0x56>
    2102:	02 80       	ldd	r0, Z+2	; 0x02
    2104:	f3 81       	ldd	r31, Z+3	; 0x03
    2106:	e0 2d       	mov	r30, r0
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	98 17       	cp	r25, r24
    210e:	b1 f0       	breq	.+44     	; 0x213c <__vector_26+0x62>
    2110:	92 81       	ldd	r25, Z+2	; 0x02
    2112:	85 81       	ldd	r24, Z+5	; 0x05
    2114:	28 2f       	mov	r18, r24
    2116:	26 95       	lsr	r18
    2118:	29 23       	and	r18, r25
    211a:	a0 81       	ld	r26, Z
    211c:	b1 81       	ldd	r27, Z+1	; 0x01
    211e:	a2 0f       	add	r26, r18
    2120:	b1 1d       	adc	r27, r1
    2122:	2c 91       	ld	r18, X
    2124:	9f 5f       	subi	r25, 0xFF	; 255
    2126:	89 23       	and	r24, r25
    2128:	82 83       	std	Z+2, r24	; 0x02
    212a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    212e:	0b c0       	rjmp	.+22     	; 0x2146 <__vector_26+0x6c>
    2130:	e1 ec       	ldi	r30, 0xC1	; 193
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8f 7d       	andi	r24, 0xDF	; 223
    2138:	80 83       	st	Z, r24
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <__vector_26+0x6c>
    213c:	e1 ec       	ldi	r30, 0xC1	; 193
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8f 7d       	andi	r24, 0xDF	; 223
    2144:	80 83       	st	Z, r24
    2146:	ff 91       	pop	r31
    2148:	ef 91       	pop	r30
    214a:	bf 91       	pop	r27
    214c:	af 91       	pop	r26
    214e:	9f 91       	pop	r25
    2150:	8f 91       	pop	r24
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0b be       	out	0x3b, r0	; 59
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	0f 90       	pop	r0
    215e:	1f 90       	pop	r1
    2160:	18 95       	reti

00002162 <__vector_36>:
    2162:	1f 92       	push	r1
    2164:	0f 92       	push	r0
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	0f 92       	push	r0
    216a:	11 24       	eor	r1, r1
    216c:	0b b6       	in	r0, 0x3b	; 59
    216e:	0f 92       	push	r0
    2170:	2f 93       	push	r18
    2172:	3f 93       	push	r19
    2174:	4f 93       	push	r20
    2176:	5f 93       	push	r21
    2178:	6f 93       	push	r22
    217a:	7f 93       	push	r23
    217c:	8f 93       	push	r24
    217e:	9f 93       	push	r25
    2180:	af 93       	push	r26
    2182:	bf 93       	push	r27
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ef 93       	push	r30
    218a:	ff 93       	push	r31
    218c:	a0 91 f5 12 	lds	r26, 0x12F5	; 0x8012f5 <_ser_handle+0x2>
    2190:	b0 91 f6 12 	lds	r27, 0x12F6	; 0x8012f6 <_ser_handle+0x3>
    2194:	10 97       	sbiw	r26, 0x00	; 0
    2196:	11 f1       	breq	.+68     	; 0x21dc <__vector_36+0x7a>
    2198:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    219c:	14 96       	adiw	r26, 0x04	; 4
    219e:	ed 91       	ld	r30, X+
    21a0:	fc 91       	ld	r31, X
    21a2:	15 97       	sbiw	r26, 0x05	; 5
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	25 81       	ldd	r18, Z+5	; 0x05
    21aa:	98 1b       	sub	r25, r24
    21ac:	92 23       	and	r25, r18
    21ae:	84 81       	ldd	r24, Z+4	; 0x04
    21b0:	98 17       	cp	r25, r24
    21b2:	61 f0       	breq	.+24     	; 0x21cc <__vector_36+0x6a>
    21b4:	83 81       	ldd	r24, Z+3	; 0x03
    21b6:	26 95       	lsr	r18
    21b8:	28 23       	and	r18, r24
    21ba:	c0 81       	ld	r28, Z
    21bc:	d1 81       	ldd	r29, Z+1	; 0x01
    21be:	c2 0f       	add	r28, r18
    21c0:	d1 1d       	adc	r29, r1
    21c2:	68 83       	st	Y, r22
    21c4:	8f 5f       	subi	r24, 0xFF	; 255
    21c6:	95 81       	ldd	r25, Z+5	; 0x05
    21c8:	89 23       	and	r24, r25
    21ca:	83 83       	std	Z+3, r24	; 0x03
    21cc:	16 96       	adiw	r26, 0x06	; 6
    21ce:	ed 91       	ld	r30, X+
    21d0:	fc 91       	ld	r31, X
    21d2:	17 97       	sbiw	r26, 0x07	; 7
    21d4:	30 97       	sbiw	r30, 0x00	; 0
    21d6:	11 f0       	breq	.+4      	; 0x21dc <__vector_36+0x7a>
    21d8:	cd 01       	movw	r24, r26
    21da:	19 95       	eicall
    21dc:	ff 91       	pop	r31
    21de:	ef 91       	pop	r30
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	7f 91       	pop	r23
    21ee:	6f 91       	pop	r22
    21f0:	5f 91       	pop	r21
    21f2:	4f 91       	pop	r20
    21f4:	3f 91       	pop	r19
    21f6:	2f 91       	pop	r18
    21f8:	0f 90       	pop	r0
    21fa:	0b be       	out	0x3b, r0	; 59
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <__vector_37>:
    2206:	1f 92       	push	r1
    2208:	0f 92       	push	r0
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	0f 92       	push	r0
    220e:	11 24       	eor	r1, r1
    2210:	0b b6       	in	r0, 0x3b	; 59
    2212:	0f 92       	push	r0
    2214:	2f 93       	push	r18
    2216:	8f 93       	push	r24
    2218:	9f 93       	push	r25
    221a:	af 93       	push	r26
    221c:	bf 93       	push	r27
    221e:	ef 93       	push	r30
    2220:	ff 93       	push	r31
    2222:	e0 91 f5 12 	lds	r30, 0x12F5	; 0x8012f5 <_ser_handle+0x2>
    2226:	f0 91 f6 12 	lds	r31, 0x12F6	; 0x8012f6 <_ser_handle+0x3>
    222a:	30 97       	sbiw	r30, 0x00	; 0
    222c:	b9 f0       	breq	.+46     	; 0x225c <__vector_37+0x56>
    222e:	02 80       	ldd	r0, Z+2	; 0x02
    2230:	f3 81       	ldd	r31, Z+3	; 0x03
    2232:	e0 2d       	mov	r30, r0
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	98 17       	cp	r25, r24
    223a:	b1 f0       	breq	.+44     	; 0x2268 <__vector_37+0x62>
    223c:	92 81       	ldd	r25, Z+2	; 0x02
    223e:	85 81       	ldd	r24, Z+5	; 0x05
    2240:	28 2f       	mov	r18, r24
    2242:	26 95       	lsr	r18
    2244:	29 23       	and	r18, r25
    2246:	a0 81       	ld	r26, Z
    2248:	b1 81       	ldd	r27, Z+1	; 0x01
    224a:	a2 0f       	add	r26, r18
    224c:	b1 1d       	adc	r27, r1
    224e:	2c 91       	ld	r18, X
    2250:	9f 5f       	subi	r25, 0xFF	; 255
    2252:	89 23       	and	r24, r25
    2254:	82 83       	std	Z+2, r24	; 0x02
    2256:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    225a:	0b c0       	rjmp	.+22     	; 0x2272 <__vector_37+0x6c>
    225c:	e9 ec       	ldi	r30, 0xC9	; 201
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	8f 7d       	andi	r24, 0xDF	; 223
    2264:	80 83       	st	Z, r24
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <__vector_37+0x6c>
    2268:	e9 ec       	ldi	r30, 0xC9	; 201
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	8f 7d       	andi	r24, 0xDF	; 223
    2270:	80 83       	st	Z, r24
    2272:	ff 91       	pop	r31
    2274:	ef 91       	pop	r30
    2276:	bf 91       	pop	r27
    2278:	af 91       	pop	r26
    227a:	9f 91       	pop	r25
    227c:	8f 91       	pop	r24
    227e:	2f 91       	pop	r18
    2280:	0f 90       	pop	r0
    2282:	0b be       	out	0x3b, r0	; 59
    2284:	0f 90       	pop	r0
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	0f 90       	pop	r0
    228a:	1f 90       	pop	r1
    228c:	18 95       	reti

0000228e <__vector_51>:
    228e:	1f 92       	push	r1
    2290:	0f 92       	push	r0
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	0f 92       	push	r0
    2296:	11 24       	eor	r1, r1
    2298:	0b b6       	in	r0, 0x3b	; 59
    229a:	0f 92       	push	r0
    229c:	2f 93       	push	r18
    229e:	3f 93       	push	r19
    22a0:	4f 93       	push	r20
    22a2:	5f 93       	push	r21
    22a4:	6f 93       	push	r22
    22a6:	7f 93       	push	r23
    22a8:	8f 93       	push	r24
    22aa:	9f 93       	push	r25
    22ac:	af 93       	push	r26
    22ae:	bf 93       	push	r27
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	ef 93       	push	r30
    22b6:	ff 93       	push	r31
    22b8:	a0 91 f7 12 	lds	r26, 0x12F7	; 0x8012f7 <_ser_handle+0x4>
    22bc:	b0 91 f8 12 	lds	r27, 0x12F8	; 0x8012f8 <_ser_handle+0x5>
    22c0:	10 97       	sbiw	r26, 0x00	; 0
    22c2:	11 f1       	breq	.+68     	; 0x2308 <__vector_51+0x7a>
    22c4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    22c8:	14 96       	adiw	r26, 0x04	; 4
    22ca:	ed 91       	ld	r30, X+
    22cc:	fc 91       	ld	r31, X
    22ce:	15 97       	sbiw	r26, 0x05	; 5
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	25 81       	ldd	r18, Z+5	; 0x05
    22d6:	98 1b       	sub	r25, r24
    22d8:	92 23       	and	r25, r18
    22da:	84 81       	ldd	r24, Z+4	; 0x04
    22dc:	98 17       	cp	r25, r24
    22de:	61 f0       	breq	.+24     	; 0x22f8 <__vector_51+0x6a>
    22e0:	83 81       	ldd	r24, Z+3	; 0x03
    22e2:	26 95       	lsr	r18
    22e4:	28 23       	and	r18, r24
    22e6:	c0 81       	ld	r28, Z
    22e8:	d1 81       	ldd	r29, Z+1	; 0x01
    22ea:	c2 0f       	add	r28, r18
    22ec:	d1 1d       	adc	r29, r1
    22ee:	68 83       	st	Y, r22
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	95 81       	ldd	r25, Z+5	; 0x05
    22f4:	89 23       	and	r24, r25
    22f6:	83 83       	std	Z+3, r24	; 0x03
    22f8:	16 96       	adiw	r26, 0x06	; 6
    22fa:	ed 91       	ld	r30, X+
    22fc:	fc 91       	ld	r31, X
    22fe:	17 97       	sbiw	r26, 0x07	; 7
    2300:	30 97       	sbiw	r30, 0x00	; 0
    2302:	11 f0       	breq	.+4      	; 0x2308 <__vector_51+0x7a>
    2304:	cd 01       	movw	r24, r26
    2306:	19 95       	eicall
    2308:	ff 91       	pop	r31
    230a:	ef 91       	pop	r30
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	bf 91       	pop	r27
    2312:	af 91       	pop	r26
    2314:	9f 91       	pop	r25
    2316:	8f 91       	pop	r24
    2318:	7f 91       	pop	r23
    231a:	6f 91       	pop	r22
    231c:	5f 91       	pop	r21
    231e:	4f 91       	pop	r20
    2320:	3f 91       	pop	r19
    2322:	2f 91       	pop	r18
    2324:	0f 90       	pop	r0
    2326:	0b be       	out	0x3b, r0	; 59
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	0f 90       	pop	r0
    232e:	1f 90       	pop	r1
    2330:	18 95       	reti

00002332 <__vector_52>:
    2332:	1f 92       	push	r1
    2334:	0f 92       	push	r0
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	0f 92       	push	r0
    233a:	11 24       	eor	r1, r1
    233c:	0b b6       	in	r0, 0x3b	; 59
    233e:	0f 92       	push	r0
    2340:	2f 93       	push	r18
    2342:	8f 93       	push	r24
    2344:	9f 93       	push	r25
    2346:	af 93       	push	r26
    2348:	bf 93       	push	r27
    234a:	ef 93       	push	r30
    234c:	ff 93       	push	r31
    234e:	e0 91 f7 12 	lds	r30, 0x12F7	; 0x8012f7 <_ser_handle+0x4>
    2352:	f0 91 f8 12 	lds	r31, 0x12F8	; 0x8012f8 <_ser_handle+0x5>
    2356:	30 97       	sbiw	r30, 0x00	; 0
    2358:	b9 f0       	breq	.+46     	; 0x2388 <__vector_52+0x56>
    235a:	02 80       	ldd	r0, Z+2	; 0x02
    235c:	f3 81       	ldd	r31, Z+3	; 0x03
    235e:	e0 2d       	mov	r30, r0
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	98 17       	cp	r25, r24
    2366:	b1 f0       	breq	.+44     	; 0x2394 <__vector_52+0x62>
    2368:	92 81       	ldd	r25, Z+2	; 0x02
    236a:	85 81       	ldd	r24, Z+5	; 0x05
    236c:	28 2f       	mov	r18, r24
    236e:	26 95       	lsr	r18
    2370:	29 23       	and	r18, r25
    2372:	a0 81       	ld	r26, Z
    2374:	b1 81       	ldd	r27, Z+1	; 0x01
    2376:	a2 0f       	add	r26, r18
    2378:	b1 1d       	adc	r27, r1
    237a:	2c 91       	ld	r18, X
    237c:	9f 5f       	subi	r25, 0xFF	; 255
    237e:	89 23       	and	r24, r25
    2380:	82 83       	std	Z+2, r24	; 0x02
    2382:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2386:	0b c0       	rjmp	.+22     	; 0x239e <__vector_52+0x6c>
    2388:	e1 ed       	ldi	r30, 0xD1	; 209
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	8f 7d       	andi	r24, 0xDF	; 223
    2390:	80 83       	st	Z, r24
    2392:	05 c0       	rjmp	.+10     	; 0x239e <__vector_52+0x6c>
    2394:	e1 ed       	ldi	r30, 0xD1	; 209
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 7d       	andi	r24, 0xDF	; 223
    239c:	80 83       	st	Z, r24
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	2f 91       	pop	r18
    23ac:	0f 90       	pop	r0
    23ae:	0b be       	out	0x3b, r0	; 59
    23b0:	0f 90       	pop	r0
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	0f 90       	pop	r0
    23b6:	1f 90       	pop	r1
    23b8:	18 95       	reti

000023ba <__vector_54>:
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	0b b6       	in	r0, 0x3b	; 59
    23c6:	0f 92       	push	r0
    23c8:	2f 93       	push	r18
    23ca:	3f 93       	push	r19
    23cc:	4f 93       	push	r20
    23ce:	5f 93       	push	r21
    23d0:	6f 93       	push	r22
    23d2:	7f 93       	push	r23
    23d4:	8f 93       	push	r24
    23d6:	9f 93       	push	r25
    23d8:	af 93       	push	r26
    23da:	bf 93       	push	r27
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ef 93       	push	r30
    23e2:	ff 93       	push	r31
    23e4:	a0 91 f9 12 	lds	r26, 0x12F9	; 0x8012f9 <_ser_handle+0x6>
    23e8:	b0 91 fa 12 	lds	r27, 0x12FA	; 0x8012fa <_ser_handle+0x7>
    23ec:	10 97       	sbiw	r26, 0x00	; 0
    23ee:	11 f1       	breq	.+68     	; 0x2434 <__vector_54+0x7a>
    23f0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    23f4:	14 96       	adiw	r26, 0x04	; 4
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	15 97       	sbiw	r26, 0x05	; 5
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	82 81       	ldd	r24, Z+2	; 0x02
    2400:	25 81       	ldd	r18, Z+5	; 0x05
    2402:	98 1b       	sub	r25, r24
    2404:	92 23       	and	r25, r18
    2406:	84 81       	ldd	r24, Z+4	; 0x04
    2408:	98 17       	cp	r25, r24
    240a:	61 f0       	breq	.+24     	; 0x2424 <__vector_54+0x6a>
    240c:	83 81       	ldd	r24, Z+3	; 0x03
    240e:	26 95       	lsr	r18
    2410:	28 23       	and	r18, r24
    2412:	c0 81       	ld	r28, Z
    2414:	d1 81       	ldd	r29, Z+1	; 0x01
    2416:	c2 0f       	add	r28, r18
    2418:	d1 1d       	adc	r29, r1
    241a:	68 83       	st	Y, r22
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	95 81       	ldd	r25, Z+5	; 0x05
    2420:	89 23       	and	r24, r25
    2422:	83 83       	std	Z+3, r24	; 0x03
    2424:	16 96       	adiw	r26, 0x06	; 6
    2426:	ed 91       	ld	r30, X+
    2428:	fc 91       	ld	r31, X
    242a:	17 97       	sbiw	r26, 0x07	; 7
    242c:	30 97       	sbiw	r30, 0x00	; 0
    242e:	11 f0       	breq	.+4      	; 0x2434 <__vector_54+0x7a>
    2430:	cd 01       	movw	r24, r26
    2432:	19 95       	eicall
    2434:	ff 91       	pop	r31
    2436:	ef 91       	pop	r30
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	bf 91       	pop	r27
    243e:	af 91       	pop	r26
    2440:	9f 91       	pop	r25
    2442:	8f 91       	pop	r24
    2444:	7f 91       	pop	r23
    2446:	6f 91       	pop	r22
    2448:	5f 91       	pop	r21
    244a:	4f 91       	pop	r20
    244c:	3f 91       	pop	r19
    244e:	2f 91       	pop	r18
    2450:	0f 90       	pop	r0
    2452:	0b be       	out	0x3b, r0	; 59
    2454:	0f 90       	pop	r0
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	0f 90       	pop	r0
    245a:	1f 90       	pop	r1
    245c:	18 95       	reti

0000245e <__vector_55>:
    245e:	1f 92       	push	r1
    2460:	0f 92       	push	r0
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	0f 92       	push	r0
    2466:	11 24       	eor	r1, r1
    2468:	0b b6       	in	r0, 0x3b	; 59
    246a:	0f 92       	push	r0
    246c:	2f 93       	push	r18
    246e:	8f 93       	push	r24
    2470:	9f 93       	push	r25
    2472:	af 93       	push	r26
    2474:	bf 93       	push	r27
    2476:	ef 93       	push	r30
    2478:	ff 93       	push	r31
    247a:	e0 91 f9 12 	lds	r30, 0x12F9	; 0x8012f9 <_ser_handle+0x6>
    247e:	f0 91 fa 12 	lds	r31, 0x12FA	; 0x8012fa <_ser_handle+0x7>
    2482:	30 97       	sbiw	r30, 0x00	; 0
    2484:	b9 f0       	breq	.+46     	; 0x24b4 <__vector_55+0x56>
    2486:	02 80       	ldd	r0, Z+2	; 0x02
    2488:	f3 81       	ldd	r31, Z+3	; 0x03
    248a:	e0 2d       	mov	r30, r0
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	98 17       	cp	r25, r24
    2492:	b1 f0       	breq	.+44     	; 0x24c0 <__vector_55+0x62>
    2494:	92 81       	ldd	r25, Z+2	; 0x02
    2496:	85 81       	ldd	r24, Z+5	; 0x05
    2498:	28 2f       	mov	r18, r24
    249a:	26 95       	lsr	r18
    249c:	29 23       	and	r18, r25
    249e:	a0 81       	ld	r26, Z
    24a0:	b1 81       	ldd	r27, Z+1	; 0x01
    24a2:	a2 0f       	add	r26, r18
    24a4:	b1 1d       	adc	r27, r1
    24a6:	2c 91       	ld	r18, X
    24a8:	9f 5f       	subi	r25, 0xFF	; 255
    24aa:	89 23       	and	r24, r25
    24ac:	82 83       	std	Z+2, r24	; 0x02
    24ae:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    24b2:	0b c0       	rjmp	.+22     	; 0x24ca <__vector_55+0x6c>
    24b4:	e1 e3       	ldi	r30, 0x31	; 49
    24b6:	f1 e0       	ldi	r31, 0x01	; 1
    24b8:	80 81       	ld	r24, Z
    24ba:	8f 7d       	andi	r24, 0xDF	; 223
    24bc:	80 83       	st	Z, r24
    24be:	05 c0       	rjmp	.+10     	; 0x24ca <__vector_55+0x6c>
    24c0:	e1 e3       	ldi	r30, 0x31	; 49
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 7d       	andi	r24, 0xDF	; 223
    24c8:	80 83       	st	Z, r24
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	2f 91       	pop	r18
    24d8:	0f 90       	pop	r0
    24da:	0b be       	out	0x3b, r0	; 59
    24dc:	0f 90       	pop	r0
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	0f 90       	pop	r0
    24e2:	1f 90       	pop	r1
    24e4:	18 95       	reti

000024e6 <twiCreate>:
    24e6:	af 92       	push	r10
    24e8:	bf 92       	push	r11
    24ea:	cf 92       	push	r12
    24ec:	df 92       	push	r13
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	a8 2e       	mov	r10, r24
    24fc:	b6 2e       	mov	r11, r22
    24fe:	69 01       	movw	r12, r18
    2500:	7a 01       	movw	r14, r20
    2502:	84 e0       	ldi	r24, 0x04	; 4
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a8 d2       	rcall	.+1360   	; 0x2a58 <malloc>
    2508:	ec 01       	movw	r28, r24
    250a:	89 2b       	or	r24, r25
    250c:	61 f1       	breq	.+88     	; 0x2566 <twiCreate+0x80>
    250e:	a8 82       	st	Y, r10
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	b8 12       	cpse	r11, r24
    2514:	12 c0       	rjmp	.+36     	; 0x253a <twiCreate+0x54>
    2516:	c7 01       	movw	r24, r14
    2518:	b6 01       	movw	r22, r12
    251a:	20 ea       	ldi	r18, 0xA0	; 160
    251c:	36 e8       	ldi	r19, 0x86	; 134
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	70 d2       	rcall	.+1248   	; 0x2a04 <__udivmodsi4>
    2524:	da 01       	movw	r26, r20
    2526:	c9 01       	movw	r24, r18
    2528:	40 97       	sbiw	r24, 0x10	; 16
    252a:	a1 09       	sbc	r26, r1
    252c:	b1 09       	sbc	r27, r1
    252e:	b6 95       	lsr	r27
    2530:	a7 95       	ror	r26
    2532:	97 95       	ror	r25
    2534:	87 95       	ror	r24
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	11 c0       	rjmp	.+34     	; 0x255c <twiCreate+0x76>
    253a:	c7 01       	movw	r24, r14
    253c:	b6 01       	movw	r22, r12
    253e:	20 e8       	ldi	r18, 0x80	; 128
    2540:	3a e1       	ldi	r19, 0x1A	; 26
    2542:	46 e0       	ldi	r20, 0x06	; 6
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	5e d2       	rcall	.+1212   	; 0x2a04 <__udivmodsi4>
    2548:	da 01       	movw	r26, r20
    254a:	c9 01       	movw	r24, r18
    254c:	40 97       	sbiw	r24, 0x10	; 16
    254e:	a1 09       	sbc	r26, r1
    2550:	b1 09       	sbc	r27, r1
    2552:	b6 95       	lsr	r27
    2554:	a7 95       	ror	r26
    2556:	97 95       	ror	r25
    2558:	87 95       	ror	r24
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	1b 83       	std	Y+3, r17	; 0x03
    255e:	0a 83       	std	Y+2, r16	; 0x02
    2560:	8c 2f       	mov	r24, r28
    2562:	9d 2f       	mov	r25, r29
    2564:	02 c0       	rjmp	.+4      	; 0x256a <twiCreate+0x84>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	ef 90       	pop	r14
    2576:	df 90       	pop	r13
    2578:	cf 90       	pop	r12
    257a:	bf 90       	pop	r11
    257c:	af 90       	pop	r10
    257e:	08 95       	ret

00002580 <__vector_39>:
    2580:	1f 92       	push	r1
    2582:	0f 92       	push	r0
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	0f 92       	push	r0
    2588:	11 24       	eor	r1, r1
    258a:	0b b6       	in	r0, 0x3b	; 59
    258c:	0f 92       	push	r0
    258e:	2f 93       	push	r18
    2590:	3f 93       	push	r19
    2592:	4f 93       	push	r20
    2594:	5f 93       	push	r21
    2596:	6f 93       	push	r22
    2598:	7f 93       	push	r23
    259a:	8f 93       	push	r24
    259c:	9f 93       	push	r25
    259e:	af 93       	push	r26
    25a0:	bf 93       	push	r27
    25a2:	ef 93       	push	r30
    25a4:	ff 93       	push	r31
    25a6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    25aa:	8e 2f       	mov	r24, r30
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	fc 01       	movw	r30, r24
    25b0:	38 97       	sbiw	r30, 0x08	; 8
    25b2:	e1 35       	cpi	r30, 0x51	; 81
    25b4:	f1 05       	cpc	r31, r1
    25b6:	08 f0       	brcs	.+2      	; 0x25ba <__vector_39+0x3a>
    25b8:	75 c0       	rjmp	.+234    	; 0x26a4 <__vector_39+0x124>
    25ba:	88 27       	eor	r24, r24
    25bc:	e4 58       	subi	r30, 0x84	; 132
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	8f 4f       	sbci	r24, 0xFF	; 255
    25c2:	42 c2       	rjmp	.+1156   	; 0x2a48 <__tablejump2__>
    25c4:	10 92 fb 12 	sts	0x12FB, r1	; 0x8012fb <_index.1885>
    25c8:	e0 91 fb 12 	lds	r30, 0x12FB	; 0x8012fb <_index.1885>
    25cc:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <_twiMessageLen>
    25d0:	e8 17       	cp	r30, r24
    25d2:	70 f4       	brcc	.+28     	; 0x25f0 <__vector_39+0x70>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	8e 0f       	add	r24, r30
    25d8:	80 93 fb 12 	sts	0x12FB, r24	; 0x8012fb <_index.1885>
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	e1 50       	subi	r30, 0x01	; 1
    25e0:	fd 4e       	sbci	r31, 0xED	; 237
    25e2:	80 81       	ld	r24, Z
    25e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    25e8:	85 e8       	ldi	r24, 0x85	; 133
    25ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    25ee:	72 c0       	rjmp	.+228    	; 0x26d4 <__vector_39+0x154>
    25f0:	84 e9       	ldi	r24, 0x94	; 148
    25f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    25f6:	80 91 fc 12 	lds	r24, 0x12FC	; 0x8012fc <_twiCurrentHandler>
    25fa:	90 91 fd 12 	lds	r25, 0x12FD	; 0x8012fd <_twiCurrentHandler+0x1>
    25fe:	dc 01       	movw	r26, r24
    2600:	12 96       	adiw	r26, 0x02	; 2
    2602:	ed 91       	ld	r30, X+
    2604:	fc 91       	ld	r31, X
    2606:	13 97       	sbiw	r26, 0x03	; 3
    2608:	30 97       	sbiw	r30, 0x00	; 0
    260a:	09 f4       	brne	.+2      	; 0x260e <__vector_39+0x8e>
    260c:	63 c0       	rjmp	.+198    	; 0x26d4 <__vector_39+0x154>
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	64 e0       	ldi	r22, 0x04	; 4
    2616:	19 95       	eicall
    2618:	5d c0       	rjmp	.+186    	; 0x26d4 <__vector_39+0x154>
    261a:	e0 91 fb 12 	lds	r30, 0x12FB	; 0x8012fb <_index.1885>
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	8e 0f       	add	r24, r30
    2622:	80 93 fb 12 	sts	0x12FB, r24	; 0x8012fb <_index.1885>
    2626:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	e1 50       	subi	r30, 0x01	; 1
    262e:	fd 4e       	sbci	r31, 0xED	; 237
    2630:	80 83       	st	Z, r24
    2632:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2636:	80 34       	cpi	r24, 0x40	; 64
    2638:	11 f4       	brne	.+4      	; 0x263e <__vector_39+0xbe>
    263a:	10 92 fb 12 	sts	0x12FB, r1	; 0x8012fb <_index.1885>
    263e:	20 91 fb 12 	lds	r18, 0x12FB	; 0x8012fb <_index.1885>
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <_twiMessageLen>
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	28 17       	cp	r18, r24
    264e:	39 07       	cpc	r19, r25
    2650:	24 f4       	brge	.+8      	; 0x265a <__vector_39+0xda>
    2652:	85 ec       	ldi	r24, 0xC5	; 197
    2654:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2658:	3d c0       	rjmp	.+122    	; 0x26d4 <__vector_39+0x154>
    265a:	85 e8       	ldi	r24, 0x85	; 133
    265c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2660:	39 c0       	rjmp	.+114    	; 0x26d4 <__vector_39+0x154>
    2662:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2666:	e0 91 fb 12 	lds	r30, 0x12FB	; 0x8012fb <_index.1885>
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	e1 50       	subi	r30, 0x01	; 1
    266e:	fd 4e       	sbci	r31, 0xED	; 237
    2670:	80 83       	st	Z, r24
    2672:	84 e9       	ldi	r24, 0x94	; 148
    2674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2678:	80 91 fc 12 	lds	r24, 0x12FC	; 0x8012fc <_twiCurrentHandler>
    267c:	90 91 fd 12 	lds	r25, 0x12FD	; 0x8012fd <_twiCurrentHandler+0x1>
    2680:	dc 01       	movw	r26, r24
    2682:	12 96       	adiw	r26, 0x02	; 2
    2684:	ed 91       	ld	r30, X+
    2686:	fc 91       	ld	r31, X
    2688:	13 97       	sbiw	r26, 0x03	; 3
    268a:	30 97       	sbiw	r30, 0x00	; 0
    268c:	19 f1       	breq	.+70     	; 0x26d4 <__vector_39+0x154>
    268e:	20 91 fe 12 	lds	r18, 0x12FE	; 0x8012fe <_twiMessageLen>
    2692:	4f ef       	ldi	r20, 0xFF	; 255
    2694:	52 e1       	ldi	r21, 0x12	; 18
    2696:	65 e0       	ldi	r22, 0x05	; 5
    2698:	19 95       	eicall
    269a:	1c c0       	rjmp	.+56     	; 0x26d4 <__vector_39+0x154>
    269c:	85 ea       	ldi	r24, 0xA5	; 165
    269e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26a2:	18 c0       	rjmp	.+48     	; 0x26d4 <__vector_39+0x154>
    26a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    26a8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_twiCurrentState>
    26ac:	84 e0       	ldi	r24, 0x04	; 4
    26ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26b2:	80 91 fc 12 	lds	r24, 0x12FC	; 0x8012fc <_twiCurrentHandler>
    26b6:	90 91 fd 12 	lds	r25, 0x12FD	; 0x8012fd <_twiCurrentHandler+0x1>
    26ba:	dc 01       	movw	r26, r24
    26bc:	12 96       	adiw	r26, 0x02	; 2
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	13 97       	sbiw	r26, 0x03	; 3
    26c4:	30 97       	sbiw	r30, 0x00	; 0
    26c6:	31 f0       	breq	.+12     	; 0x26d4 <__vector_39+0x154>
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_twiCurrentState>
    26d2:	19 95       	eicall
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	0f 90       	pop	r0
    26ee:	0b be       	out	0x3b, r0	; 59
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <__divsf3>:
    26fa:	0c d0       	rcall	.+24     	; 0x2714 <__divsf3x>
    26fc:	e6 c0       	rjmp	.+460    	; 0x28ca <__fp_round>
    26fe:	de d0       	rcall	.+444    	; 0x28bc <__fp_pscB>
    2700:	40 f0       	brcs	.+16     	; 0x2712 <__divsf3+0x18>
    2702:	d5 d0       	rcall	.+426    	; 0x28ae <__fp_pscA>
    2704:	30 f0       	brcs	.+12     	; 0x2712 <__divsf3+0x18>
    2706:	21 f4       	brne	.+8      	; 0x2710 <__divsf3+0x16>
    2708:	5f 3f       	cpi	r21, 0xFF	; 255
    270a:	19 f0       	breq	.+6      	; 0x2712 <__divsf3+0x18>
    270c:	c7 c0       	rjmp	.+398    	; 0x289c <__fp_inf>
    270e:	51 11       	cpse	r21, r1
    2710:	10 c1       	rjmp	.+544    	; 0x2932 <__fp_szero>
    2712:	ca c0       	rjmp	.+404    	; 0x28a8 <__fp_nan>

00002714 <__divsf3x>:
    2714:	eb d0       	rcall	.+470    	; 0x28ec <__fp_split3>
    2716:	98 f3       	brcs	.-26     	; 0x26fe <__divsf3+0x4>

00002718 <__divsf3_pse>:
    2718:	99 23       	and	r25, r25
    271a:	c9 f3       	breq	.-14     	; 0x270e <__divsf3+0x14>
    271c:	55 23       	and	r21, r21
    271e:	b1 f3       	breq	.-20     	; 0x270c <__divsf3+0x12>
    2720:	95 1b       	sub	r25, r21
    2722:	55 0b       	sbc	r21, r21
    2724:	bb 27       	eor	r27, r27
    2726:	aa 27       	eor	r26, r26
    2728:	62 17       	cp	r22, r18
    272a:	73 07       	cpc	r23, r19
    272c:	84 07       	cpc	r24, r20
    272e:	38 f0       	brcs	.+14     	; 0x273e <__divsf3_pse+0x26>
    2730:	9f 5f       	subi	r25, 0xFF	; 255
    2732:	5f 4f       	sbci	r21, 0xFF	; 255
    2734:	22 0f       	add	r18, r18
    2736:	33 1f       	adc	r19, r19
    2738:	44 1f       	adc	r20, r20
    273a:	aa 1f       	adc	r26, r26
    273c:	a9 f3       	breq	.-22     	; 0x2728 <__divsf3_pse+0x10>
    273e:	33 d0       	rcall	.+102    	; 0x27a6 <__divsf3_pse+0x8e>
    2740:	0e 2e       	mov	r0, r30
    2742:	3a f0       	brmi	.+14     	; 0x2752 <__divsf3_pse+0x3a>
    2744:	e0 e8       	ldi	r30, 0x80	; 128
    2746:	30 d0       	rcall	.+96     	; 0x27a8 <__divsf3_pse+0x90>
    2748:	91 50       	subi	r25, 0x01	; 1
    274a:	50 40       	sbci	r21, 0x00	; 0
    274c:	e6 95       	lsr	r30
    274e:	00 1c       	adc	r0, r0
    2750:	ca f7       	brpl	.-14     	; 0x2744 <__divsf3_pse+0x2c>
    2752:	29 d0       	rcall	.+82     	; 0x27a6 <__divsf3_pse+0x8e>
    2754:	fe 2f       	mov	r31, r30
    2756:	27 d0       	rcall	.+78     	; 0x27a6 <__divsf3_pse+0x8e>
    2758:	66 0f       	add	r22, r22
    275a:	77 1f       	adc	r23, r23
    275c:	88 1f       	adc	r24, r24
    275e:	bb 1f       	adc	r27, r27
    2760:	26 17       	cp	r18, r22
    2762:	37 07       	cpc	r19, r23
    2764:	48 07       	cpc	r20, r24
    2766:	ab 07       	cpc	r26, r27
    2768:	b0 e8       	ldi	r27, 0x80	; 128
    276a:	09 f0       	breq	.+2      	; 0x276e <__divsf3_pse+0x56>
    276c:	bb 0b       	sbc	r27, r27
    276e:	80 2d       	mov	r24, r0
    2770:	bf 01       	movw	r22, r30
    2772:	ff 27       	eor	r31, r31
    2774:	93 58       	subi	r25, 0x83	; 131
    2776:	5f 4f       	sbci	r21, 0xFF	; 255
    2778:	2a f0       	brmi	.+10     	; 0x2784 <__divsf3_pse+0x6c>
    277a:	9e 3f       	cpi	r25, 0xFE	; 254
    277c:	51 05       	cpc	r21, r1
    277e:	68 f0       	brcs	.+26     	; 0x279a <__divsf3_pse+0x82>
    2780:	8d c0       	rjmp	.+282    	; 0x289c <__fp_inf>
    2782:	d7 c0       	rjmp	.+430    	; 0x2932 <__fp_szero>
    2784:	5f 3f       	cpi	r21, 0xFF	; 255
    2786:	ec f3       	brlt	.-6      	; 0x2782 <__divsf3_pse+0x6a>
    2788:	98 3e       	cpi	r25, 0xE8	; 232
    278a:	dc f3       	brlt	.-10     	; 0x2782 <__divsf3_pse+0x6a>
    278c:	86 95       	lsr	r24
    278e:	77 95       	ror	r23
    2790:	67 95       	ror	r22
    2792:	b7 95       	ror	r27
    2794:	f7 95       	ror	r31
    2796:	9f 5f       	subi	r25, 0xFF	; 255
    2798:	c9 f7       	brne	.-14     	; 0x278c <__divsf3_pse+0x74>
    279a:	88 0f       	add	r24, r24
    279c:	91 1d       	adc	r25, r1
    279e:	96 95       	lsr	r25
    27a0:	87 95       	ror	r24
    27a2:	97 f9       	bld	r25, 7
    27a4:	08 95       	ret
    27a6:	e1 e0       	ldi	r30, 0x01	; 1
    27a8:	66 0f       	add	r22, r22
    27aa:	77 1f       	adc	r23, r23
    27ac:	88 1f       	adc	r24, r24
    27ae:	bb 1f       	adc	r27, r27
    27b0:	62 17       	cp	r22, r18
    27b2:	73 07       	cpc	r23, r19
    27b4:	84 07       	cpc	r24, r20
    27b6:	ba 07       	cpc	r27, r26
    27b8:	20 f0       	brcs	.+8      	; 0x27c2 <__divsf3_pse+0xaa>
    27ba:	62 1b       	sub	r22, r18
    27bc:	73 0b       	sbc	r23, r19
    27be:	84 0b       	sbc	r24, r20
    27c0:	ba 0b       	sbc	r27, r26
    27c2:	ee 1f       	adc	r30, r30
    27c4:	88 f7       	brcc	.-30     	; 0x27a8 <__divsf3_pse+0x90>
    27c6:	e0 95       	com	r30
    27c8:	08 95       	ret

000027ca <__fixunssfsi>:
    27ca:	98 d0       	rcall	.+304    	; 0x28fc <__fp_splitA>
    27cc:	88 f0       	brcs	.+34     	; 0x27f0 <__fixunssfsi+0x26>
    27ce:	9f 57       	subi	r25, 0x7F	; 127
    27d0:	90 f0       	brcs	.+36     	; 0x27f6 <__fixunssfsi+0x2c>
    27d2:	b9 2f       	mov	r27, r25
    27d4:	99 27       	eor	r25, r25
    27d6:	b7 51       	subi	r27, 0x17	; 23
    27d8:	a0 f0       	brcs	.+40     	; 0x2802 <__fixunssfsi+0x38>
    27da:	d1 f0       	breq	.+52     	; 0x2810 <__fixunssfsi+0x46>
    27dc:	66 0f       	add	r22, r22
    27de:	77 1f       	adc	r23, r23
    27e0:	88 1f       	adc	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	1a f0       	brmi	.+6      	; 0x27ec <__fixunssfsi+0x22>
    27e6:	ba 95       	dec	r27
    27e8:	c9 f7       	brne	.-14     	; 0x27dc <__fixunssfsi+0x12>
    27ea:	12 c0       	rjmp	.+36     	; 0x2810 <__fixunssfsi+0x46>
    27ec:	b1 30       	cpi	r27, 0x01	; 1
    27ee:	81 f0       	breq	.+32     	; 0x2810 <__fixunssfsi+0x46>
    27f0:	9f d0       	rcall	.+318    	; 0x2930 <__fp_zero>
    27f2:	b1 e0       	ldi	r27, 0x01	; 1
    27f4:	08 95       	ret
    27f6:	9c c0       	rjmp	.+312    	; 0x2930 <__fp_zero>
    27f8:	67 2f       	mov	r22, r23
    27fa:	78 2f       	mov	r23, r24
    27fc:	88 27       	eor	r24, r24
    27fe:	b8 5f       	subi	r27, 0xF8	; 248
    2800:	39 f0       	breq	.+14     	; 0x2810 <__fixunssfsi+0x46>
    2802:	b9 3f       	cpi	r27, 0xF9	; 249
    2804:	cc f3       	brlt	.-14     	; 0x27f8 <__fixunssfsi+0x2e>
    2806:	86 95       	lsr	r24
    2808:	77 95       	ror	r23
    280a:	67 95       	ror	r22
    280c:	b3 95       	inc	r27
    280e:	d9 f7       	brne	.-10     	; 0x2806 <__fixunssfsi+0x3c>
    2810:	3e f4       	brtc	.+14     	; 0x2820 <__fixunssfsi+0x56>
    2812:	90 95       	com	r25
    2814:	80 95       	com	r24
    2816:	70 95       	com	r23
    2818:	61 95       	neg	r22
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	8f 4f       	sbci	r24, 0xFF	; 255
    281e:	9f 4f       	sbci	r25, 0xFF	; 255
    2820:	08 95       	ret

00002822 <__floatunsisf>:
    2822:	e8 94       	clt
    2824:	09 c0       	rjmp	.+18     	; 0x2838 <__floatsisf+0x12>

00002826 <__floatsisf>:
    2826:	97 fb       	bst	r25, 7
    2828:	3e f4       	brtc	.+14     	; 0x2838 <__floatsisf+0x12>
    282a:	90 95       	com	r25
    282c:	80 95       	com	r24
    282e:	70 95       	com	r23
    2830:	61 95       	neg	r22
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	8f 4f       	sbci	r24, 0xFF	; 255
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	99 23       	and	r25, r25
    283a:	a9 f0       	breq	.+42     	; 0x2866 <__floatsisf+0x40>
    283c:	f9 2f       	mov	r31, r25
    283e:	96 e9       	ldi	r25, 0x96	; 150
    2840:	bb 27       	eor	r27, r27
    2842:	93 95       	inc	r25
    2844:	f6 95       	lsr	r31
    2846:	87 95       	ror	r24
    2848:	77 95       	ror	r23
    284a:	67 95       	ror	r22
    284c:	b7 95       	ror	r27
    284e:	f1 11       	cpse	r31, r1
    2850:	f8 cf       	rjmp	.-16     	; 0x2842 <__floatsisf+0x1c>
    2852:	fa f4       	brpl	.+62     	; 0x2892 <__floatsisf+0x6c>
    2854:	bb 0f       	add	r27, r27
    2856:	11 f4       	brne	.+4      	; 0x285c <__floatsisf+0x36>
    2858:	60 ff       	sbrs	r22, 0
    285a:	1b c0       	rjmp	.+54     	; 0x2892 <__floatsisf+0x6c>
    285c:	6f 5f       	subi	r22, 0xFF	; 255
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	16 c0       	rjmp	.+44     	; 0x2892 <__floatsisf+0x6c>
    2866:	88 23       	and	r24, r24
    2868:	11 f0       	breq	.+4      	; 0x286e <__floatsisf+0x48>
    286a:	96 e9       	ldi	r25, 0x96	; 150
    286c:	11 c0       	rjmp	.+34     	; 0x2890 <__floatsisf+0x6a>
    286e:	77 23       	and	r23, r23
    2870:	21 f0       	breq	.+8      	; 0x287a <__floatsisf+0x54>
    2872:	9e e8       	ldi	r25, 0x8E	; 142
    2874:	87 2f       	mov	r24, r23
    2876:	76 2f       	mov	r23, r22
    2878:	05 c0       	rjmp	.+10     	; 0x2884 <__floatsisf+0x5e>
    287a:	66 23       	and	r22, r22
    287c:	71 f0       	breq	.+28     	; 0x289a <__floatsisf+0x74>
    287e:	96 e8       	ldi	r25, 0x86	; 134
    2880:	86 2f       	mov	r24, r22
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	2a f0       	brmi	.+10     	; 0x2892 <__floatsisf+0x6c>
    2888:	9a 95       	dec	r25
    288a:	66 0f       	add	r22, r22
    288c:	77 1f       	adc	r23, r23
    288e:	88 1f       	adc	r24, r24
    2890:	da f7       	brpl	.-10     	; 0x2888 <__floatsisf+0x62>
    2892:	88 0f       	add	r24, r24
    2894:	96 95       	lsr	r25
    2896:	87 95       	ror	r24
    2898:	97 f9       	bld	r25, 7
    289a:	08 95       	ret

0000289c <__fp_inf>:
    289c:	97 f9       	bld	r25, 7
    289e:	9f 67       	ori	r25, 0x7F	; 127
    28a0:	80 e8       	ldi	r24, 0x80	; 128
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	08 95       	ret

000028a8 <__fp_nan>:
    28a8:	9f ef       	ldi	r25, 0xFF	; 255
    28aa:	80 ec       	ldi	r24, 0xC0	; 192
    28ac:	08 95       	ret

000028ae <__fp_pscA>:
    28ae:	00 24       	eor	r0, r0
    28b0:	0a 94       	dec	r0
    28b2:	16 16       	cp	r1, r22
    28b4:	17 06       	cpc	r1, r23
    28b6:	18 06       	cpc	r1, r24
    28b8:	09 06       	cpc	r0, r25
    28ba:	08 95       	ret

000028bc <__fp_pscB>:
    28bc:	00 24       	eor	r0, r0
    28be:	0a 94       	dec	r0
    28c0:	12 16       	cp	r1, r18
    28c2:	13 06       	cpc	r1, r19
    28c4:	14 06       	cpc	r1, r20
    28c6:	05 06       	cpc	r0, r21
    28c8:	08 95       	ret

000028ca <__fp_round>:
    28ca:	09 2e       	mov	r0, r25
    28cc:	03 94       	inc	r0
    28ce:	00 0c       	add	r0, r0
    28d0:	11 f4       	brne	.+4      	; 0x28d6 <__fp_round+0xc>
    28d2:	88 23       	and	r24, r24
    28d4:	52 f0       	brmi	.+20     	; 0x28ea <__fp_round+0x20>
    28d6:	bb 0f       	add	r27, r27
    28d8:	40 f4       	brcc	.+16     	; 0x28ea <__fp_round+0x20>
    28da:	bf 2b       	or	r27, r31
    28dc:	11 f4       	brne	.+4      	; 0x28e2 <__fp_round+0x18>
    28de:	60 ff       	sbrs	r22, 0
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <__fp_round+0x20>
    28e2:	6f 5f       	subi	r22, 0xFF	; 255
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	8f 4f       	sbci	r24, 0xFF	; 255
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	08 95       	ret

000028ec <__fp_split3>:
    28ec:	57 fd       	sbrc	r21, 7
    28ee:	90 58       	subi	r25, 0x80	; 128
    28f0:	44 0f       	add	r20, r20
    28f2:	55 1f       	adc	r21, r21
    28f4:	59 f0       	breq	.+22     	; 0x290c <__fp_splitA+0x10>
    28f6:	5f 3f       	cpi	r21, 0xFF	; 255
    28f8:	71 f0       	breq	.+28     	; 0x2916 <__fp_splitA+0x1a>
    28fa:	47 95       	ror	r20

000028fc <__fp_splitA>:
    28fc:	88 0f       	add	r24, r24
    28fe:	97 fb       	bst	r25, 7
    2900:	99 1f       	adc	r25, r25
    2902:	61 f0       	breq	.+24     	; 0x291c <__fp_splitA+0x20>
    2904:	9f 3f       	cpi	r25, 0xFF	; 255
    2906:	79 f0       	breq	.+30     	; 0x2926 <__fp_splitA+0x2a>
    2908:	87 95       	ror	r24
    290a:	08 95       	ret
    290c:	12 16       	cp	r1, r18
    290e:	13 06       	cpc	r1, r19
    2910:	14 06       	cpc	r1, r20
    2912:	55 1f       	adc	r21, r21
    2914:	f2 cf       	rjmp	.-28     	; 0x28fa <__fp_split3+0xe>
    2916:	46 95       	lsr	r20
    2918:	f1 df       	rcall	.-30     	; 0x28fc <__fp_splitA>
    291a:	08 c0       	rjmp	.+16     	; 0x292c <__fp_splitA+0x30>
    291c:	16 16       	cp	r1, r22
    291e:	17 06       	cpc	r1, r23
    2920:	18 06       	cpc	r1, r24
    2922:	99 1f       	adc	r25, r25
    2924:	f1 cf       	rjmp	.-30     	; 0x2908 <__fp_splitA+0xc>
    2926:	86 95       	lsr	r24
    2928:	71 05       	cpc	r23, r1
    292a:	61 05       	cpc	r22, r1
    292c:	08 94       	sec
    292e:	08 95       	ret

00002930 <__fp_zero>:
    2930:	e8 94       	clt

00002932 <__fp_szero>:
    2932:	bb 27       	eor	r27, r27
    2934:	66 27       	eor	r22, r22
    2936:	77 27       	eor	r23, r23
    2938:	cb 01       	movw	r24, r22
    293a:	97 f9       	bld	r25, 7
    293c:	08 95       	ret

0000293e <__mulsf3>:
    293e:	0b d0       	rcall	.+22     	; 0x2956 <__mulsf3x>
    2940:	c4 cf       	rjmp	.-120    	; 0x28ca <__fp_round>
    2942:	b5 df       	rcall	.-150    	; 0x28ae <__fp_pscA>
    2944:	28 f0       	brcs	.+10     	; 0x2950 <__mulsf3+0x12>
    2946:	ba df       	rcall	.-140    	; 0x28bc <__fp_pscB>
    2948:	18 f0       	brcs	.+6      	; 0x2950 <__mulsf3+0x12>
    294a:	95 23       	and	r25, r21
    294c:	09 f0       	breq	.+2      	; 0x2950 <__mulsf3+0x12>
    294e:	a6 cf       	rjmp	.-180    	; 0x289c <__fp_inf>
    2950:	ab cf       	rjmp	.-170    	; 0x28a8 <__fp_nan>
    2952:	11 24       	eor	r1, r1
    2954:	ee cf       	rjmp	.-36     	; 0x2932 <__fp_szero>

00002956 <__mulsf3x>:
    2956:	ca df       	rcall	.-108    	; 0x28ec <__fp_split3>
    2958:	a0 f3       	brcs	.-24     	; 0x2942 <__mulsf3+0x4>

0000295a <__mulsf3_pse>:
    295a:	95 9f       	mul	r25, r21
    295c:	d1 f3       	breq	.-12     	; 0x2952 <__mulsf3+0x14>
    295e:	95 0f       	add	r25, r21
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	55 1f       	adc	r21, r21
    2964:	62 9f       	mul	r22, r18
    2966:	f0 01       	movw	r30, r0
    2968:	72 9f       	mul	r23, r18
    296a:	bb 27       	eor	r27, r27
    296c:	f0 0d       	add	r31, r0
    296e:	b1 1d       	adc	r27, r1
    2970:	63 9f       	mul	r22, r19
    2972:	aa 27       	eor	r26, r26
    2974:	f0 0d       	add	r31, r0
    2976:	b1 1d       	adc	r27, r1
    2978:	aa 1f       	adc	r26, r26
    297a:	64 9f       	mul	r22, r20
    297c:	66 27       	eor	r22, r22
    297e:	b0 0d       	add	r27, r0
    2980:	a1 1d       	adc	r26, r1
    2982:	66 1f       	adc	r22, r22
    2984:	82 9f       	mul	r24, r18
    2986:	22 27       	eor	r18, r18
    2988:	b0 0d       	add	r27, r0
    298a:	a1 1d       	adc	r26, r1
    298c:	62 1f       	adc	r22, r18
    298e:	73 9f       	mul	r23, r19
    2990:	b0 0d       	add	r27, r0
    2992:	a1 1d       	adc	r26, r1
    2994:	62 1f       	adc	r22, r18
    2996:	83 9f       	mul	r24, r19
    2998:	a0 0d       	add	r26, r0
    299a:	61 1d       	adc	r22, r1
    299c:	22 1f       	adc	r18, r18
    299e:	74 9f       	mul	r23, r20
    29a0:	33 27       	eor	r19, r19
    29a2:	a0 0d       	add	r26, r0
    29a4:	61 1d       	adc	r22, r1
    29a6:	23 1f       	adc	r18, r19
    29a8:	84 9f       	mul	r24, r20
    29aa:	60 0d       	add	r22, r0
    29ac:	21 1d       	adc	r18, r1
    29ae:	82 2f       	mov	r24, r18
    29b0:	76 2f       	mov	r23, r22
    29b2:	6a 2f       	mov	r22, r26
    29b4:	11 24       	eor	r1, r1
    29b6:	9f 57       	subi	r25, 0x7F	; 127
    29b8:	50 40       	sbci	r21, 0x00	; 0
    29ba:	8a f0       	brmi	.+34     	; 0x29de <__mulsf3_pse+0x84>
    29bc:	e1 f0       	breq	.+56     	; 0x29f6 <__mulsf3_pse+0x9c>
    29be:	88 23       	and	r24, r24
    29c0:	4a f0       	brmi	.+18     	; 0x29d4 <__mulsf3_pse+0x7a>
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	bb 1f       	adc	r27, r27
    29c8:	66 1f       	adc	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 1f       	adc	r24, r24
    29ce:	91 50       	subi	r25, 0x01	; 1
    29d0:	50 40       	sbci	r21, 0x00	; 0
    29d2:	a9 f7       	brne	.-22     	; 0x29be <__mulsf3_pse+0x64>
    29d4:	9e 3f       	cpi	r25, 0xFE	; 254
    29d6:	51 05       	cpc	r21, r1
    29d8:	70 f0       	brcs	.+28     	; 0x29f6 <__mulsf3_pse+0x9c>
    29da:	60 cf       	rjmp	.-320    	; 0x289c <__fp_inf>
    29dc:	aa cf       	rjmp	.-172    	; 0x2932 <__fp_szero>
    29de:	5f 3f       	cpi	r21, 0xFF	; 255
    29e0:	ec f3       	brlt	.-6      	; 0x29dc <__mulsf3_pse+0x82>
    29e2:	98 3e       	cpi	r25, 0xE8	; 232
    29e4:	dc f3       	brlt	.-10     	; 0x29dc <__mulsf3_pse+0x82>
    29e6:	86 95       	lsr	r24
    29e8:	77 95       	ror	r23
    29ea:	67 95       	ror	r22
    29ec:	b7 95       	ror	r27
    29ee:	f7 95       	ror	r31
    29f0:	e7 95       	ror	r30
    29f2:	9f 5f       	subi	r25, 0xFF	; 255
    29f4:	c1 f7       	brne	.-16     	; 0x29e6 <__mulsf3_pse+0x8c>
    29f6:	fe 2b       	or	r31, r30
    29f8:	88 0f       	add	r24, r24
    29fa:	91 1d       	adc	r25, r1
    29fc:	96 95       	lsr	r25
    29fe:	87 95       	ror	r24
    2a00:	97 f9       	bld	r25, 7
    2a02:	08 95       	ret

00002a04 <__udivmodsi4>:
    2a04:	a1 e2       	ldi	r26, 0x21	; 33
    2a06:	1a 2e       	mov	r1, r26
    2a08:	aa 1b       	sub	r26, r26
    2a0a:	bb 1b       	sub	r27, r27
    2a0c:	fd 01       	movw	r30, r26
    2a0e:	0d c0       	rjmp	.+26     	; 0x2a2a <__udivmodsi4_ep>

00002a10 <__udivmodsi4_loop>:
    2a10:	aa 1f       	adc	r26, r26
    2a12:	bb 1f       	adc	r27, r27
    2a14:	ee 1f       	adc	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	a2 17       	cp	r26, r18
    2a1a:	b3 07       	cpc	r27, r19
    2a1c:	e4 07       	cpc	r30, r20
    2a1e:	f5 07       	cpc	r31, r21
    2a20:	20 f0       	brcs	.+8      	; 0x2a2a <__udivmodsi4_ep>
    2a22:	a2 1b       	sub	r26, r18
    2a24:	b3 0b       	sbc	r27, r19
    2a26:	e4 0b       	sbc	r30, r20
    2a28:	f5 0b       	sbc	r31, r21

00002a2a <__udivmodsi4_ep>:
    2a2a:	66 1f       	adc	r22, r22
    2a2c:	77 1f       	adc	r23, r23
    2a2e:	88 1f       	adc	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	1a 94       	dec	r1
    2a34:	69 f7       	brne	.-38     	; 0x2a10 <__udivmodsi4_loop>
    2a36:	60 95       	com	r22
    2a38:	70 95       	com	r23
    2a3a:	80 95       	com	r24
    2a3c:	90 95       	com	r25
    2a3e:	9b 01       	movw	r18, r22
    2a40:	ac 01       	movw	r20, r24
    2a42:	bd 01       	movw	r22, r26
    2a44:	cf 01       	movw	r24, r30
    2a46:	08 95       	ret

00002a48 <__tablejump2__>:
    2a48:	ee 0f       	add	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	88 1f       	adc	r24, r24
    2a4e:	8b bf       	out	0x3b, r24	; 59
    2a50:	07 90       	elpm	r0, Z+
    2a52:	f6 91       	elpm	r31, Z
    2a54:	e0 2d       	mov	r30, r0
    2a56:	19 94       	eijmp

00002a58 <malloc>:
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	82 30       	cpi	r24, 0x02	; 2
    2a62:	91 05       	cpc	r25, r1
    2a64:	10 f4       	brcc	.+4      	; 0x2a6a <malloc+0x12>
    2a66:	82 e0       	ldi	r24, 0x02	; 2
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	e0 91 0b 13 	lds	r30, 0x130B	; 0x80130b <__flp>
    2a6e:	f0 91 0c 13 	lds	r31, 0x130C	; 0x80130c <__flp+0x1>
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	a0 e0       	ldi	r26, 0x00	; 0
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	30 97       	sbiw	r30, 0x00	; 0
    2a7c:	19 f1       	breq	.+70     	; 0x2ac4 <malloc+0x6c>
    2a7e:	40 81       	ld	r20, Z
    2a80:	51 81       	ldd	r21, Z+1	; 0x01
    2a82:	02 81       	ldd	r16, Z+2	; 0x02
    2a84:	13 81       	ldd	r17, Z+3	; 0x03
    2a86:	48 17       	cp	r20, r24
    2a88:	59 07       	cpc	r21, r25
    2a8a:	c8 f0       	brcs	.+50     	; 0x2abe <malloc+0x66>
    2a8c:	84 17       	cp	r24, r20
    2a8e:	95 07       	cpc	r25, r21
    2a90:	69 f4       	brne	.+26     	; 0x2aac <malloc+0x54>
    2a92:	10 97       	sbiw	r26, 0x00	; 0
    2a94:	31 f0       	breq	.+12     	; 0x2aa2 <malloc+0x4a>
    2a96:	12 96       	adiw	r26, 0x02	; 2
    2a98:	0c 93       	st	X, r16
    2a9a:	12 97       	sbiw	r26, 0x02	; 2
    2a9c:	13 96       	adiw	r26, 0x03	; 3
    2a9e:	1c 93       	st	X, r17
    2aa0:	27 c0       	rjmp	.+78     	; 0x2af0 <malloc+0x98>
    2aa2:	00 93 0b 13 	sts	0x130B, r16	; 0x80130b <__flp>
    2aa6:	10 93 0c 13 	sts	0x130C, r17	; 0x80130c <__flp+0x1>
    2aaa:	22 c0       	rjmp	.+68     	; 0x2af0 <malloc+0x98>
    2aac:	21 15       	cp	r18, r1
    2aae:	31 05       	cpc	r19, r1
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <malloc+0x60>
    2ab2:	42 17       	cp	r20, r18
    2ab4:	53 07       	cpc	r21, r19
    2ab6:	18 f4       	brcc	.+6      	; 0x2abe <malloc+0x66>
    2ab8:	9a 01       	movw	r18, r20
    2aba:	bd 01       	movw	r22, r26
    2abc:	ef 01       	movw	r28, r30
    2abe:	df 01       	movw	r26, r30
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	db cf       	rjmp	.-74     	; 0x2a7a <malloc+0x22>
    2ac4:	21 15       	cp	r18, r1
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	f9 f0       	breq	.+62     	; 0x2b08 <malloc+0xb0>
    2aca:	28 1b       	sub	r18, r24
    2acc:	39 0b       	sbc	r19, r25
    2ace:	24 30       	cpi	r18, 0x04	; 4
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	80 f4       	brcc	.+32     	; 0x2af4 <malloc+0x9c>
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad8:	61 15       	cp	r22, r1
    2ada:	71 05       	cpc	r23, r1
    2adc:	21 f0       	breq	.+8      	; 0x2ae6 <malloc+0x8e>
    2ade:	fb 01       	movw	r30, r22
    2ae0:	93 83       	std	Z+3, r25	; 0x03
    2ae2:	82 83       	std	Z+2, r24	; 0x02
    2ae4:	04 c0       	rjmp	.+8      	; 0x2aee <malloc+0x96>
    2ae6:	90 93 0c 13 	sts	0x130C, r25	; 0x80130c <__flp+0x1>
    2aea:	80 93 0b 13 	sts	0x130B, r24	; 0x80130b <__flp>
    2aee:	fe 01       	movw	r30, r28
    2af0:	32 96       	adiw	r30, 0x02	; 2
    2af2:	44 c0       	rjmp	.+136    	; 0x2b7c <malloc+0x124>
    2af4:	fe 01       	movw	r30, r28
    2af6:	e2 0f       	add	r30, r18
    2af8:	f3 1f       	adc	r31, r19
    2afa:	81 93       	st	Z+, r24
    2afc:	91 93       	st	Z+, r25
    2afe:	22 50       	subi	r18, 0x02	; 2
    2b00:	31 09       	sbc	r19, r1
    2b02:	39 83       	std	Y+1, r19	; 0x01
    2b04:	28 83       	st	Y, r18
    2b06:	3a c0       	rjmp	.+116    	; 0x2b7c <malloc+0x124>
    2b08:	20 91 09 13 	lds	r18, 0x1309	; 0x801309 <__brkval>
    2b0c:	30 91 0a 13 	lds	r19, 0x130A	; 0x80130a <__brkval+0x1>
    2b10:	23 2b       	or	r18, r19
    2b12:	41 f4       	brne	.+16     	; 0x2b24 <malloc+0xcc>
    2b14:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2b18:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2b1c:	30 93 0a 13 	sts	0x130A, r19	; 0x80130a <__brkval+0x1>
    2b20:	20 93 09 13 	sts	0x1309, r18	; 0x801309 <__brkval>
    2b24:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2b28:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2b2c:	21 15       	cp	r18, r1
    2b2e:	31 05       	cpc	r19, r1
    2b30:	41 f4       	brne	.+16     	; 0x2b42 <malloc+0xea>
    2b32:	2d b7       	in	r18, 0x3d	; 61
    2b34:	3e b7       	in	r19, 0x3e	; 62
    2b36:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2b3a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2b3e:	24 1b       	sub	r18, r20
    2b40:	35 0b       	sbc	r19, r21
    2b42:	e0 91 09 13 	lds	r30, 0x1309	; 0x801309 <__brkval>
    2b46:	f0 91 0a 13 	lds	r31, 0x130A	; 0x80130a <__brkval+0x1>
    2b4a:	e2 17       	cp	r30, r18
    2b4c:	f3 07       	cpc	r31, r19
    2b4e:	a0 f4       	brcc	.+40     	; 0x2b78 <malloc+0x120>
    2b50:	2e 1b       	sub	r18, r30
    2b52:	3f 0b       	sbc	r19, r31
    2b54:	28 17       	cp	r18, r24
    2b56:	39 07       	cpc	r19, r25
    2b58:	78 f0       	brcs	.+30     	; 0x2b78 <malloc+0x120>
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	4e 5f       	subi	r20, 0xFE	; 254
    2b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b60:	24 17       	cp	r18, r20
    2b62:	35 07       	cpc	r19, r21
    2b64:	48 f0       	brcs	.+18     	; 0x2b78 <malloc+0x120>
    2b66:	4e 0f       	add	r20, r30
    2b68:	5f 1f       	adc	r21, r31
    2b6a:	50 93 0a 13 	sts	0x130A, r21	; 0x80130a <__brkval+0x1>
    2b6e:	40 93 09 13 	sts	0x1309, r20	; 0x801309 <__brkval>
    2b72:	81 93       	st	Z+, r24
    2b74:	91 93       	st	Z+, r25
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <malloc+0x124>
    2b78:	e0 e0       	ldi	r30, 0x00	; 0
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	cf 01       	movw	r24, r30
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	08 95       	ret

00002b88 <free>:
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <free+0xa>
    2b90:	81 c0       	rjmp	.+258    	; 0x2c94 <free+0x10c>
    2b92:	fc 01       	movw	r30, r24
    2b94:	32 97       	sbiw	r30, 0x02	; 2
    2b96:	13 82       	std	Z+3, r1	; 0x03
    2b98:	12 82       	std	Z+2, r1	; 0x02
    2b9a:	a0 91 0b 13 	lds	r26, 0x130B	; 0x80130b <__flp>
    2b9e:	b0 91 0c 13 	lds	r27, 0x130C	; 0x80130c <__flp+0x1>
    2ba2:	10 97       	sbiw	r26, 0x00	; 0
    2ba4:	81 f4       	brne	.+32     	; 0x2bc6 <free+0x3e>
    2ba6:	20 81       	ld	r18, Z
    2ba8:	31 81       	ldd	r19, Z+1	; 0x01
    2baa:	82 0f       	add	r24, r18
    2bac:	93 1f       	adc	r25, r19
    2bae:	20 91 09 13 	lds	r18, 0x1309	; 0x801309 <__brkval>
    2bb2:	30 91 0a 13 	lds	r19, 0x130A	; 0x80130a <__brkval+0x1>
    2bb6:	28 17       	cp	r18, r24
    2bb8:	39 07       	cpc	r19, r25
    2bba:	51 f5       	brne	.+84     	; 0x2c10 <free+0x88>
    2bbc:	f0 93 0a 13 	sts	0x130A, r31	; 0x80130a <__brkval+0x1>
    2bc0:	e0 93 09 13 	sts	0x1309, r30	; 0x801309 <__brkval>
    2bc4:	67 c0       	rjmp	.+206    	; 0x2c94 <free+0x10c>
    2bc6:	ed 01       	movw	r28, r26
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	ce 17       	cp	r28, r30
    2bce:	df 07       	cpc	r29, r31
    2bd0:	40 f4       	brcc	.+16     	; 0x2be2 <free+0x5a>
    2bd2:	4a 81       	ldd	r20, Y+2	; 0x02
    2bd4:	5b 81       	ldd	r21, Y+3	; 0x03
    2bd6:	9e 01       	movw	r18, r28
    2bd8:	41 15       	cp	r20, r1
    2bda:	51 05       	cpc	r21, r1
    2bdc:	f1 f0       	breq	.+60     	; 0x2c1a <free+0x92>
    2bde:	ea 01       	movw	r28, r20
    2be0:	f5 cf       	rjmp	.-22     	; 0x2bcc <free+0x44>
    2be2:	d3 83       	std	Z+3, r29	; 0x03
    2be4:	c2 83       	std	Z+2, r28	; 0x02
    2be6:	40 81       	ld	r20, Z
    2be8:	51 81       	ldd	r21, Z+1	; 0x01
    2bea:	84 0f       	add	r24, r20
    2bec:	95 1f       	adc	r25, r21
    2bee:	c8 17       	cp	r28, r24
    2bf0:	d9 07       	cpc	r29, r25
    2bf2:	59 f4       	brne	.+22     	; 0x2c0a <free+0x82>
    2bf4:	88 81       	ld	r24, Y
    2bf6:	99 81       	ldd	r25, Y+1	; 0x01
    2bf8:	84 0f       	add	r24, r20
    2bfa:	95 1f       	adc	r25, r21
    2bfc:	02 96       	adiw	r24, 0x02	; 2
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	9b 81       	ldd	r25, Y+3	; 0x03
    2c06:	93 83       	std	Z+3, r25	; 0x03
    2c08:	82 83       	std	Z+2, r24	; 0x02
    2c0a:	21 15       	cp	r18, r1
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	29 f4       	brne	.+10     	; 0x2c1a <free+0x92>
    2c10:	f0 93 0c 13 	sts	0x130C, r31	; 0x80130c <__flp+0x1>
    2c14:	e0 93 0b 13 	sts	0x130B, r30	; 0x80130b <__flp>
    2c18:	3d c0       	rjmp	.+122    	; 0x2c94 <free+0x10c>
    2c1a:	e9 01       	movw	r28, r18
    2c1c:	fb 83       	std	Y+3, r31	; 0x03
    2c1e:	ea 83       	std	Y+2, r30	; 0x02
    2c20:	49 91       	ld	r20, Y+
    2c22:	59 91       	ld	r21, Y+
    2c24:	c4 0f       	add	r28, r20
    2c26:	d5 1f       	adc	r29, r21
    2c28:	ec 17       	cp	r30, r28
    2c2a:	fd 07       	cpc	r31, r29
    2c2c:	61 f4       	brne	.+24     	; 0x2c46 <free+0xbe>
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	84 0f       	add	r24, r20
    2c34:	95 1f       	adc	r25, r21
    2c36:	02 96       	adiw	r24, 0x02	; 2
    2c38:	e9 01       	movw	r28, r18
    2c3a:	99 83       	std	Y+1, r25	; 0x01
    2c3c:	88 83       	st	Y, r24
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	93 81       	ldd	r25, Z+3	; 0x03
    2c42:	9b 83       	std	Y+3, r25	; 0x03
    2c44:	8a 83       	std	Y+2, r24	; 0x02
    2c46:	e0 e0       	ldi	r30, 0x00	; 0
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	12 96       	adiw	r26, 0x02	; 2
    2c4c:	8d 91       	ld	r24, X+
    2c4e:	9c 91       	ld	r25, X
    2c50:	13 97       	sbiw	r26, 0x03	; 3
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	19 f0       	breq	.+6      	; 0x2c5c <free+0xd4>
    2c56:	fd 01       	movw	r30, r26
    2c58:	dc 01       	movw	r26, r24
    2c5a:	f7 cf       	rjmp	.-18     	; 0x2c4a <free+0xc2>
    2c5c:	8d 91       	ld	r24, X+
    2c5e:	9c 91       	ld	r25, X
    2c60:	11 97       	sbiw	r26, 0x01	; 1
    2c62:	9d 01       	movw	r18, r26
    2c64:	2e 5f       	subi	r18, 0xFE	; 254
    2c66:	3f 4f       	sbci	r19, 0xFF	; 255
    2c68:	82 0f       	add	r24, r18
    2c6a:	93 1f       	adc	r25, r19
    2c6c:	20 91 09 13 	lds	r18, 0x1309	; 0x801309 <__brkval>
    2c70:	30 91 0a 13 	lds	r19, 0x130A	; 0x80130a <__brkval+0x1>
    2c74:	28 17       	cp	r18, r24
    2c76:	39 07       	cpc	r19, r25
    2c78:	69 f4       	brne	.+26     	; 0x2c94 <free+0x10c>
    2c7a:	30 97       	sbiw	r30, 0x00	; 0
    2c7c:	29 f4       	brne	.+10     	; 0x2c88 <free+0x100>
    2c7e:	10 92 0c 13 	sts	0x130C, r1	; 0x80130c <__flp+0x1>
    2c82:	10 92 0b 13 	sts	0x130B, r1	; 0x80130b <__flp>
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <free+0x104>
    2c88:	13 82       	std	Z+3, r1	; 0x03
    2c8a:	12 82       	std	Z+2, r1	; 0x02
    2c8c:	b0 93 0a 13 	sts	0x130A, r27	; 0x80130a <__brkval+0x1>
    2c90:	a0 93 09 13 	sts	0x1309, r26	; 0x801309 <__brkval>
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

00002c9a <memcpy>:
    2c9a:	fb 01       	movw	r30, r22
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <memcpy+0xa>
    2ca0:	01 90       	ld	r0, Z+
    2ca2:	0d 92       	st	X+, r0
    2ca4:	41 50       	subi	r20, 0x01	; 1
    2ca6:	50 40       	sbci	r21, 0x00	; 0
    2ca8:	d8 f7       	brcc	.-10     	; 0x2ca0 <memcpy+0x6>
    2caa:	08 95       	ret

00002cac <memset>:
    2cac:	dc 01       	movw	r26, r24
    2cae:	01 c0       	rjmp	.+2      	; 0x2cb2 <memset+0x6>
    2cb0:	6d 93       	st	X+, r22
    2cb2:	41 50       	subi	r20, 0x01	; 1
    2cb4:	50 40       	sbci	r21, 0x00	; 0
    2cb6:	e0 f7       	brcc	.-8      	; 0x2cb0 <memset+0x4>
    2cb8:	08 95       	ret

00002cba <printf>:
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	ae 01       	movw	r20, r28
    2cc4:	4a 5f       	subi	r20, 0xFA	; 250
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc8:	fa 01       	movw	r30, r20
    2cca:	61 91       	ld	r22, Z+
    2ccc:	71 91       	ld	r23, Z+
    2cce:	af 01       	movw	r20, r30
    2cd0:	80 91 0f 13 	lds	r24, 0x130F	; 0x80130f <__iob+0x2>
    2cd4:	90 91 10 13 	lds	r25, 0x1310	; 0x801310 <__iob+0x3>
    2cd8:	33 d0       	rcall	.+102    	; 0x2d40 <vfprintf>
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	08 95       	ret

00002ce0 <puts>:
    2ce0:	0f 93       	push	r16
    2ce2:	1f 93       	push	r17
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	e0 91 0f 13 	lds	r30, 0x130F	; 0x80130f <__iob+0x2>
    2cec:	f0 91 10 13 	lds	r31, 0x1310	; 0x801310 <__iob+0x3>
    2cf0:	23 81       	ldd	r18, Z+3	; 0x03
    2cf2:	21 ff       	sbrs	r18, 1
    2cf4:	1b c0       	rjmp	.+54     	; 0x2d2c <puts+0x4c>
    2cf6:	8c 01       	movw	r16, r24
    2cf8:	d0 e0       	ldi	r29, 0x00	; 0
    2cfa:	c0 e0       	ldi	r28, 0x00	; 0
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	81 91       	ld	r24, Z+
    2d00:	8f 01       	movw	r16, r30
    2d02:	60 91 0f 13 	lds	r22, 0x130F	; 0x80130f <__iob+0x2>
    2d06:	70 91 10 13 	lds	r23, 0x1310	; 0x801310 <__iob+0x3>
    2d0a:	db 01       	movw	r26, r22
    2d0c:	18 96       	adiw	r26, 0x08	; 8
    2d0e:	ed 91       	ld	r30, X+
    2d10:	fc 91       	ld	r31, X
    2d12:	19 97       	sbiw	r26, 0x09	; 9
    2d14:	88 23       	and	r24, r24
    2d16:	31 f0       	breq	.+12     	; 0x2d24 <puts+0x44>
    2d18:	19 95       	eicall
    2d1a:	89 2b       	or	r24, r25
    2d1c:	79 f3       	breq	.-34     	; 0x2cfc <puts+0x1c>
    2d1e:	df ef       	ldi	r29, 0xFF	; 255
    2d20:	cf ef       	ldi	r28, 0xFF	; 255
    2d22:	ec cf       	rjmp	.-40     	; 0x2cfc <puts+0x1c>
    2d24:	8a e0       	ldi	r24, 0x0A	; 10
    2d26:	19 95       	eicall
    2d28:	89 2b       	or	r24, r25
    2d2a:	19 f0       	breq	.+6      	; 0x2d32 <puts+0x52>
    2d2c:	8f ef       	ldi	r24, 0xFF	; 255
    2d2e:	9f ef       	ldi	r25, 0xFF	; 255
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <puts+0x56>
    2d32:	8d 2f       	mov	r24, r29
    2d34:	9c 2f       	mov	r25, r28
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	08 95       	ret

00002d40 <vfprintf>:
    2d40:	2f 92       	push	r2
    2d42:	3f 92       	push	r3
    2d44:	4f 92       	push	r4
    2d46:	5f 92       	push	r5
    2d48:	6f 92       	push	r6
    2d4a:	7f 92       	push	r7
    2d4c:	8f 92       	push	r8
    2d4e:	9f 92       	push	r9
    2d50:	af 92       	push	r10
    2d52:	bf 92       	push	r11
    2d54:	cf 92       	push	r12
    2d56:	df 92       	push	r13
    2d58:	ef 92       	push	r14
    2d5a:	ff 92       	push	r15
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	2b 97       	sbiw	r28, 0x0b	; 11
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	6c 01       	movw	r12, r24
    2d76:	7b 01       	movw	r14, r22
    2d78:	8a 01       	movw	r16, r20
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	17 82       	std	Z+7, r1	; 0x07
    2d7e:	16 82       	std	Z+6, r1	; 0x06
    2d80:	83 81       	ldd	r24, Z+3	; 0x03
    2d82:	81 ff       	sbrs	r24, 1
    2d84:	bf c1       	rjmp	.+894    	; 0x3104 <vfprintf+0x3c4>
    2d86:	ce 01       	movw	r24, r28
    2d88:	01 96       	adiw	r24, 0x01	; 1
    2d8a:	3c 01       	movw	r6, r24
    2d8c:	f6 01       	movw	r30, r12
    2d8e:	93 81       	ldd	r25, Z+3	; 0x03
    2d90:	f7 01       	movw	r30, r14
    2d92:	93 fd       	sbrc	r25, 3
    2d94:	85 91       	lpm	r24, Z+
    2d96:	93 ff       	sbrs	r25, 3
    2d98:	81 91       	ld	r24, Z+
    2d9a:	7f 01       	movw	r14, r30
    2d9c:	88 23       	and	r24, r24
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <vfprintf+0x62>
    2da0:	ad c1       	rjmp	.+858    	; 0x30fc <vfprintf+0x3bc>
    2da2:	85 32       	cpi	r24, 0x25	; 37
    2da4:	39 f4       	brne	.+14     	; 0x2db4 <vfprintf+0x74>
    2da6:	93 fd       	sbrc	r25, 3
    2da8:	85 91       	lpm	r24, Z+
    2daa:	93 ff       	sbrs	r25, 3
    2dac:	81 91       	ld	r24, Z+
    2dae:	7f 01       	movw	r14, r30
    2db0:	85 32       	cpi	r24, 0x25	; 37
    2db2:	21 f4       	brne	.+8      	; 0x2dbc <vfprintf+0x7c>
    2db4:	b6 01       	movw	r22, r12
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	d6 d1       	rcall	.+940    	; 0x3166 <fputc>
    2dba:	e8 cf       	rjmp	.-48     	; 0x2d8c <vfprintf+0x4c>
    2dbc:	91 2c       	mov	r9, r1
    2dbe:	21 2c       	mov	r2, r1
    2dc0:	31 2c       	mov	r3, r1
    2dc2:	ff e1       	ldi	r31, 0x1F	; 31
    2dc4:	f3 15       	cp	r31, r3
    2dc6:	d8 f0       	brcs	.+54     	; 0x2dfe <vfprintf+0xbe>
    2dc8:	8b 32       	cpi	r24, 0x2B	; 43
    2dca:	79 f0       	breq	.+30     	; 0x2dea <vfprintf+0xaa>
    2dcc:	38 f4       	brcc	.+14     	; 0x2ddc <vfprintf+0x9c>
    2dce:	80 32       	cpi	r24, 0x20	; 32
    2dd0:	79 f0       	breq	.+30     	; 0x2df0 <vfprintf+0xb0>
    2dd2:	83 32       	cpi	r24, 0x23	; 35
    2dd4:	a1 f4       	brne	.+40     	; 0x2dfe <vfprintf+0xbe>
    2dd6:	23 2d       	mov	r18, r3
    2dd8:	20 61       	ori	r18, 0x10	; 16
    2dda:	1d c0       	rjmp	.+58     	; 0x2e16 <vfprintf+0xd6>
    2ddc:	8d 32       	cpi	r24, 0x2D	; 45
    2dde:	61 f0       	breq	.+24     	; 0x2df8 <vfprintf+0xb8>
    2de0:	80 33       	cpi	r24, 0x30	; 48
    2de2:	69 f4       	brne	.+26     	; 0x2dfe <vfprintf+0xbe>
    2de4:	23 2d       	mov	r18, r3
    2de6:	21 60       	ori	r18, 0x01	; 1
    2de8:	16 c0       	rjmp	.+44     	; 0x2e16 <vfprintf+0xd6>
    2dea:	83 2d       	mov	r24, r3
    2dec:	82 60       	ori	r24, 0x02	; 2
    2dee:	38 2e       	mov	r3, r24
    2df0:	e3 2d       	mov	r30, r3
    2df2:	e4 60       	ori	r30, 0x04	; 4
    2df4:	3e 2e       	mov	r3, r30
    2df6:	2a c0       	rjmp	.+84     	; 0x2e4c <vfprintf+0x10c>
    2df8:	f3 2d       	mov	r31, r3
    2dfa:	f8 60       	ori	r31, 0x08	; 8
    2dfc:	1d c0       	rjmp	.+58     	; 0x2e38 <vfprintf+0xf8>
    2dfe:	37 fc       	sbrc	r3, 7
    2e00:	2d c0       	rjmp	.+90     	; 0x2e5c <vfprintf+0x11c>
    2e02:	20 ed       	ldi	r18, 0xD0	; 208
    2e04:	28 0f       	add	r18, r24
    2e06:	2a 30       	cpi	r18, 0x0A	; 10
    2e08:	40 f0       	brcs	.+16     	; 0x2e1a <vfprintf+0xda>
    2e0a:	8e 32       	cpi	r24, 0x2E	; 46
    2e0c:	b9 f4       	brne	.+46     	; 0x2e3c <vfprintf+0xfc>
    2e0e:	36 fc       	sbrc	r3, 6
    2e10:	75 c1       	rjmp	.+746    	; 0x30fc <vfprintf+0x3bc>
    2e12:	23 2d       	mov	r18, r3
    2e14:	20 64       	ori	r18, 0x40	; 64
    2e16:	32 2e       	mov	r3, r18
    2e18:	19 c0       	rjmp	.+50     	; 0x2e4c <vfprintf+0x10c>
    2e1a:	36 fe       	sbrs	r3, 6
    2e1c:	06 c0       	rjmp	.+12     	; 0x2e2a <vfprintf+0xea>
    2e1e:	8a e0       	ldi	r24, 0x0A	; 10
    2e20:	98 9e       	mul	r9, r24
    2e22:	20 0d       	add	r18, r0
    2e24:	11 24       	eor	r1, r1
    2e26:	92 2e       	mov	r9, r18
    2e28:	11 c0       	rjmp	.+34     	; 0x2e4c <vfprintf+0x10c>
    2e2a:	ea e0       	ldi	r30, 0x0A	; 10
    2e2c:	2e 9e       	mul	r2, r30
    2e2e:	20 0d       	add	r18, r0
    2e30:	11 24       	eor	r1, r1
    2e32:	22 2e       	mov	r2, r18
    2e34:	f3 2d       	mov	r31, r3
    2e36:	f0 62       	ori	r31, 0x20	; 32
    2e38:	3f 2e       	mov	r3, r31
    2e3a:	08 c0       	rjmp	.+16     	; 0x2e4c <vfprintf+0x10c>
    2e3c:	8c 36       	cpi	r24, 0x6C	; 108
    2e3e:	21 f4       	brne	.+8      	; 0x2e48 <vfprintf+0x108>
    2e40:	83 2d       	mov	r24, r3
    2e42:	80 68       	ori	r24, 0x80	; 128
    2e44:	38 2e       	mov	r3, r24
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <vfprintf+0x10c>
    2e48:	88 36       	cpi	r24, 0x68	; 104
    2e4a:	41 f4       	brne	.+16     	; 0x2e5c <vfprintf+0x11c>
    2e4c:	f7 01       	movw	r30, r14
    2e4e:	93 fd       	sbrc	r25, 3
    2e50:	85 91       	lpm	r24, Z+
    2e52:	93 ff       	sbrs	r25, 3
    2e54:	81 91       	ld	r24, Z+
    2e56:	7f 01       	movw	r14, r30
    2e58:	81 11       	cpse	r24, r1
    2e5a:	b3 cf       	rjmp	.-154    	; 0x2dc2 <vfprintf+0x82>
    2e5c:	98 2f       	mov	r25, r24
    2e5e:	9f 7d       	andi	r25, 0xDF	; 223
    2e60:	95 54       	subi	r25, 0x45	; 69
    2e62:	93 30       	cpi	r25, 0x03	; 3
    2e64:	28 f4       	brcc	.+10     	; 0x2e70 <vfprintf+0x130>
    2e66:	0c 5f       	subi	r16, 0xFC	; 252
    2e68:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6a:	9f e3       	ldi	r25, 0x3F	; 63
    2e6c:	99 83       	std	Y+1, r25	; 0x01
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <vfprintf+0x14a>
    2e70:	83 36       	cpi	r24, 0x63	; 99
    2e72:	31 f0       	breq	.+12     	; 0x2e80 <vfprintf+0x140>
    2e74:	83 37       	cpi	r24, 0x73	; 115
    2e76:	71 f0       	breq	.+28     	; 0x2e94 <vfprintf+0x154>
    2e78:	83 35       	cpi	r24, 0x53	; 83
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <vfprintf+0x13e>
    2e7c:	55 c0       	rjmp	.+170    	; 0x2f28 <vfprintf+0x1e8>
    2e7e:	20 c0       	rjmp	.+64     	; 0x2ec0 <vfprintf+0x180>
    2e80:	f8 01       	movw	r30, r16
    2e82:	80 81       	ld	r24, Z
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	0e 5f       	subi	r16, 0xFE	; 254
    2e88:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8a:	88 24       	eor	r8, r8
    2e8c:	83 94       	inc	r8
    2e8e:	91 2c       	mov	r9, r1
    2e90:	53 01       	movw	r10, r6
    2e92:	12 c0       	rjmp	.+36     	; 0x2eb8 <vfprintf+0x178>
    2e94:	28 01       	movw	r4, r16
    2e96:	f2 e0       	ldi	r31, 0x02	; 2
    2e98:	4f 0e       	add	r4, r31
    2e9a:	51 1c       	adc	r5, r1
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	a0 80       	ld	r10, Z
    2ea0:	b1 80       	ldd	r11, Z+1	; 0x01
    2ea2:	36 fe       	sbrs	r3, 6
    2ea4:	03 c0       	rjmp	.+6      	; 0x2eac <vfprintf+0x16c>
    2ea6:	69 2d       	mov	r22, r9
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <vfprintf+0x170>
    2eac:	6f ef       	ldi	r22, 0xFF	; 255
    2eae:	7f ef       	ldi	r23, 0xFF	; 255
    2eb0:	c5 01       	movw	r24, r10
    2eb2:	4e d1       	rcall	.+668    	; 0x3150 <strnlen>
    2eb4:	4c 01       	movw	r8, r24
    2eb6:	82 01       	movw	r16, r4
    2eb8:	f3 2d       	mov	r31, r3
    2eba:	ff 77       	andi	r31, 0x7F	; 127
    2ebc:	3f 2e       	mov	r3, r31
    2ebe:	15 c0       	rjmp	.+42     	; 0x2eea <vfprintf+0x1aa>
    2ec0:	28 01       	movw	r4, r16
    2ec2:	22 e0       	ldi	r18, 0x02	; 2
    2ec4:	42 0e       	add	r4, r18
    2ec6:	51 1c       	adc	r5, r1
    2ec8:	f8 01       	movw	r30, r16
    2eca:	a0 80       	ld	r10, Z
    2ecc:	b1 80       	ldd	r11, Z+1	; 0x01
    2ece:	36 fe       	sbrs	r3, 6
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <vfprintf+0x198>
    2ed2:	69 2d       	mov	r22, r9
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <vfprintf+0x19c>
    2ed8:	6f ef       	ldi	r22, 0xFF	; 255
    2eda:	7f ef       	ldi	r23, 0xFF	; 255
    2edc:	c5 01       	movw	r24, r10
    2ede:	2d d1       	rcall	.+602    	; 0x313a <strnlen_P>
    2ee0:	4c 01       	movw	r8, r24
    2ee2:	f3 2d       	mov	r31, r3
    2ee4:	f0 68       	ori	r31, 0x80	; 128
    2ee6:	3f 2e       	mov	r3, r31
    2ee8:	82 01       	movw	r16, r4
    2eea:	33 fc       	sbrc	r3, 3
    2eec:	19 c0       	rjmp	.+50     	; 0x2f20 <vfprintf+0x1e0>
    2eee:	82 2d       	mov	r24, r2
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	88 16       	cp	r8, r24
    2ef4:	99 06       	cpc	r9, r25
    2ef6:	a0 f4       	brcc	.+40     	; 0x2f20 <vfprintf+0x1e0>
    2ef8:	b6 01       	movw	r22, r12
    2efa:	80 e2       	ldi	r24, 0x20	; 32
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	33 d1       	rcall	.+614    	; 0x3166 <fputc>
    2f00:	2a 94       	dec	r2
    2f02:	f5 cf       	rjmp	.-22     	; 0x2eee <vfprintf+0x1ae>
    2f04:	f5 01       	movw	r30, r10
    2f06:	37 fc       	sbrc	r3, 7
    2f08:	85 91       	lpm	r24, Z+
    2f0a:	37 fe       	sbrs	r3, 7
    2f0c:	81 91       	ld	r24, Z+
    2f0e:	5f 01       	movw	r10, r30
    2f10:	b6 01       	movw	r22, r12
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	28 d1       	rcall	.+592    	; 0x3166 <fputc>
    2f16:	21 10       	cpse	r2, r1
    2f18:	2a 94       	dec	r2
    2f1a:	21 e0       	ldi	r18, 0x01	; 1
    2f1c:	82 1a       	sub	r8, r18
    2f1e:	91 08       	sbc	r9, r1
    2f20:	81 14       	cp	r8, r1
    2f22:	91 04       	cpc	r9, r1
    2f24:	79 f7       	brne	.-34     	; 0x2f04 <vfprintf+0x1c4>
    2f26:	e1 c0       	rjmp	.+450    	; 0x30ea <vfprintf+0x3aa>
    2f28:	84 36       	cpi	r24, 0x64	; 100
    2f2a:	11 f0       	breq	.+4      	; 0x2f30 <vfprintf+0x1f0>
    2f2c:	89 36       	cpi	r24, 0x69	; 105
    2f2e:	39 f5       	brne	.+78     	; 0x2f7e <vfprintf+0x23e>
    2f30:	f8 01       	movw	r30, r16
    2f32:	37 fe       	sbrs	r3, 7
    2f34:	07 c0       	rjmp	.+14     	; 0x2f44 <vfprintf+0x204>
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	0c 5f       	subi	r16, 0xFC	; 252
    2f40:	1f 4f       	sbci	r17, 0xFF	; 255
    2f42:	08 c0       	rjmp	.+16     	; 0x2f54 <vfprintf+0x214>
    2f44:	60 81       	ld	r22, Z
    2f46:	71 81       	ldd	r23, Z+1	; 0x01
    2f48:	07 2e       	mov	r0, r23
    2f4a:	00 0c       	add	r0, r0
    2f4c:	88 0b       	sbc	r24, r24
    2f4e:	99 0b       	sbc	r25, r25
    2f50:	0e 5f       	subi	r16, 0xFE	; 254
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
    2f54:	f3 2d       	mov	r31, r3
    2f56:	ff 76       	andi	r31, 0x6F	; 111
    2f58:	3f 2e       	mov	r3, r31
    2f5a:	97 ff       	sbrs	r25, 7
    2f5c:	09 c0       	rjmp	.+18     	; 0x2f70 <vfprintf+0x230>
    2f5e:	90 95       	com	r25
    2f60:	80 95       	com	r24
    2f62:	70 95       	com	r23
    2f64:	61 95       	neg	r22
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255
    2f68:	8f 4f       	sbci	r24, 0xFF	; 255
    2f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6c:	f0 68       	ori	r31, 0x80	; 128
    2f6e:	3f 2e       	mov	r3, r31
    2f70:	2a e0       	ldi	r18, 0x0A	; 10
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	a3 01       	movw	r20, r6
    2f76:	33 d1       	rcall	.+614    	; 0x31de <__ultoa_invert>
    2f78:	88 2e       	mov	r8, r24
    2f7a:	86 18       	sub	r8, r6
    2f7c:	44 c0       	rjmp	.+136    	; 0x3006 <vfprintf+0x2c6>
    2f7e:	85 37       	cpi	r24, 0x75	; 117
    2f80:	31 f4       	brne	.+12     	; 0x2f8e <vfprintf+0x24e>
    2f82:	23 2d       	mov	r18, r3
    2f84:	2f 7e       	andi	r18, 0xEF	; 239
    2f86:	b2 2e       	mov	r11, r18
    2f88:	2a e0       	ldi	r18, 0x0A	; 10
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	25 c0       	rjmp	.+74     	; 0x2fd8 <vfprintf+0x298>
    2f8e:	93 2d       	mov	r25, r3
    2f90:	99 7f       	andi	r25, 0xF9	; 249
    2f92:	b9 2e       	mov	r11, r25
    2f94:	8f 36       	cpi	r24, 0x6F	; 111
    2f96:	c1 f0       	breq	.+48     	; 0x2fc8 <vfprintf+0x288>
    2f98:	18 f4       	brcc	.+6      	; 0x2fa0 <vfprintf+0x260>
    2f9a:	88 35       	cpi	r24, 0x58	; 88
    2f9c:	79 f0       	breq	.+30     	; 0x2fbc <vfprintf+0x27c>
    2f9e:	ae c0       	rjmp	.+348    	; 0x30fc <vfprintf+0x3bc>
    2fa0:	80 37       	cpi	r24, 0x70	; 112
    2fa2:	19 f0       	breq	.+6      	; 0x2faa <vfprintf+0x26a>
    2fa4:	88 37       	cpi	r24, 0x78	; 120
    2fa6:	21 f0       	breq	.+8      	; 0x2fb0 <vfprintf+0x270>
    2fa8:	a9 c0       	rjmp	.+338    	; 0x30fc <vfprintf+0x3bc>
    2faa:	e9 2f       	mov	r30, r25
    2fac:	e0 61       	ori	r30, 0x10	; 16
    2fae:	be 2e       	mov	r11, r30
    2fb0:	b4 fe       	sbrs	r11, 4
    2fb2:	0d c0       	rjmp	.+26     	; 0x2fce <vfprintf+0x28e>
    2fb4:	fb 2d       	mov	r31, r11
    2fb6:	f4 60       	ori	r31, 0x04	; 4
    2fb8:	bf 2e       	mov	r11, r31
    2fba:	09 c0       	rjmp	.+18     	; 0x2fce <vfprintf+0x28e>
    2fbc:	34 fe       	sbrs	r3, 4
    2fbe:	0a c0       	rjmp	.+20     	; 0x2fd4 <vfprintf+0x294>
    2fc0:	29 2f       	mov	r18, r25
    2fc2:	26 60       	ori	r18, 0x06	; 6
    2fc4:	b2 2e       	mov	r11, r18
    2fc6:	06 c0       	rjmp	.+12     	; 0x2fd4 <vfprintf+0x294>
    2fc8:	28 e0       	ldi	r18, 0x08	; 8
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	05 c0       	rjmp	.+10     	; 0x2fd8 <vfprintf+0x298>
    2fce:	20 e1       	ldi	r18, 0x10	; 16
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <vfprintf+0x298>
    2fd4:	20 e1       	ldi	r18, 0x10	; 16
    2fd6:	32 e0       	ldi	r19, 0x02	; 2
    2fd8:	f8 01       	movw	r30, r16
    2fda:	b7 fe       	sbrs	r11, 7
    2fdc:	07 c0       	rjmp	.+14     	; 0x2fec <vfprintf+0x2ac>
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	0c 5f       	subi	r16, 0xFC	; 252
    2fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fea:	06 c0       	rjmp	.+12     	; 0x2ff8 <vfprintf+0x2b8>
    2fec:	60 81       	ld	r22, Z
    2fee:	71 81       	ldd	r23, Z+1	; 0x01
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 5f       	subi	r16, 0xFE	; 254
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	a3 01       	movw	r20, r6
    2ffa:	f1 d0       	rcall	.+482    	; 0x31de <__ultoa_invert>
    2ffc:	88 2e       	mov	r8, r24
    2ffe:	86 18       	sub	r8, r6
    3000:	fb 2d       	mov	r31, r11
    3002:	ff 77       	andi	r31, 0x7F	; 127
    3004:	3f 2e       	mov	r3, r31
    3006:	36 fe       	sbrs	r3, 6
    3008:	0d c0       	rjmp	.+26     	; 0x3024 <vfprintf+0x2e4>
    300a:	23 2d       	mov	r18, r3
    300c:	2e 7f       	andi	r18, 0xFE	; 254
    300e:	a2 2e       	mov	r10, r18
    3010:	89 14       	cp	r8, r9
    3012:	58 f4       	brcc	.+22     	; 0x302a <vfprintf+0x2ea>
    3014:	34 fe       	sbrs	r3, 4
    3016:	0b c0       	rjmp	.+22     	; 0x302e <vfprintf+0x2ee>
    3018:	32 fc       	sbrc	r3, 2
    301a:	09 c0       	rjmp	.+18     	; 0x302e <vfprintf+0x2ee>
    301c:	83 2d       	mov	r24, r3
    301e:	8e 7e       	andi	r24, 0xEE	; 238
    3020:	a8 2e       	mov	r10, r24
    3022:	05 c0       	rjmp	.+10     	; 0x302e <vfprintf+0x2ee>
    3024:	b8 2c       	mov	r11, r8
    3026:	a3 2c       	mov	r10, r3
    3028:	03 c0       	rjmp	.+6      	; 0x3030 <vfprintf+0x2f0>
    302a:	b8 2c       	mov	r11, r8
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <vfprintf+0x2f0>
    302e:	b9 2c       	mov	r11, r9
    3030:	a4 fe       	sbrs	r10, 4
    3032:	0f c0       	rjmp	.+30     	; 0x3052 <vfprintf+0x312>
    3034:	fe 01       	movw	r30, r28
    3036:	e8 0d       	add	r30, r8
    3038:	f1 1d       	adc	r31, r1
    303a:	80 81       	ld	r24, Z
    303c:	80 33       	cpi	r24, 0x30	; 48
    303e:	21 f4       	brne	.+8      	; 0x3048 <vfprintf+0x308>
    3040:	9a 2d       	mov	r25, r10
    3042:	99 7e       	andi	r25, 0xE9	; 233
    3044:	a9 2e       	mov	r10, r25
    3046:	09 c0       	rjmp	.+18     	; 0x305a <vfprintf+0x31a>
    3048:	a2 fe       	sbrs	r10, 2
    304a:	06 c0       	rjmp	.+12     	; 0x3058 <vfprintf+0x318>
    304c:	b3 94       	inc	r11
    304e:	b3 94       	inc	r11
    3050:	04 c0       	rjmp	.+8      	; 0x305a <vfprintf+0x31a>
    3052:	8a 2d       	mov	r24, r10
    3054:	86 78       	andi	r24, 0x86	; 134
    3056:	09 f0       	breq	.+2      	; 0x305a <vfprintf+0x31a>
    3058:	b3 94       	inc	r11
    305a:	a3 fc       	sbrc	r10, 3
    305c:	10 c0       	rjmp	.+32     	; 0x307e <vfprintf+0x33e>
    305e:	a0 fe       	sbrs	r10, 0
    3060:	06 c0       	rjmp	.+12     	; 0x306e <vfprintf+0x32e>
    3062:	b2 14       	cp	r11, r2
    3064:	80 f4       	brcc	.+32     	; 0x3086 <vfprintf+0x346>
    3066:	28 0c       	add	r2, r8
    3068:	92 2c       	mov	r9, r2
    306a:	9b 18       	sub	r9, r11
    306c:	0d c0       	rjmp	.+26     	; 0x3088 <vfprintf+0x348>
    306e:	b2 14       	cp	r11, r2
    3070:	58 f4       	brcc	.+22     	; 0x3088 <vfprintf+0x348>
    3072:	b6 01       	movw	r22, r12
    3074:	80 e2       	ldi	r24, 0x20	; 32
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	76 d0       	rcall	.+236    	; 0x3166 <fputc>
    307a:	b3 94       	inc	r11
    307c:	f8 cf       	rjmp	.-16     	; 0x306e <vfprintf+0x32e>
    307e:	b2 14       	cp	r11, r2
    3080:	18 f4       	brcc	.+6      	; 0x3088 <vfprintf+0x348>
    3082:	2b 18       	sub	r2, r11
    3084:	02 c0       	rjmp	.+4      	; 0x308a <vfprintf+0x34a>
    3086:	98 2c       	mov	r9, r8
    3088:	21 2c       	mov	r2, r1
    308a:	a4 fe       	sbrs	r10, 4
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <vfprintf+0x36c>
    308e:	b6 01       	movw	r22, r12
    3090:	80 e3       	ldi	r24, 0x30	; 48
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	68 d0       	rcall	.+208    	; 0x3166 <fputc>
    3096:	a2 fe       	sbrs	r10, 2
    3098:	16 c0       	rjmp	.+44     	; 0x30c6 <vfprintf+0x386>
    309a:	a1 fc       	sbrc	r10, 1
    309c:	03 c0       	rjmp	.+6      	; 0x30a4 <vfprintf+0x364>
    309e:	88 e7       	ldi	r24, 0x78	; 120
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <vfprintf+0x368>
    30a4:	88 e5       	ldi	r24, 0x58	; 88
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	b6 01       	movw	r22, r12
    30aa:	0c c0       	rjmp	.+24     	; 0x30c4 <vfprintf+0x384>
    30ac:	8a 2d       	mov	r24, r10
    30ae:	86 78       	andi	r24, 0x86	; 134
    30b0:	51 f0       	breq	.+20     	; 0x30c6 <vfprintf+0x386>
    30b2:	a1 fe       	sbrs	r10, 1
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <vfprintf+0x37a>
    30b6:	8b e2       	ldi	r24, 0x2B	; 43
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <vfprintf+0x37c>
    30ba:	80 e2       	ldi	r24, 0x20	; 32
    30bc:	a7 fc       	sbrc	r10, 7
    30be:	8d e2       	ldi	r24, 0x2D	; 45
    30c0:	b6 01       	movw	r22, r12
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	50 d0       	rcall	.+160    	; 0x3166 <fputc>
    30c6:	89 14       	cp	r8, r9
    30c8:	30 f4       	brcc	.+12     	; 0x30d6 <vfprintf+0x396>
    30ca:	b6 01       	movw	r22, r12
    30cc:	80 e3       	ldi	r24, 0x30	; 48
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	4a d0       	rcall	.+148    	; 0x3166 <fputc>
    30d2:	9a 94       	dec	r9
    30d4:	f8 cf       	rjmp	.-16     	; 0x30c6 <vfprintf+0x386>
    30d6:	8a 94       	dec	r8
    30d8:	f3 01       	movw	r30, r6
    30da:	e8 0d       	add	r30, r8
    30dc:	f1 1d       	adc	r31, r1
    30de:	80 81       	ld	r24, Z
    30e0:	b6 01       	movw	r22, r12
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	40 d0       	rcall	.+128    	; 0x3166 <fputc>
    30e6:	81 10       	cpse	r8, r1
    30e8:	f6 cf       	rjmp	.-20     	; 0x30d6 <vfprintf+0x396>
    30ea:	22 20       	and	r2, r2
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <vfprintf+0x3b0>
    30ee:	4e ce       	rjmp	.-868    	; 0x2d8c <vfprintf+0x4c>
    30f0:	b6 01       	movw	r22, r12
    30f2:	80 e2       	ldi	r24, 0x20	; 32
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	37 d0       	rcall	.+110    	; 0x3166 <fputc>
    30f8:	2a 94       	dec	r2
    30fa:	f7 cf       	rjmp	.-18     	; 0x30ea <vfprintf+0x3aa>
    30fc:	f6 01       	movw	r30, r12
    30fe:	86 81       	ldd	r24, Z+6	; 0x06
    3100:	97 81       	ldd	r25, Z+7	; 0x07
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <vfprintf+0x3c8>
    3104:	8f ef       	ldi	r24, 0xFF	; 255
    3106:	9f ef       	ldi	r25, 0xFF	; 255
    3108:	2b 96       	adiw	r28, 0x0b	; 11
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	ff 90       	pop	r15
    311e:	ef 90       	pop	r14
    3120:	df 90       	pop	r13
    3122:	cf 90       	pop	r12
    3124:	bf 90       	pop	r11
    3126:	af 90       	pop	r10
    3128:	9f 90       	pop	r9
    312a:	8f 90       	pop	r8
    312c:	7f 90       	pop	r7
    312e:	6f 90       	pop	r6
    3130:	5f 90       	pop	r5
    3132:	4f 90       	pop	r4
    3134:	3f 90       	pop	r3
    3136:	2f 90       	pop	r2
    3138:	08 95       	ret

0000313a <strnlen_P>:
    313a:	fc 01       	movw	r30, r24
    313c:	05 90       	lpm	r0, Z+
    313e:	61 50       	subi	r22, 0x01	; 1
    3140:	70 40       	sbci	r23, 0x00	; 0
    3142:	01 10       	cpse	r0, r1
    3144:	d8 f7       	brcc	.-10     	; 0x313c <strnlen_P+0x2>
    3146:	80 95       	com	r24
    3148:	90 95       	com	r25
    314a:	8e 0f       	add	r24, r30
    314c:	9f 1f       	adc	r25, r31
    314e:	08 95       	ret

00003150 <strnlen>:
    3150:	fc 01       	movw	r30, r24
    3152:	61 50       	subi	r22, 0x01	; 1
    3154:	70 40       	sbci	r23, 0x00	; 0
    3156:	01 90       	ld	r0, Z+
    3158:	01 10       	cpse	r0, r1
    315a:	d8 f7       	brcc	.-10     	; 0x3152 <strnlen+0x2>
    315c:	80 95       	com	r24
    315e:	90 95       	com	r25
    3160:	8e 0f       	add	r24, r30
    3162:	9f 1f       	adc	r25, r31
    3164:	08 95       	ret

00003166 <fputc>:
    3166:	0f 93       	push	r16
    3168:	1f 93       	push	r17
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	fb 01       	movw	r30, r22
    3170:	23 81       	ldd	r18, Z+3	; 0x03
    3172:	21 fd       	sbrc	r18, 1
    3174:	03 c0       	rjmp	.+6      	; 0x317c <fputc+0x16>
    3176:	8f ef       	ldi	r24, 0xFF	; 255
    3178:	9f ef       	ldi	r25, 0xFF	; 255
    317a:	2c c0       	rjmp	.+88     	; 0x31d4 <fputc+0x6e>
    317c:	22 ff       	sbrs	r18, 2
    317e:	16 c0       	rjmp	.+44     	; 0x31ac <fputc+0x46>
    3180:	46 81       	ldd	r20, Z+6	; 0x06
    3182:	57 81       	ldd	r21, Z+7	; 0x07
    3184:	24 81       	ldd	r18, Z+4	; 0x04
    3186:	35 81       	ldd	r19, Z+5	; 0x05
    3188:	42 17       	cp	r20, r18
    318a:	53 07       	cpc	r21, r19
    318c:	44 f4       	brge	.+16     	; 0x319e <fputc+0x38>
    318e:	a0 81       	ld	r26, Z
    3190:	b1 81       	ldd	r27, Z+1	; 0x01
    3192:	9d 01       	movw	r18, r26
    3194:	2f 5f       	subi	r18, 0xFF	; 255
    3196:	3f 4f       	sbci	r19, 0xFF	; 255
    3198:	31 83       	std	Z+1, r19	; 0x01
    319a:	20 83       	st	Z, r18
    319c:	8c 93       	st	X, r24
    319e:	26 81       	ldd	r18, Z+6	; 0x06
    31a0:	37 81       	ldd	r19, Z+7	; 0x07
    31a2:	2f 5f       	subi	r18, 0xFF	; 255
    31a4:	3f 4f       	sbci	r19, 0xFF	; 255
    31a6:	37 83       	std	Z+7, r19	; 0x07
    31a8:	26 83       	std	Z+6, r18	; 0x06
    31aa:	14 c0       	rjmp	.+40     	; 0x31d4 <fputc+0x6e>
    31ac:	8b 01       	movw	r16, r22
    31ae:	ec 01       	movw	r28, r24
    31b0:	fb 01       	movw	r30, r22
    31b2:	00 84       	ldd	r0, Z+8	; 0x08
    31b4:	f1 85       	ldd	r31, Z+9	; 0x09
    31b6:	e0 2d       	mov	r30, r0
    31b8:	19 95       	eicall
    31ba:	89 2b       	or	r24, r25
    31bc:	e1 f6       	brne	.-72     	; 0x3176 <fputc+0x10>
    31be:	d8 01       	movw	r26, r16
    31c0:	16 96       	adiw	r26, 0x06	; 6
    31c2:	8d 91       	ld	r24, X+
    31c4:	9c 91       	ld	r25, X
    31c6:	17 97       	sbiw	r26, 0x07	; 7
    31c8:	01 96       	adiw	r24, 0x01	; 1
    31ca:	17 96       	adiw	r26, 0x07	; 7
    31cc:	9c 93       	st	X, r25
    31ce:	8e 93       	st	-X, r24
    31d0:	16 97       	sbiw	r26, 0x06	; 6
    31d2:	ce 01       	movw	r24, r28
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	08 95       	ret

000031de <__ultoa_invert>:
    31de:	fa 01       	movw	r30, r20
    31e0:	aa 27       	eor	r26, r26
    31e2:	28 30       	cpi	r18, 0x08	; 8
    31e4:	51 f1       	breq	.+84     	; 0x323a <__ultoa_invert+0x5c>
    31e6:	20 31       	cpi	r18, 0x10	; 16
    31e8:	81 f1       	breq	.+96     	; 0x324a <__ultoa_invert+0x6c>
    31ea:	e8 94       	clt
    31ec:	6f 93       	push	r22
    31ee:	6e 7f       	andi	r22, 0xFE	; 254
    31f0:	6e 5f       	subi	r22, 0xFE	; 254
    31f2:	7f 4f       	sbci	r23, 0xFF	; 255
    31f4:	8f 4f       	sbci	r24, 0xFF	; 255
    31f6:	9f 4f       	sbci	r25, 0xFF	; 255
    31f8:	af 4f       	sbci	r26, 0xFF	; 255
    31fa:	b1 e0       	ldi	r27, 0x01	; 1
    31fc:	3e d0       	rcall	.+124    	; 0x327a <__ultoa_invert+0x9c>
    31fe:	b4 e0       	ldi	r27, 0x04	; 4
    3200:	3c d0       	rcall	.+120    	; 0x327a <__ultoa_invert+0x9c>
    3202:	67 0f       	add	r22, r23
    3204:	78 1f       	adc	r23, r24
    3206:	89 1f       	adc	r24, r25
    3208:	9a 1f       	adc	r25, r26
    320a:	a1 1d       	adc	r26, r1
    320c:	68 0f       	add	r22, r24
    320e:	79 1f       	adc	r23, r25
    3210:	8a 1f       	adc	r24, r26
    3212:	91 1d       	adc	r25, r1
    3214:	a1 1d       	adc	r26, r1
    3216:	6a 0f       	add	r22, r26
    3218:	71 1d       	adc	r23, r1
    321a:	81 1d       	adc	r24, r1
    321c:	91 1d       	adc	r25, r1
    321e:	a1 1d       	adc	r26, r1
    3220:	20 d0       	rcall	.+64     	; 0x3262 <__ultoa_invert+0x84>
    3222:	09 f4       	brne	.+2      	; 0x3226 <__ultoa_invert+0x48>
    3224:	68 94       	set
    3226:	3f 91       	pop	r19
    3228:	2a e0       	ldi	r18, 0x0A	; 10
    322a:	26 9f       	mul	r18, r22
    322c:	11 24       	eor	r1, r1
    322e:	30 19       	sub	r19, r0
    3230:	30 5d       	subi	r19, 0xD0	; 208
    3232:	31 93       	st	Z+, r19
    3234:	de f6       	brtc	.-74     	; 0x31ec <__ultoa_invert+0xe>
    3236:	cf 01       	movw	r24, r30
    3238:	08 95       	ret
    323a:	46 2f       	mov	r20, r22
    323c:	47 70       	andi	r20, 0x07	; 7
    323e:	40 5d       	subi	r20, 0xD0	; 208
    3240:	41 93       	st	Z+, r20
    3242:	b3 e0       	ldi	r27, 0x03	; 3
    3244:	0f d0       	rcall	.+30     	; 0x3264 <__ultoa_invert+0x86>
    3246:	c9 f7       	brne	.-14     	; 0x323a <__ultoa_invert+0x5c>
    3248:	f6 cf       	rjmp	.-20     	; 0x3236 <__ultoa_invert+0x58>
    324a:	46 2f       	mov	r20, r22
    324c:	4f 70       	andi	r20, 0x0F	; 15
    324e:	40 5d       	subi	r20, 0xD0	; 208
    3250:	4a 33       	cpi	r20, 0x3A	; 58
    3252:	18 f0       	brcs	.+6      	; 0x325a <__ultoa_invert+0x7c>
    3254:	49 5d       	subi	r20, 0xD9	; 217
    3256:	31 fd       	sbrc	r19, 1
    3258:	40 52       	subi	r20, 0x20	; 32
    325a:	41 93       	st	Z+, r20
    325c:	02 d0       	rcall	.+4      	; 0x3262 <__ultoa_invert+0x84>
    325e:	a9 f7       	brne	.-22     	; 0x324a <__ultoa_invert+0x6c>
    3260:	ea cf       	rjmp	.-44     	; 0x3236 <__ultoa_invert+0x58>
    3262:	b4 e0       	ldi	r27, 0x04	; 4
    3264:	a6 95       	lsr	r26
    3266:	97 95       	ror	r25
    3268:	87 95       	ror	r24
    326a:	77 95       	ror	r23
    326c:	67 95       	ror	r22
    326e:	ba 95       	dec	r27
    3270:	c9 f7       	brne	.-14     	; 0x3264 <__ultoa_invert+0x86>
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	61 05       	cpc	r22, r1
    3276:	71 05       	cpc	r23, r1
    3278:	08 95       	ret
    327a:	9b 01       	movw	r18, r22
    327c:	ac 01       	movw	r20, r24
    327e:	0a 2e       	mov	r0, r26
    3280:	06 94       	lsr	r0
    3282:	57 95       	ror	r21
    3284:	47 95       	ror	r20
    3286:	37 95       	ror	r19
    3288:	27 95       	ror	r18
    328a:	ba 95       	dec	r27
    328c:	c9 f7       	brne	.-14     	; 0x3280 <__ultoa_invert+0xa2>
    328e:	62 0f       	add	r22, r18
    3290:	73 1f       	adc	r23, r19
    3292:	84 1f       	adc	r24, r20
    3294:	95 1f       	adc	r25, r21
    3296:	a0 1d       	adc	r26, r0
    3298:	08 95       	ret

0000329a <_exit>:
    329a:	f8 94       	cli

0000329c <__stop_program>:
    329c:	ff cf       	rjmp	.-2      	; 0x329c <__stop_program>
